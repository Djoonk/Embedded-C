
LCD1602_DTH11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008b98  08008b98  00018b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fac  08008fac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fb4  08008fb4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fb4  08008fb4  00018fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb8  08008fb8  00018fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001dc  08009198  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08009198  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb6d  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eca  00000000  00000000  0002cd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ead  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f521  00000000  00000000  00046fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088f0a  00000000  00000000  000564f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df400  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dac  00000000  00000000  000df450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b7c 	.word	0x08008b7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008b7c 	.word	0x08008b7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <pinOutput>:
#define lineDown() HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_RESET)
#define lineUp() HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET)
#define getLine() (HAL_GPIO_ReadPin(DHT_Port, DHT_Pin) == GPIO_PIN_SET)
#define Delay(d) HAL_Delay(d)

static void pinOutput(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]

//По умолчанию на линии высокий уровень
HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <pinOutput+0x40>)
 8000ed6:	f001 fa51 	bl	800237c <HAL_GPIO_WritePin>

//Настройка порта на выход
GPIO_InitStruct.Pin = DHT_Pin;
 8000eda:	2308      	movs	r3, #8
 8000edc:	607b      	str	r3, [r7, #4]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; //Открытый сток
 8000ede:	2311      	movs	r3, #17
 8000ee0:	60bb      	str	r3, [r7, #8]
#if DHT_PullUp == 1
   GPIO_InitStruct.Pull = GPIO_PULLUP; //Подтяжка к питанию
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
#else
    GPIO_InitStruct.Pull = GPIO_NOPULL; //Без подтяжки
#endif
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <pinOutput+0x40>)
 8000ef0:	f001 f8a8 	bl	8002044 <HAL_GPIO_Init>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020800 	.word	0x40020800

08000f00 <pinInput>:

static void pinInput(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]

//Настройка порта на вход
GPIO_InitStruct.Pin = DHT_Pin;
 8000f14:	2308      	movs	r3, #8
 8000f16:	607b      	str	r3, [r7, #4]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  #if DHT_PullUp == 1
GPIO_InitStruct.Pull = GPIO_PULLUP; //Подтяжка к питанию
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
  #else
GPIO_InitStruct.Pull = GPIO_NOPULL; //Без подтяжки
   #endif
HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <pinInput+0x34>)
 8000f26:	f001 f88d 	bl	8002044 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020800 	.word	0x40020800

08000f38 <DHT_getData>:

DHT_data DHT_getData(DHT_type t) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
DHT_data data = {0.0f, 0.0f};
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]

/* Запрос данных у датчика */
//Перевод пина “на выход”
pinOutput();
 8000f50:	f7ff ffb4 	bl	8000ebc <pinOutput>
//Опускание линии данных на 15 мс
lineDown();
 8000f54:	2200      	movs	r2, #0
 8000f56:	2108      	movs	r1, #8
 8000f58:	488a      	ldr	r0, [pc, #552]	; (8001184 <DHT_getData+0x24c>)
 8000f5a:	f001 fa0f 	bl	800237c <HAL_GPIO_WritePin>
Delay(18);
 8000f5e:	2012      	movs	r0, #18
 8000f60:	f000 fe9a 	bl	8001c98 <HAL_Delay>
//Подъём линии, перевод порта “на вход”
lineUp();
 8000f64:	2201      	movs	r2, #1
 8000f66:	2108      	movs	r1, #8
 8000f68:	4886      	ldr	r0, [pc, #536]	; (8001184 <DHT_getData+0x24c>)
 8000f6a:	f001 fa07 	bl	800237c <HAL_GPIO_WritePin>
pinInput();
 8000f6e:	f7ff ffc7 	bl	8000f00 <pinInput>

/* Ожидание ответа от датчика */
uint16_t timeout = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	84fb      	strh	r3, [r7, #38]	; 0x26
//Ожидание спада
while(getLine()) {
 8000f76:	e010      	b.n	8000f9a <DHT_getData+0x62>
   timeout++;
 8000f78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	84fb      	strh	r3, [r7, #38]	; 0x26
   if (timeout > DHT_timeout) return data;
 8000f7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f80:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d908      	bls.n	8000f9a <DHT_getData+0x62>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f94:	e882 0003 	stmia.w	r2, {r0, r1}
 8000f98:	e0ef      	b.n	800117a <DHT_getData+0x242>
while(getLine()) {
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	4879      	ldr	r0, [pc, #484]	; (8001184 <DHT_getData+0x24c>)
 8000f9e:	f001 f9d5 	bl	800234c <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d0e7      	beq.n	8000f78 <DHT_getData+0x40>
}
timeout = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	84fb      	strh	r3, [r7, #38]	; 0x26
//Ожидание подъёма
while(!getLine()) {
 8000fac:	e010      	b.n	8000fd0 <DHT_getData+0x98>
   timeout++;
 8000fae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
   if (timeout > DHT_timeout) return data;
 8000fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d908      	bls.n	8000fd0 <DHT_getData+0x98>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000fca:	e882 0003 	stmia.w	r2, {r0, r1}
 8000fce:	e0d4      	b.n	800117a <DHT_getData+0x242>
while(!getLine()) {
 8000fd0:	2108      	movs	r1, #8
 8000fd2:	486c      	ldr	r0, [pc, #432]	; (8001184 <DHT_getData+0x24c>)
 8000fd4:	f001 f9ba 	bl	800234c <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d1e7      	bne.n	8000fae <DHT_getData+0x76>
}
timeout = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
//Ожидание спада
while(getLine()) {
 8000fe2:	e010      	b.n	8001006 <DHT_getData+0xce>
    timeout++;
 8000fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	84fb      	strh	r3, [r7, #38]	; 0x26
     if (timeout > DHT_timeout) return data;
 8000fea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fec:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d908      	bls.n	8001006 <DHT_getData+0xce>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001000:	e882 0003 	stmia.w	r2, {r0, r1}
 8001004:	e0b9      	b.n	800117a <DHT_getData+0x242>
while(getLine()) {
 8001006:	2108      	movs	r1, #8
 8001008:	485e      	ldr	r0, [pc, #376]	; (8001184 <DHT_getData+0x24c>)
 800100a:	f001 f99f 	bl	800234c <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b01      	cmp	r3, #1
 8001012:	d0e7      	beq.n	8000fe4 <DHT_getData+0xac>
}

/* Чтение ответа от датчика */
uint8_t rawData[5] = {0,0,0,0,0};
 8001014:	4a5c      	ldr	r2, [pc, #368]	; (8001188 <DHT_getData+0x250>)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800101e:	6018      	str	r0, [r3, #0]
 8001020:	3304      	adds	r3, #4
 8001022:	7019      	strb	r1, [r3, #0]
for(uint8_t a = 0; a < 5; a++) {
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800102a:	e045      	b.n	80010b8 <DHT_getData+0x180>
     for(uint8_t b = 7; b != 255; b--) {
 800102c:	2307      	movs	r3, #7
 800102e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001032:	e038      	b.n	80010a6 <DHT_getData+0x16e>
           uint32_t hT = 0, lT = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
           //Пока линия в низком уровне, инкремент переменной lT
            while(!getLine()) lT++;
 800103c:	e002      	b.n	8001044 <DHT_getData+0x10c>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	2108      	movs	r1, #8
 8001046:	484f      	ldr	r0, [pc, #316]	; (8001184 <DHT_getData+0x24c>)
 8001048:	f001 f980 	bl	800234c <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1f5      	bne.n	800103e <DHT_getData+0x106>
            //Пока линия в высоком уровне, инкремент переменной hT
            while(getLine()) hT++;
 8001052:	e002      	b.n	800105a <DHT_getData+0x122>
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	3301      	adds	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	2108      	movs	r1, #8
 800105c:	4849      	ldr	r0, [pc, #292]	; (8001184 <DHT_getData+0x24c>)
 800105e:	f001 f975 	bl	800234c <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d0f5      	beq.n	8001054 <DHT_getData+0x11c>
            //Если hT больше lT, то пришла единица
             if(hT > lT) rawData[a] |= (1<<b);
 8001068:	6a3a      	ldr	r2, [r7, #32]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	d915      	bls.n	800109c <DHT_getData+0x164>
 8001070:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001074:	3328      	adds	r3, #40	; 0x28
 8001076:	443b      	add	r3, r7
 8001078:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800107c:	b25a      	sxtb	r2, r3
 800107e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001082:	2101      	movs	r1, #1
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	b25b      	sxtb	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b25a      	sxtb	r2, r3
 800108e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	3328      	adds	r3, #40	; 0x28
 8001096:	443b      	add	r3, r7
 8001098:	f803 2c1c 	strb.w	r2, [r3, #-28]
     for(uint8_t b = 7; b != 255; b--) {
 800109c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010a0:	3b01      	subs	r3, #1
 80010a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80010a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010aa:	2bff      	cmp	r3, #255	; 0xff
 80010ac:	d1c2      	bne.n	8001034 <DHT_getData+0xfc>
for(uint8_t a = 0; a < 5; a++) {
 80010ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80010b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d9b5      	bls.n	800102c <DHT_getData+0xf4>
          }
 }
/* Проверка целостности данных */
if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80010c0:	7b3a      	ldrb	r2, [r7, #12]
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
 80010c4:	4413      	add	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	4413      	add	r3, r2
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	4413      	add	r3, r2
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	7c3b      	ldrb	r3, [r7, #16]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d147      	bne.n	800116a <DHT_getData+0x232>
    //Если контрольная сумма совпадает, то конвертация и возврат полученных значений
    if (t == DHT22) {
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d133      	bne.n	8001148 <DHT_getData+0x210>
         data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	7b7a      	ldrb	r2, [r7, #13]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800118c <DHT_getData+0x254>
 80010f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f8:	edc7 7a05 	vstr	s15, [r7, #20]
         //Проверка на отрицательность температуры
         if(!(rawData[2] & (1<<7))) {
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0e      	blt.n	8001122 <DHT_getData+0x1ea>
               data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	4313      	orrs	r3, r2
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001114:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800118c <DHT_getData+0x254>
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	edc7 7a06 	vstr	s15, [r7, #24]
 8001120:	e012      	b.n	8001148 <DHT_getData+0x210>
          } else {
                 rawData[2] &= ~(1<<7);
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001128:	b2db      	uxtb	r3, r3
 800112a:	73bb      	strb	r3, [r7, #14]
                data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	4313      	orrs	r3, r2
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001190 <DHT_getData+0x258>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	edc7 7a06 	vstr	s15, [r7, #24]
              }
   }
if (t == DHT11) {
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10d      	bne.n	800116a <DHT_getData+0x232>
    data.hum = (float)rawData[0];
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001158:	edc7 7a05 	vstr	s15, [r7, #20]
    data.temp = (float)rawData[2];;
 800115c:	7bbb      	ldrb	r3, [r7, #14]
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001166:	edc7 7a06 	vstr	s15, [r7, #24]
  }
}

return data;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	461a      	mov	r2, r3
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001176:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40020800 	.word	0x40020800
 8001188:	08008b98 	.word	0x08008b98
 800118c:	3dcccccd 	.word	0x3dcccccd
 8001190:	bdcccccd 	.word	0xbdcccccd

08001194 <WriteByteI2CLCD>:
uint8_t portlcd = 0;


//--------------------------запись байта--------------------------//
void WriteByteI2CLCD(uint8_t bt)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af02      	add	r7, sp, #8
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  buf[0]=bt;
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <WriteByteI2CLCD+0x2c>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	7013      	strb	r3, [r2, #0]
  HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) Adress, buf,1,1000);
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <WriteByteI2CLCD+0x2c>)
 80011ae:	214e      	movs	r1, #78	; 0x4e
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <WriteByteI2CLCD+0x30>)
 80011b2:	f001 fa41 	bl	8002638 <HAL_I2C_Master_Transmit>
(uint16_t) 0x4E – адрес устройства, в данном случае – запись
Buf – наши данные
1 – количество байт, которые передаем
1000 – время, за которое должно выполнится передача данных, если не выполниться –выйдем из цикла с выдачей ошибки, которую можно будет обработать.
*/
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200001f8 	.word	0x200001f8
 80011c4:	200001fc 	.word	0x200001fc

080011c8 <DelayMicro>:


//--------------------------стандартная функция задержки--------------------------//
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{// 72000000/1000000=72    72/72=1 микросекунда
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  micros *= (SystemCoreClock / 1000000) / 72;
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <DelayMicro+0x38>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <DelayMicro+0x3c>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	0e9b      	lsrs	r3, r3, #26
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	607b      	str	r3, [r7, #4]
  while (micros--);
 80011e4:	bf00      	nop
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	1e5a      	subs	r2, r3, #1
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1fa      	bne.n	80011e6 <DelayMicro+0x1e>
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	ee9bfab5 	.word	0xee9bfab5

08001208 <sendhalfbyte>:
// так как у нас экран настроен на 4 битный режим, передаем байт по частям
void sendhalfbyte(uint8_t  c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
   c<<=4;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	71fb      	strb	r3, [r7, #7]
   e_set();
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <sendhalfbyte+0x64>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <sendhalfbyte+0x64>)
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <sendhalfbyte+0x64>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ffb2 	bl	8001194 <WriteByteI2CLCD>
   DelayMicro(200);
 8001230:	20c8      	movs	r0, #200	; 0xc8
 8001232:	f7ff ffc9 	bl	80011c8 <DelayMicro>
   WriteByteI2CLCD(portlcd|c);
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <sendhalfbyte+0x64>)
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4313      	orrs	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffa7 	bl	8001194 <WriteByteI2CLCD>
   e_reset();
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <sendhalfbyte+0x64>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	f023 0304 	bic.w	r3, r3, #4
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <sendhalfbyte+0x64>)
 8001252:	701a      	strb	r2, [r3, #0]
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <sendhalfbyte+0x64>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff9b 	bl	8001194 <WriteByteI2CLCD>
   DelayMicro(200);
 800125e:	20c8      	movs	r0, #200	; 0xc8
 8001260:	f7ff ffb2 	bl	80011c8 <DelayMicro>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200001f9 	.word	0x200001f9

08001270 <sendbyte>:
void sendbyte(uint8_t  c, uint8_t  mode)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
uint8_t hc=0;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
if (mode==0) rs_reset(); else rs_set();//установка на передачу команды или на передачу слова
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10c      	bne.n	80012a4 <sendbyte+0x34>
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <sendbyte+0x6c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <sendbyte+0x6c>)
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <sendbyte+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff79 	bl	8001194 <WriteByteI2CLCD>
 80012a2:	e00b      	b.n	80012bc <sendbyte+0x4c>
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <sendbyte+0x6c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <sendbyte+0x6c>)
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <sendbyte+0x6c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff6c 	bl	8001194 <WriteByteI2CLCD>
hc=c>>4;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	73fb      	strb	r3, [r7, #15]
sendhalfbyte(hc); sendhalfbyte(c);
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff9f 	bl	8001208 <sendhalfbyte>
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff9b 	bl	8001208 <sendhalfbyte>
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200001f9 	.word	0x200001f9

080012e0 <LCD_Clear>:


//--------------------------очистка экрана--------------------------//
void LCD_Clear(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
sendbyte(0x01, 0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff ffc2 	bl	8001270 <sendbyte>
DelayMicro(6000);
 80012ec:	f241 7070 	movw	r0, #6000	; 0x1770
 80012f0:	f7ff ff6a 	bl	80011c8 <DelayMicro>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <LCD_SetPos>:
}


//---установка символа в нужную позицию, начальные адреса взяты с документации---///
void LCD_SetPos(uint8_t x, uint8_t y)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
switch(y)
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d846      	bhi.n	800139c <LCD_SetPos+0xa4>
 800130e:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <LCD_SetPos+0x1c>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001325 	.word	0x08001325
 8001318:	0800133d 	.word	0x0800133d
 800131c:	0800135d 	.word	0x0800135d
 8001320:	0800137d 	.word	0x0800137d
    {
     case 0: sendbyte(x|0x80,0);//первая строка
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff9e 	bl	8001270 <sendbyte>
        HAL_Delay(1);break;
 8001334:	2001      	movs	r0, #1
 8001336:	f000 fcaf 	bl	8001c98 <HAL_Delay>
 800133a:	e02f      	b.n	800139c <LCD_SetPos+0xa4>
     case 1:sendbyte((0x40+x)|0x80,0);//вторая строка
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	3340      	adds	r3, #64	; 0x40
 8001340:	b2db      	uxtb	r3, r3
 8001342:	b25b      	sxtb	r3, r3
 8001344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001348:	b25b      	sxtb	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff8e 	bl	8001270 <sendbyte>
            HAL_Delay(1);break;
 8001354:	2001      	movs	r0, #1
 8001356:	f000 fc9f 	bl	8001c98 <HAL_Delay>
 800135a:	e01f      	b.n	800139c <LCD_SetPos+0xa4>
     case 2:sendbyte((0x10+x)|0x80,0);//третья строка
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	3310      	adds	r3, #16
 8001360:	b2db      	uxtb	r3, r3
 8001362:	b25b      	sxtb	r3, r3
 8001364:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff7e 	bl	8001270 <sendbyte>
            HAL_Delay(1);break;
 8001374:	2001      	movs	r0, #1
 8001376:	f000 fc8f 	bl	8001c98 <HAL_Delay>
 800137a:	e00f      	b.n	800139c <LCD_SetPos+0xa4>
     case 3:sendbyte((0x50+x)|0x80,0);//четвертая строка
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	3350      	adds	r3, #80	; 0x50
 8001380:	b2db      	uxtb	r3, r3
 8001382:	b25b      	sxtb	r3, r3
 8001384:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001388:	b25b      	sxtb	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff6e 	bl	8001270 <sendbyte>
            HAL_Delay(1);break;
 8001394:	2001      	movs	r0, #1
 8001396:	f000 fc7f 	bl	8001c98 <HAL_Delay>
 800139a:	bf00      	nop
     }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <LCD_init>:


//------инициализация дисплея согласно документации на выбранный дисплей------//
void LCD_init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  HAL_Delay(15);
 80013a8:	200f      	movs	r0, #15
 80013aa:	f000 fc75 	bl	8001c98 <HAL_Delay>
  sendhalfbyte(0x03);
 80013ae:	2003      	movs	r0, #3
 80013b0:	f7ff ff2a 	bl	8001208 <sendhalfbyte>
  HAL_Delay(4);
 80013b4:	2004      	movs	r0, #4
 80013b6:	f000 fc6f 	bl	8001c98 <HAL_Delay>
  sendhalfbyte(0x03);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f7ff ff24 	bl	8001208 <sendhalfbyte>
  DelayMicro(100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f7ff ff01 	bl	80011c8 <DelayMicro>
  sendhalfbyte(0x03);
 80013c6:	2003      	movs	r0, #3
 80013c8:	f7ff ff1e 	bl	8001208 <sendhalfbyte>
  HAL_Delay(1);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f000 fc63 	bl	8001c98 <HAL_Delay>
  sendhalfbyte(0x02);
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff ff18 	bl	8001208 <sendhalfbyte>
  HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 fc5d 	bl	8001c98 <HAL_Delay>
  sendbyte(0x28, 0);
 80013de:	2100      	movs	r1, #0
 80013e0:	2028      	movs	r0, #40	; 0x28
 80013e2:	f7ff ff45 	bl	8001270 <sendbyte>
  HAL_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fc56 	bl	8001c98 <HAL_Delay>
 sendbyte(0x01, 0);
 80013ec:	2100      	movs	r1, #0
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff ff3e 	bl	8001270 <sendbyte>
  HAL_Delay(1);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f000 fc4f 	bl	8001c98 <HAL_Delay>
 sendbyte(0x06, 0);
 80013fa:	2100      	movs	r1, #0
 80013fc:	2006      	movs	r0, #6
 80013fe:	f7ff ff37 	bl	8001270 <sendbyte>
  HAL_Delay(2);
 8001402:	2002      	movs	r0, #2
 8001404:	f000 fc48 	bl	8001c98 <HAL_Delay>
  sendbyte(0x02, 0);
 8001408:	2100      	movs	r1, #0
 800140a:	2002      	movs	r0, #2
 800140c:	f7ff ff30 	bl	8001270 <sendbyte>
  HAL_Delay(1);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 fc41 	bl	8001c98 <HAL_Delay>
 sendbyte(0x0C, 0);
 8001416:	2100      	movs	r1, #0
 8001418:	200c      	movs	r0, #12
 800141a:	f7ff ff29 	bl	8001270 <sendbyte>
  setled();
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <LCD_init+0xb0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <LCD_init+0xb0>)
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <LCD_init+0xb0>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff feaf 	bl	8001194 <WriteByteI2CLCD>
  setwrite();
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <LCD_init+0xb0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f023 0302 	bic.w	r3, r3, #2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <LCD_init+0xb0>)
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <LCD_init+0xb0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fea3 	bl	8001194 <WriteByteI2CLCD>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001f9 	.word	0x200001f9

08001458 <LCD_String>:


//--------------------------отправка строки--------------------------//
void LCD_String(char* st)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint8_t  i=0;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]
  while(st[i]!=0) {sendbyte(st[i],1);i++;}
 8001464:	e00a      	b.n	800147c <LCD_String+0x24>
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fefd 	bl	8001270 <sendbyte>
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	3301      	adds	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ee      	bne.n	8001466 <LCD_String+0xe>
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149a:	f000 fb8b 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f847 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 f909 	bl	80016b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a6:	f000 f8af 	bl	8001608 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014aa:	f000 f8db 	bl	8001664 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
  LCD_init(); // инициализация экрана
 80014ae:	f7ff ff79 	bl	80013a4 <LCD_init>
  LCD_Clear(); // очистка экрана
 80014b2:	f7ff ff15 	bl	80012e0 <LCD_Clear>
  HAL_Delay(300);
 80014b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014ba:	f000 fbed 	bl	8001c98 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  DHT_data d = DHT_getData(DHT11);
 80014be:	463b      	mov	r3, r7
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fd38 	bl	8000f38 <DHT_getData>
	  HAL_Delay(2000);
 80014c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014cc:	f000 fbe4 	bl	8001c98 <HAL_Delay>
	  LCD_SetPos(0,0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff ff10 	bl	80012f8 <LCD_SetPos>
	  sprintf(str1, "Tem: %.2f", d.temp);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f83c 	bl	8000558 <__aeabi_f2d>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <main+0x8c>)
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <main+0x90>)
 80014e8:	f005 f8d2 	bl	8006690 <siprintf>
	  sprintf(str2, "Hum: %.2f", d.hum);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f832 	bl	8000558 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	490b      	ldr	r1, [pc, #44]	; (8001528 <main+0x94>)
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <main+0x98>)
 80014fc:	f005 f8c8 	bl	8006690 <siprintf>
      Data1();
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <main+0x90>)
 8001502:	f7ff ffa9 	bl	8001458 <LCD_String>
	  LCD_SetPos(0,1);
 8001506:	2101      	movs	r1, #1
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff fef5 	bl	80012f8 <LCD_SetPos>
      Data2();
 800150e:	4807      	ldr	r0, [pc, #28]	; (800152c <main+0x98>)
 8001510:	f7ff ffa2 	bl	8001458 <LCD_String>
	  HAL_Delay(2000);
 8001514:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001518:	f000 fbbe 	bl	8001c98 <HAL_Delay>
  {
 800151c:	e7cf      	b.n	80014be <main+0x2a>
 800151e:	bf00      	nop
 8001520:	08008ba0 	.word	0x08008ba0
 8001524:	20000294 	.word	0x20000294
 8001528:	08008bac 	.word	0x08008bac
 800152c:	200002a0 	.word	0x200002a0

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	2230      	movs	r2, #48	; 0x30
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fc32 	bl	8005da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <SystemClock_Config+0xd0>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <SystemClock_Config+0xd0>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <SystemClock_Config+0xd0>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <SystemClock_Config+0xd4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800157c:	4a21      	ldr	r2, [pc, #132]	; (8001604 <SystemClock_Config+0xd4>)
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <SystemClock_Config+0xd4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159c:	2302      	movs	r3, #2
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015a4:	2310      	movs	r3, #16
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015ae:	2304      	movs	r3, #4
 80015b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b2:	2307      	movs	r3, #7
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 f81e 	bl	80045fc <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015c6:	f000 f8d5 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2302      	movs	r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	2102      	movs	r1, #2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fa80 	bl	8004aec <HAL_RCC_ClockConfig>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015f2:	f000 f8bf 	bl	8001774 <Error_Handler>
  }
}
 80015f6:	bf00      	nop
 80015f8:	3750      	adds	r7, #80	; 0x50
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40007000 	.word	0x40007000

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_I2C1_Init+0x50>)
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <MX_I2C1_Init+0x54>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_I2C1_Init+0x50>)
 8001614:	4a12      	ldr	r2, [pc, #72]	; (8001660 <MX_I2C1_Init+0x58>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_I2C1_Init+0x50>)
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_I2C1_Init+0x50>)
 8001646:	f000 feb3 	bl	80023b0 <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001650:	f000 f890 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200001fc 	.word	0x200001fc
 800165c:	40005400 	.word	0x40005400
 8001660:	000186a0 	.word	0x000186a0

08001664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <MX_USART1_UART_Init+0x50>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART1_UART_Init+0x4c>)
 800169c:	f003 fc46 	bl	8004f2c <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016a6:	f000 f865 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000250 	.word	0x20000250
 80016b4:	40011000 	.word	0x40011000

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_GPIO_Init+0xb4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a25      	ldr	r2, [pc, #148]	; (800176c <MX_GPIO_Init+0xb4>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_GPIO_Init+0xb4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_GPIO_Init+0xb4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <MX_GPIO_Init+0xb4>)
 80016f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_GPIO_Init+0xb4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_GPIO_Init+0xb4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <MX_GPIO_Init+0xb4>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_GPIO_Init+0xb4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_GPIO_Init+0xb4>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <MX_GPIO_Init+0xb4>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_GPIO_Init+0xb4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2108      	movs	r1, #8
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <MX_GPIO_Init+0xb8>)
 8001744:	f000 fe1a 	bl	800237c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001748:	2308      	movs	r3, #8
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <MX_GPIO_Init+0xb8>)
 8001760:	f000 fc70 	bl	8002044 <HAL_GPIO_Init>

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40020800 	.word	0x40020800

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	e7fe      	b.n	800177c <Error_Handler+0x8>
	...

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_MspInit+0x4c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017be:	2007      	movs	r0, #7
 80017c0:	f000 fb5e 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	; 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a21      	ldr	r2, [pc, #132]	; (8001874 <HAL_I2C_MspInit+0xa4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d13b      	bne.n	800186a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a1f      	ldr	r2, [pc, #124]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23c0      	movs	r3, #192	; 0xc0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800181e:	2304      	movs	r3, #4
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4814      	ldr	r0, [pc, #80]	; (800187c <HAL_I2C_MspInit+0xac>)
 800182a:	f000 fc0b 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_I2C_MspInit+0xa8>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	201f      	movs	r0, #31
 8001850:	f000 fb21 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001854:	201f      	movs	r0, #31
 8001856:	f000 fb3a 	bl	8001ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2020      	movs	r0, #32
 8001860:	f000 fb19 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001864:	2020      	movs	r0, #32
 8001866:	f000 fb32 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	; 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40005400 	.word	0x40005400
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_UART_MspInit+0x94>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d134      	bne.n	800190c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018ac:	f043 0310 	orr.w	r3, r3, #16
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a14      	ldr	r2, [pc, #80]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_UART_MspInit+0x98>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ec:	2307      	movs	r3, #7
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_UART_MspInit+0x9c>)
 80018f8:	f000 fba4 	bl	8002044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2100      	movs	r1, #0
 8001900:	2025      	movs	r0, #37	; 0x25
 8001902:	f000 fac8 	bl	8001e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001906:	2025      	movs	r0, #37	; 0x25
 8001908:	f000 fae1 	bl	8001ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40011000 	.word	0x40011000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f974 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <I2C1_EV_IRQHandler+0x10>)
 800197a:	f000 ff5b 	bl	8002834 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200001fc 	.word	0x200001fc

08001988 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <I2C1_ER_IRQHandler+0x10>)
 800198e:	f001 f8c2 	bl	8002b16 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001fc 	.word	0x200001fc

0800199c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <USART1_IRQHandler+0x10>)
 80019a2:	f003 fb11 	bl	8004fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000250 	.word	0x20000250

080019b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
	return 1;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_kill>:

int _kill(int pid, int sig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ca:	f004 f9c3 	bl	8005d54 <__errno>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2216      	movs	r2, #22
 80019d2:	601a      	str	r2, [r3, #0]
	return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_exit>:

void _exit (int status)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ffe7 	bl	80019c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019f2:	e7fe      	b.n	80019f2 <_exit+0x12>

080019f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e00a      	b.n	8001a1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a06:	f3af 8000 	nop.w
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	b2ca      	uxtb	r2, r1
 8001a14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf0      	blt.n	8001a06 <_read+0x12>
	}

return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e009      	b.n	8001a54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf1      	blt.n	8001a40 <_write+0x12>
	}
	return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_close>:

int _close(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a8e:	605a      	str	r2, [r3, #4]
	return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_isatty>:

int _isatty(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
	return 1;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f004 f928 	bl	8005d54 <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20018000 	.word	0x20018000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	200002ac 	.word	0x200002ac
 8001b38:	200002c8 	.word	0x200002c8

08001b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b7c:	4c0b      	ldr	r4, [pc, #44]	; (8001bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b8a:	f7ff ffd7 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f004 f8e7 	bl	8005d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b92:	f7ff fc7f 	bl	8001494 <main>
  bx  lr    
 8001b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ba4:	08008fbc 	.word	0x08008fbc
  ldr r2, =_sbss
 8001ba8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bac:	200002c4 	.word	0x200002c4

08001bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <HAL_Init+0x40>)
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <HAL_Init+0x40>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_Init+0x40>)
 8001bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 f94f 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fdca 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f967 	bl	8001eea <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 f92f 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x20>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x24>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_IncTick+0x24>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	200002b0 	.word	0x200002b0

08001c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return uwTick;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_GetTick+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	200002b0 	.word	0x200002b0

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff ffee 	bl	8001c80 <HAL_GetTick>
 8001ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cbe:	bf00      	nop
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f10:	f7ff feb6 	bl	8001c80 <HAL_GetTick>
 8001f14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d008      	beq.n	8001f34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e052      	b.n	8001fda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0216 	bic.w	r2, r2, #22
 8001f42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d103      	bne.n	8001f64 <HAL_DMA_Abort+0x62>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0208 	bic.w	r2, r2, #8
 8001f72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f84:	e013      	b.n	8001fae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f86:	f7ff fe7b 	bl	8001c80 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d90c      	bls.n	8001fae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e015      	b.n	8001fda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e4      	bne.n	8001f86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d004      	beq.n	8002000 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00c      	b.n	800201a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2205      	movs	r2, #5
 8002004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002034:	b2db      	uxtb	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e159      	b.n	8002314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8148 	bne.w	800230e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a2 	beq.w	800230e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b57      	ldr	r3, [pc, #348]	; (800232c <HAL_GPIO_Init+0x2e8>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	4a56      	ldr	r2, [pc, #344]	; (800232c <HAL_GPIO_Init+0x2e8>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	; 0x44
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <HAL_GPIO_Init+0x2e8>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a49      	ldr	r2, [pc, #292]	; (8002334 <HAL_GPIO_Init+0x2f0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x202>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_GPIO_Init+0x2f4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x1fe>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a47      	ldr	r2, [pc, #284]	; (800233c <HAL_GPIO_Init+0x2f8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x1fa>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a46      	ldr	r2, [pc, #280]	; (8002340 <HAL_GPIO_Init+0x2fc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x1f6>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a45      	ldr	r2, [pc, #276]	; (8002344 <HAL_GPIO_Init+0x300>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x1f2>
 8002232:	2304      	movs	r3, #4
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002236:	2307      	movs	r3, #7
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x204>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x204>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002246:	2300      	movs	r3, #0
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	; (8002330 <HAL_GPIO_Init+0x2ec>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_GPIO_Init+0x304>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a2f      	ldr	r2, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x304>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_GPIO_Init+0x304>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a24      	ldr	r2, [pc, #144]	; (8002348 <HAL_GPIO_Init+0x304>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ba:	4b23      	ldr	r3, [pc, #140]	; (8002348 <HAL_GPIO_Init+0x304>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_GPIO_Init+0x304>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <HAL_GPIO_Init+0x304>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_GPIO_Init+0x304>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	f67f aea2 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	e001      	b.n	800236e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
 8002388:	4613      	mov	r3, r2
 800238a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002398:	e003      	b.n	80023a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	041a      	lsls	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	619a      	str	r2, [r3, #24]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e12b      	b.n	800261a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff f9fa 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002412:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002414:	f002 fd62 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 8002418:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4a81      	ldr	r2, [pc, #516]	; (8002624 <HAL_I2C_Init+0x274>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d807      	bhi.n	8002434 <HAL_I2C_Init+0x84>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4a80      	ldr	r2, [pc, #512]	; (8002628 <HAL_I2C_Init+0x278>)
 8002428:	4293      	cmp	r3, r2
 800242a:	bf94      	ite	ls
 800242c:	2301      	movls	r3, #1
 800242e:	2300      	movhi	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e006      	b.n	8002442 <HAL_I2C_Init+0x92>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a7d      	ldr	r2, [pc, #500]	; (800262c <HAL_I2C_Init+0x27c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0e7      	b.n	800261a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a78      	ldr	r2, [pc, #480]	; (8002630 <HAL_I2C_Init+0x280>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0c9b      	lsrs	r3, r3, #18
 8002454:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	430a      	orrs	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_I2C_Init+0x274>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d802      	bhi.n	8002484 <HAL_I2C_Init+0xd4>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	e009      	b.n	8002498 <HAL_I2C_Init+0xe8>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800248a:	fb02 f303 	mul.w	r3, r2, r3
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <HAL_I2C_Init+0x284>)
 8002490:	fba2 2303 	umull	r2, r3, r2, r3
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	3301      	adds	r3, #1
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	495c      	ldr	r1, [pc, #368]	; (8002624 <HAL_I2C_Init+0x274>)
 80024b4:	428b      	cmp	r3, r1
 80024b6:	d819      	bhi.n	80024ec <HAL_I2C_Init+0x13c>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e59      	subs	r1, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c6:	1c59      	adds	r1, r3, #1
 80024c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024cc:	400b      	ands	r3, r1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_I2C_Init+0x138>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1e59      	subs	r1, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e6:	e051      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e04f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d111      	bne.n	8002518 <HAL_I2C_Init+0x168>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	440b      	add	r3, r1
 8002502:	fbb0 f3f3 	udiv	r3, r0, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e012      	b.n	800253e <HAL_I2C_Init+0x18e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	2b00      	cmp	r3, #0
 8002536:	bf0c      	ite	eq
 8002538:	2301      	moveq	r3, #1
 800253a:	2300      	movne	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Init+0x196>
 8002542:	2301      	movs	r3, #1
 8002544:	e022      	b.n	800258c <HAL_I2C_Init+0x1dc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10e      	bne.n	800256c <HAL_I2C_Init+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1e58      	subs	r0, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	440b      	add	r3, r1
 800255c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002560:	3301      	adds	r3, #1
 8002562:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	e00f      	b.n	800258c <HAL_I2C_Init+0x1dc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	6809      	ldr	r1, [r1, #0]
 8002590:	4313      	orrs	r3, r2
 8002592:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6911      	ldr	r1, [r2, #16]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68d2      	ldr	r2, [r2, #12]
 80025c6:	4311      	orrs	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	000186a0 	.word	0x000186a0
 8002628:	001e847f 	.word	0x001e847f
 800262c:	003d08ff 	.word	0x003d08ff
 8002630:	431bde83 	.word	0x431bde83
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	461a      	mov	r2, r3
 8002644:	460b      	mov	r3, r1
 8002646:	817b      	strh	r3, [r7, #10]
 8002648:	4613      	mov	r3, r2
 800264a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff fb18 	bl	8001c80 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 80e0 	bne.w	8002820 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	2319      	movs	r3, #25
 8002666:	2201      	movs	r2, #1
 8002668:	4970      	ldr	r1, [pc, #448]	; (800282c <HAL_I2C_Master_Transmit+0x1f4>)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f001 fdf2 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	e0d3      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2C_Master_Transmit+0x50>
 8002684:	2302      	movs	r3, #2
 8002686:	e0cc      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d007      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2210      	movs	r2, #16
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	893a      	ldrh	r2, [r7, #8]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a50      	ldr	r2, [pc, #320]	; (8002830 <HAL_I2C_Master_Transmit+0x1f8>)
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026f0:	8979      	ldrh	r1, [r7, #10]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6a3a      	ldr	r2, [r7, #32]
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f001 fc82 	bl	8004000 <I2C_MasterRequestWrite>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e08d      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800271c:	e066      	b.n	80027ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f001 fe6c 	bl	8004400 <I2C_WaitOnTXEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b04      	cmp	r3, #4
 8002734:	d107      	bne.n	8002746 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06b      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x188>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	6a39      	ldr	r1, [r7, #32]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f001 fe5c 	bl	8004482 <I2C_WaitOnBTFFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00d      	beq.n	80027ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01a      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d194      	bne.n	800271e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	00100002 	.word	0x00100002
 8002830:	ffff0000 	.word	0xffff0000

08002834 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002854:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b10      	cmp	r3, #16
 8002862:	d003      	beq.n	800286c <HAL_I2C_EV_IRQHandler+0x38>
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b40      	cmp	r3, #64	; 0x40
 8002868:	f040 80c1 	bne.w	80029ee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10d      	bne.n	80028a2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800288c:	d003      	beq.n	8002896 <HAL_I2C_EV_IRQHandler+0x62>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002894:	d101      	bne.n	800289a <HAL_I2C_EV_IRQHandler+0x66>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_I2C_EV_IRQHandler+0x68>
 800289a:	2300      	movs	r3, #0
 800289c:	2b01      	cmp	r3, #1
 800289e:	f000 8132 	beq.w	8002b06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <HAL_I2C_EV_IRQHandler+0x92>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	0a5b      	lsrs	r3, r3, #9
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f001 fe84 	bl	80045c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fd83 	bl	80033ca <I2C_Master_SB>
 80028c4:	e092      	b.n	80029ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08db      	lsrs	r3, r3, #3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_I2C_EV_IRQHandler+0xb2>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	0a5b      	lsrs	r3, r3, #9
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fdf9 	bl	80034d6 <I2C_Master_ADD10>
 80028e4:	e082      	b.n	80029ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_I2C_EV_IRQHandler+0xd2>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	0a5b      	lsrs	r3, r3, #9
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fe13 	bl	800352a <I2C_Master_ADDR>
 8002904:	e072      	b.n	80029ec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d03b      	beq.n	800298a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002920:	f000 80f3 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	09db      	lsrs	r3, r3, #7
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00f      	beq.n	8002950 <HAL_I2C_EV_IRQHandler+0x11c>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_I2C_EV_IRQHandler+0x11c>
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f9f3 	bl	8002d34 <I2C_MasterTransmit_TXE>
 800294e:	e04d      	b.n	80029ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	089b      	lsrs	r3, r3, #2
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80d6 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	0a5b      	lsrs	r3, r3, #9
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80cf 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800296c:	7bbb      	ldrb	r3, [r7, #14]
 800296e:	2b21      	cmp	r3, #33	; 0x21
 8002970:	d103      	bne.n	800297a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa7a 	bl	8002e6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002978:	e0c7      	b.n	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	f040 80c4 	bne.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fae8 	bl	8002f58 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002988:	e0bf      	b.n	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002998:	f000 80b7 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	099b      	lsrs	r3, r3, #6
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00f      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0x194>
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <HAL_I2C_EV_IRQHandler+0x194>
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fb5d 	bl	8003080 <I2C_MasterReceive_RXNE>
 80029c6:	e011      	b.n	80029ec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 809a 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	0a5b      	lsrs	r3, r3, #9
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8093 	beq.w	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fc06 	bl	80031f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ea:	e08e      	b.n	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
 80029ec:	e08d      	b.n	8002b0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e007      	b.n	8002a10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_I2C_EV_IRQHandler+0x20e>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	0a5b      	lsrs	r3, r3, #9
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00c      	beq.n	8002a42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a38:	69b9      	ldr	r1, [r7, #24]
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 ffc4 	bl	80039c8 <I2C_Slave_ADDR>
 8002a40:	e066      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_I2C_EV_IRQHandler+0x22e>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	0a5b      	lsrs	r3, r3, #9
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fffe 	bl	8003a5c <I2C_Slave_STOPF>
 8002a60:	e056      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a62:	7bbb      	ldrb	r3, [r7, #14]
 8002a64:	2b21      	cmp	r3, #33	; 0x21
 8002a66:	d002      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x23a>
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	2b29      	cmp	r3, #41	; 0x29
 8002a6c:	d125      	bne.n	8002aba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	09db      	lsrs	r3, r3, #7
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00f      	beq.n	8002a9a <HAL_I2C_EV_IRQHandler+0x266>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	0a9b      	lsrs	r3, r3, #10
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_I2C_EV_IRQHandler+0x266>
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 feda 	bl	800384c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a98:	e039      	b.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d033      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2da>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	0a5b      	lsrs	r3, r3, #9
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02d      	beq.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 ff07 	bl	80038c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ab8:	e029      	b.n	8002b0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	099b      	lsrs	r3, r3, #6
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00f      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	0a9b      	lsrs	r3, r3, #10
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d009      	beq.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d103      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 ff12 	bl	8003908 <I2C_SlaveReceive_RXNE>
 8002ae4:	e014      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	0a5b      	lsrs	r3, r3, #9
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 ff40 	bl	8003984 <I2C_SlaveReceive_BTF>
 8002b04:	e004      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b06:	bf00      	nop
 8002b08:	e002      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08a      	sub	sp, #40	; 0x28
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00e      	beq.n	8002b64 <HAL_I2C_ER_IRQHandler+0x4e>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	0a5b      	lsrs	r3, r3, #9
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <HAL_I2C_ER_IRQHandler+0x78>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	0a1b      	lsrs	r3, r3, #8
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	f043 0302 	orr.w	r3, r3, #2
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	0a9b      	lsrs	r3, r3, #10
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d03f      	beq.n	8002c1a <HAL_I2C_ER_IRQHandler+0x104>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d039      	beq.n	8002c1a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002ba6:	7efb      	ldrb	r3, [r7, #27]
 8002ba8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002bc0:	7ebb      	ldrb	r3, [r7, #26]
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d112      	bne.n	8002bec <HAL_I2C_ER_IRQHandler+0xd6>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <HAL_I2C_ER_IRQHandler+0xd6>
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b21      	cmp	r3, #33	; 0x21
 8002bd0:	d008      	beq.n	8002be4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	2b29      	cmp	r3, #41	; 0x29
 8002bd6:	d005      	beq.n	8002be4 <HAL_I2C_ER_IRQHandler+0xce>
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b28      	cmp	r3, #40	; 0x28
 8002bdc:	d106      	bne.n	8002bec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b21      	cmp	r3, #33	; 0x21
 8002be2:	d103      	bne.n	8002bec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f001 f869 	bl	8003cbc <I2C_Slave_AF>
 8002bea:	e016      	b.n	8002c1a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bf4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bfe:	7efb      	ldrb	r3, [r7, #27]
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d002      	beq.n	8002c0a <HAL_I2C_ER_IRQHandler+0xf4>
 8002c04:	7efb      	ldrb	r3, [r7, #27]
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d107      	bne.n	8002c1a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c18:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	0adb      	lsrs	r3, r3, #11
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <HAL_I2C_ER_IRQHandler+0x12e>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002c42:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f001 f8a0 	bl	8003d9c <I2C_ITError>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d150      	bne.n	8002dfc <I2C_MasterTransmit_TXE+0xc8>
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b21      	cmp	r3, #33	; 0x21
 8002d5e:	d14d      	bne.n	8002dfc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b08      	cmp	r3, #8
 8002d64:	d01d      	beq.n	8002da2 <I2C_MasterTransmit_TXE+0x6e>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d01a      	beq.n	8002da2 <I2C_MasterTransmit_TXE+0x6e>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d72:	d016      	beq.n	8002da2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d82:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2211      	movs	r2, #17
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff62 	bl	8002c64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da0:	e060      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b40      	cmp	r3, #64	; 0x40
 8002dda:	d107      	bne.n	8002dec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff7d 	bl	8002ce4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dea:	e03b      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff35 	bl	8002c64 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dfa:	e033      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b21      	cmp	r3, #33	; 0x21
 8002e00:	d005      	beq.n	8002e0e <I2C_MasterTransmit_TXE+0xda>
 8002e02:	7bbb      	ldrb	r3, [r7, #14]
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d12d      	bne.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b22      	cmp	r3, #34	; 0x22
 8002e0c:	d12a      	bne.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d108      	bne.n	8002e2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e28:	e01c      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b40      	cmp	r3, #64	; 0x40
 8002e34:	d103      	bne.n	8002e3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f88e 	bl	8002f58 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e3c:	e012      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e62:	e7ff      	b.n	8002e64 <I2C_MasterTransmit_TXE+0x130>
 8002e64:	bf00      	nop
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b21      	cmp	r3, #33	; 0x21
 8002e84:	d164      	bne.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002eb4:	e04c      	b.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d01d      	beq.n	8002ef8 <I2C_MasterTransmit_BTF+0x8c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d01a      	beq.n	8002ef8 <I2C_MasterTransmit_BTF+0x8c>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ec8:	d016      	beq.n	8002ef8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ed8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2211      	movs	r2, #17
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff feb7 	bl	8002c64 <HAL_I2C_MasterTxCpltCallback>
}
 8002ef6:	e02b      	b.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f06:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d107      	bne.n	8002f42 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fed2 	bl	8002ce4 <HAL_I2C_MemTxCpltCallback>
}
 8002f40:	e006      	b.n	8002f50 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fe8a 	bl	8002c64 <HAL_I2C_MasterTxCpltCallback>
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f66:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11d      	bne.n	8002fac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10b      	bne.n	8002f90 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f8e:	e073      	b.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	121b      	asrs	r3, r3, #8
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002faa:	e065      	b.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10b      	bne.n	8002fcc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fca:	e055      	b.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d151      	bne.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b22      	cmp	r3, #34	; 0x22
 8002fd8:	d10d      	bne.n	8002ff6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ff4:	e040      	b.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d015      	beq.n	800302c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b21      	cmp	r3, #33	; 0x21
 8003004:	d112      	bne.n	800302c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800302a:	e025      	b.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d120      	bne.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b21      	cmp	r3, #33	; 0x21
 800303a:	d11d      	bne.n	8003078 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800304a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fe36 	bl	8002ce4 <HAL_I2C_MemTxCpltCallback>
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b22      	cmp	r3, #34	; 0x22
 8003092:	f040 80ac 	bne.w	80031ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d921      	bls.n	80030e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	f040 808c 	bne.w	80031ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80030e6:	e082      	b.n	80031ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d075      	beq.n	80031dc <I2C_MasterReceive_RXNE+0x15c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d002      	beq.n	80030fc <I2C_MasterReceive_RXNE+0x7c>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d16f      	bne.n	80031dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f001 fa01 	bl	8004504 <I2C_WaitOnSTOPRequestThroughIT>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d142      	bne.n	800318e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003116:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003126:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d10a      	bne.n	8003178 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fdc1 	bl	8002cf8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003176:	e03a      	b.n	80031ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2212      	movs	r2, #18
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fd76 	bl	8002c78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800318c:	e02f      	b.n	80031ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800319c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff fd99 	bl	8002d0c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80031da:	e008      	b.n	80031ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ea:	605a      	str	r2, [r3, #4]
}
 80031ec:	e7ff      	b.n	80031ee <I2C_MasterReceive_RXNE+0x16e>
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b04      	cmp	r3, #4
 800320c:	d11b      	bne.n	8003246 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003244:	e0bd      	b.n	80033c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b03      	cmp	r3, #3
 800324e:	d129      	bne.n	80032a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d00a      	beq.n	800327c <I2C_MasterReceive_BTF+0x86>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d007      	beq.n	800327c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80032a2:	e08e      	b.n	80033c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d176      	bne.n	800339c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d002      	beq.n	80032ba <I2C_MasterReceive_BTF+0xc4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d108      	bne.n	80032cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e019      	b.n	8003300 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d002      	beq.n	80032d8 <I2C_MasterReceive_BTF+0xe2>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d108      	bne.n	80032ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	e00a      	b.n	8003300 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d007      	beq.n	8003300 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800335a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d10a      	bne.n	8003386 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fcba 	bl	8002cf8 <HAL_I2C_MemRxCpltCallback>
}
 8003384:	e01d      	b.n	80033c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2212      	movs	r2, #18
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fc6f 	bl	8002c78 <HAL_I2C_MasterRxCpltCallback>
}
 800339a:	e012      	b.n	80033c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d117      	bne.n	800340e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033f8:	e067      	b.n	80034ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	b2da      	uxtb	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]
}
 800340c:	e05d      	b.n	80034ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003416:	d133      	bne.n	8003480 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b21      	cmp	r3, #33	; 0x21
 8003422:	d109      	bne.n	8003438 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	b2db      	uxtb	r3, r3
 800342a:	461a      	mov	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	e008      	b.n	800344a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	2b00      	cmp	r3, #0
 8003450:	d004      	beq.n	800345c <I2C_Master_SB+0x92>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d108      	bne.n	800346e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	2b00      	cmp	r3, #0
 8003462:	d032      	beq.n	80034ca <I2C_Master_SB+0x100>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02d      	beq.n	80034ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800347c:	605a      	str	r2, [r3, #4]
}
 800347e:	e024      	b.n	80034ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10e      	bne.n	80034a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348c:	b29b      	uxth	r3, r3
 800348e:	11db      	asrs	r3, r3, #7
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0306 	and.w	r3, r3, #6
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f063 030f 	orn	r3, r3, #15
 800349c:	b2da      	uxtb	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	611a      	str	r2, [r3, #16]
}
 80034a4:	e011      	b.n	80034ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10d      	bne.n	80034ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	11db      	asrs	r3, r3, #7
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 0306 	and.w	r3, r3, #6
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f063 030e 	orn	r3, r3, #14
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <I2C_Master_ADD10+0x26>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00c      	beq.n	800351e <I2C_Master_ADD10+0x48>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351c:	605a      	str	r2, [r3, #4]
  }
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800352a:	b480      	push	{r7}
 800352c:	b091      	sub	sp, #68	; 0x44
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003538:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b22      	cmp	r3, #34	; 0x22
 8003552:	f040 8169 	bne.w	8003828 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <I2C_Master_ADDR+0x54>
 800355e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d10b      	bne.n	800357e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003566:	2300      	movs	r3, #0
 8003568:	633b      	str	r3, [r7, #48]	; 0x30
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	e160      	b.n	8003840 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11d      	bne.n	80035c2 <I2C_Master_ADDR+0x98>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800358e:	d118      	bne.n	80035c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003590:	2300      	movs	r3, #0
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	651a      	str	r2, [r3, #80]	; 0x50
 80035c0:	e13e      	b.n	8003840 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d113      	bne.n	80035f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	e115      	b.n	8003820 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	f040 808a 	bne.w	8003714 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003606:	d137      	bne.n	8003678 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003626:	d113      	bne.n	8003650 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003636:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	e0e7      	b.n	8003820 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003650:	2300      	movs	r3, #0
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	e0d3      	b.n	8003820 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b08      	cmp	r3, #8
 800367c:	d02e      	beq.n	80036dc <I2C_Master_ADDR+0x1b2>
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	2b20      	cmp	r3, #32
 8003682:	d02b      	beq.n	80036dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003686:	2b12      	cmp	r3, #18
 8003688:	d102      	bne.n	8003690 <I2C_Master_ADDR+0x166>
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b01      	cmp	r3, #1
 800368e:	d125      	bne.n	80036dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	2b04      	cmp	r3, #4
 8003694:	d00e      	beq.n	80036b4 <I2C_Master_ADDR+0x18a>
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b02      	cmp	r3, #2
 800369a:	d00b      	beq.n	80036b4 <I2C_Master_ADDR+0x18a>
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d008      	beq.n	80036b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e007      	b.n	80036c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	e0a1      	b.n	8003820 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e085      	b.n	8003820 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d14d      	bne.n	80037ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	2b04      	cmp	r3, #4
 8003722:	d016      	beq.n	8003752 <I2C_Master_ADDR+0x228>
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	2b02      	cmp	r3, #2
 8003728:	d013      	beq.n	8003752 <I2C_Master_ADDR+0x228>
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	2b10      	cmp	r3, #16
 800372e:	d010      	beq.n	8003752 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	e007      	b.n	8003762 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003760:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003770:	d117      	bne.n	80037a2 <I2C_Master_ADDR+0x278>
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003778:	d00b      	beq.n	8003792 <I2C_Master_ADDR+0x268>
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	2b01      	cmp	r3, #1
 800377e:	d008      	beq.n	8003792 <I2C_Master_ADDR+0x268>
 8003780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003782:	2b08      	cmp	r3, #8
 8003784:	d005      	beq.n	8003792 <I2C_Master_ADDR+0x268>
 8003786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003788:	2b10      	cmp	r3, #16
 800378a:	d002      	beq.n	8003792 <I2C_Master_ADDR+0x268>
 800378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378e:	2b20      	cmp	r3, #32
 8003790:	d107      	bne.n	80037a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	e032      	b.n	8003820 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d8:	d117      	bne.n	800380a <I2C_Master_ADDR+0x2e0>
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e0:	d00b      	beq.n	80037fa <I2C_Master_ADDR+0x2d0>
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d008      	beq.n	80037fa <I2C_Master_ADDR+0x2d0>
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d005      	beq.n	80037fa <I2C_Master_ADDR+0x2d0>
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d002      	beq.n	80037fa <I2C_Master_ADDR+0x2d0>
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d107      	bne.n	800380a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003808:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003826:	e00b      	b.n	8003840 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
}
 800383e:	e7ff      	b.n	8003840 <I2C_Master_ADDR+0x316>
 8003840:	bf00      	nop
 8003842:	3744      	adds	r7, #68	; 0x44
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d02b      	beq.n	80038be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d114      	bne.n	80038be <I2C_SlaveTransmit_TXE+0x72>
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	2b29      	cmp	r3, #41	; 0x29
 8003898:	d111      	bne.n	80038be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2221      	movs	r2, #33	; 0x21
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2228      	movs	r2, #40	; 0x28
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff f9e7 	bl	8002c8c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d011      	beq.n	80038fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02c      	beq.n	800397c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d114      	bne.n	800397c <I2C_SlaveReceive_RXNE+0x74>
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b2a      	cmp	r3, #42	; 0x2a
 8003956:	d111      	bne.n	800397c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003966:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2222      	movs	r2, #34	; 0x22
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2228      	movs	r2, #40	; 0x28
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff f992 	bl	8002ca0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039e2:	2b28      	cmp	r3, #40	; 0x28
 80039e4:	d127      	bne.n	8003a36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	09db      	lsrs	r3, r3, #7
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d103      	bne.n	8003a1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	81bb      	strh	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a28:	89ba      	ldrh	r2, [r7, #12]
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff f940 	bl	8002cb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a34:	e00e      	b.n	8003a54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aa8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab8:	d172      	bne.n	8003ba0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b22      	cmp	r3, #34	; 0x22
 8003abe:	d002      	beq.n	8003ac6 <I2C_Slave_STOPF+0x6a>
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac4:	d135      	bne.n	8003b32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fa91 	bl	8002026 <HAL_DMA_GetState>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d049      	beq.n	8003b9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	4a69      	ldr	r2, [pc, #420]	; (8003cb4 <I2C_Slave_STOPF+0x258>)
 8003b10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fa63 	bl	8001fe2 <HAL_DMA_Abort_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d03d      	beq.n	8003b9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b30:	e035      	b.n	8003b9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f043 0204 	orr.w	r2, r3, #4
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fe fa5b 	bl	8002026 <HAL_DMA_GetState>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d014      	beq.n	8003ba0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	4a4e      	ldr	r2, [pc, #312]	; (8003cb4 <I2C_Slave_STOPF+0x258>)
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fa2d 	bl	8001fe2 <HAL_DMA_Abort_IT>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4798      	blx	r3
 8003b9c:	e000      	b.n	8003ba0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d03e      	beq.n	8003c28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d112      	bne.n	8003bde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d112      	bne.n	8003c12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f043 0204 	orr.w	r2, r3, #4
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8b3 	bl	8003d9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c36:	e039      	b.n	8003cac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c3c:	d109      	bne.n	8003c52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2228      	movs	r2, #40	; 0x28
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff f827 	bl	8002ca0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b28      	cmp	r3, #40	; 0x28
 8003c5c:	d111      	bne.n	8003c82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <I2C_Slave_STOPF+0x25c>)
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff f828 	bl	8002cd0 <HAL_I2C_ListenCpltCallback>
}
 8003c80:	e014      	b.n	8003cac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	2b22      	cmp	r3, #34	; 0x22
 8003c88:	d002      	beq.n	8003c90 <I2C_Slave_STOPF+0x234>
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b22      	cmp	r3, #34	; 0x22
 8003c8e:	d10d      	bne.n	8003cac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fe fffa 	bl	8002ca0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	08004105 	.word	0x08004105
 8003cb8:	ffff0000 	.word	0xffff0000

08003cbc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d002      	beq.n	8003cde <I2C_Slave_AF+0x22>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d129      	bne.n	8003d32 <I2C_Slave_AF+0x76>
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b28      	cmp	r3, #40	; 0x28
 8003ce2:	d126      	bne.n	8003d32 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a2c      	ldr	r2, [pc, #176]	; (8003d98 <I2C_Slave_AF+0xdc>)
 8003ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cf8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d02:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d12:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fe ffd0 	bl	8002cd0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d30:	e02e      	b.n	8003d90 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b21      	cmp	r3, #33	; 0x21
 8003d36:	d126      	bne.n	8003d86 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <I2C_Slave_AF+0xdc>)
 8003d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2221      	movs	r2, #33	; 0x21
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d62:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d6c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe ff84 	bl	8002c8c <HAL_I2C_SlaveTxCpltCallback>
}
 8003d84:	e004      	b.n	8003d90 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d8e:	615a      	str	r2, [r3, #20]
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	ffff0000 	.word	0xffff0000

08003d9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003db4:	7bbb      	ldrb	r3, [r7, #14]
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d002      	beq.n	8003dc0 <I2C_ITError+0x24>
 8003dba:	7bbb      	ldrb	r3, [r7, #14]
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d10a      	bne.n	8003dd6 <I2C_ITError+0x3a>
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b22      	cmp	r3, #34	; 0x22
 8003dc4:	d107      	bne.n	8003dd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ddc:	2b28      	cmp	r3, #40	; 0x28
 8003dde:	d107      	bne.n	8003df0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2228      	movs	r2, #40	; 0x28
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dee:	e015      	b.n	8003e1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfe:	d00a      	beq.n	8003e16 <I2C_ITError+0x7a>
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b60      	cmp	r3, #96	; 0x60
 8003e04:	d007      	beq.n	8003e16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2a:	d162      	bne.n	8003ef2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d020      	beq.n	8003e8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	4a6a      	ldr	r2, [pc, #424]	; (8003ff8 <I2C_ITError+0x25c>)
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe f8c3 	bl	8001fe2 <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8089 	beq.w	8003f76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e86:	4610      	mov	r0, r2
 8003e88:	4798      	blx	r3
 8003e8a:	e074      	b.n	8003f76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	4a59      	ldr	r2, [pc, #356]	; (8003ff8 <I2C_ITError+0x25c>)
 8003e92:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe f8a2 	bl	8001fe2 <HAL_DMA_Abort_IT>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d068      	beq.n	8003f76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d10b      	bne.n	8003eca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
 8003ef0:	e041      	b.n	8003f76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b60      	cmp	r3, #96	; 0x60
 8003efc:	d125      	bne.n	8003f4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d10b      	bne.n	8003f32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0201 	bic.w	r2, r2, #1
 8003f40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fe feec 	bl	8002d20 <HAL_I2C_AbortCpltCallback>
 8003f48:	e015      	b.n	8003f76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d10b      	bne.n	8003f70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fe fecb 	bl	8002d0c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d113      	bne.n	8003ff0 <I2C_ITError+0x254>
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b28      	cmp	r3, #40	; 0x28
 8003fcc:	d110      	bne.n	8003ff0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <I2C_ITError+0x260>)
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fe fe70 	bl	8002cd0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	08004105 	.word	0x08004105
 8003ffc:	ffff0000 	.word	0xffff0000

08004000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	460b      	mov	r3, r1
 800400e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b08      	cmp	r3, #8
 800401a:	d006      	beq.n	800402a <I2C_MasterRequestWrite+0x2a>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d003      	beq.n	800402a <I2C_MasterRequestWrite+0x2a>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004028:	d108      	bne.n	800403c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e00b      	b.n	8004054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b12      	cmp	r3, #18
 8004042:	d107      	bne.n	8004054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f8f7 	bl	8004254 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00d      	beq.n	8004088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800407a:	d103      	bne.n	8004084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e035      	b.n	80040f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004092:	897b      	ldrh	r3, [r7, #10]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	e01b      	b.n	80040dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a4:	897b      	ldrh	r3, [r7, #10]
 80040a6:	11db      	asrs	r3, r3, #7
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0306 	and.w	r3, r3, #6
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f063 030f 	orn	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	490e      	ldr	r1, [pc, #56]	; (80040fc <I2C_MasterRequestWrite+0xfc>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f91d 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e010      	b.n	80040f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4907      	ldr	r1, [pc, #28]	; (8004100 <I2C_MasterRequestWrite+0x100>)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f90d 	bl	8004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	00010008 	.word	0x00010008
 8004100:	00010002 	.word	0x00010002

08004104 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <I2C_DMAAbort+0x148>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	08db      	lsrs	r3, r3, #3
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <I2C_DMAAbort+0x14c>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0a1a      	lsrs	r2, r3, #8
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00da      	lsls	r2, r3, #3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800414a:	e00a      	b.n	8004162 <I2C_DMAAbort+0x5e>
    }
    count--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3b01      	subs	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004160:	d0ea      	beq.n	8004138 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	2200      	movs	r2, #0
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004190:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2200      	movs	r2, #0
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a4:	2200      	movs	r2, #0
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b4:	2200      	movs	r2, #0
 80041b6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b60      	cmp	r3, #96	; 0x60
 80041d2:	d10e      	bne.n	80041f2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80041ea:	6978      	ldr	r0, [r7, #20]
 80041ec:	f7fe fd98 	bl	8002d20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f0:	e027      	b.n	8004242 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041f8:	2b28      	cmp	r3, #40	; 0x28
 80041fa:	d117      	bne.n	800422c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2200      	movs	r2, #0
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2228      	movs	r2, #40	; 0x28
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800422a:	e007      	b.n	800423c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7fe fd65 	bl	8002d0c <HAL_I2C_ErrorCallback>
}
 8004242:	bf00      	nop
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000000 	.word	0x20000000
 8004250:	14f8b589 	.word	0x14f8b589

08004254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004264:	e025      	b.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d021      	beq.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426e:	f7fd fd07 	bl	8001c80 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d302      	bcc.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d116      	bne.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e023      	b.n	80042fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10d      	bne.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	e00c      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d0b6      	beq.n	8004266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004310:	e051      	b.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004320:	d123      	bne.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e046      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d021      	beq.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7fd fc85 	bl	8001c80 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e020      	b.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d10c      	bne.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bf14      	ite	ne
 80043d2:	2301      	movne	r3, #1
 80043d4:	2300      	moveq	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	e00b      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d18d      	bne.n	8004312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440c:	e02d      	b.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f8aa 	bl	8004568 <I2C_IsAcknowledgeFailed>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e02d      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d021      	beq.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fd fc2b 	bl	8001c80 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d116      	bne.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d1ca      	bne.n	800440e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448e:	e02d      	b.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f869 	bl	8004568 <I2C_IsAcknowledgeFailed>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e02d      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d021      	beq.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fd fbea 	bl	8001c80 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e007      	b.n	80044fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d1ca      	bne.n	8004490 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	0a1a      	lsrs	r2, r3, #8
 800451e:	4613      	mov	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b01      	subs	r3, #1
 800452a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d107      	bne.n	8004542 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e008      	b.n	8004554 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d0e9      	beq.n	8004526 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000000 	.word	0x20000000
 8004564:	14f8b589 	.word	0x14f8b589

08004568 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	d11b      	bne.n	80045b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004588:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b083      	sub	sp, #12
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045d6:	d103      	bne.n	80045e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045de:	e007      	b.n	80045f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045e8:	d102      	bne.n	80045f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2208      	movs	r2, #8
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e267      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d075      	beq.n	8004706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800461a:	4b88      	ldr	r3, [pc, #544]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00c      	beq.n	8004640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b85      	ldr	r3, [pc, #532]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800462e:	2b08      	cmp	r3, #8
 8004630:	d112      	bne.n	8004658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004632:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463e:	d10b      	bne.n	8004658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	4b7e      	ldr	r3, [pc, #504]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d05b      	beq.n	8004704 <HAL_RCC_OscConfig+0x108>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d157      	bne.n	8004704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e242      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004660:	d106      	bne.n	8004670 <HAL_RCC_OscConfig+0x74>
 8004662:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a75      	ldr	r2, [pc, #468]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	e01d      	b.n	80046ac <HAL_RCC_OscConfig+0xb0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004678:	d10c      	bne.n	8004694 <HAL_RCC_OscConfig+0x98>
 800467a:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6f      	ldr	r2, [pc, #444]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a6c      	ldr	r2, [pc, #432]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e00b      	b.n	80046ac <HAL_RCC_OscConfig+0xb0>
 8004694:	4b69      	ldr	r3, [pc, #420]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800469a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	4b66      	ldr	r3, [pc, #408]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a65      	ldr	r2, [pc, #404]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d013      	beq.n	80046dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b4:	f7fd fae4 	bl	8001c80 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046bc:	f7fd fae0 	bl	8001c80 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b64      	cmp	r3, #100	; 0x64
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e207      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ce:	4b5b      	ldr	r3, [pc, #364]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0f0      	beq.n	80046bc <HAL_RCC_OscConfig+0xc0>
 80046da:	e014      	b.n	8004706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fd fad0 	bl	8001c80 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e4:	f7fd facc 	bl	8001c80 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e1f3      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046f6:	4b51      	ldr	r3, [pc, #324]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0xe8>
 8004702:	e000      	b.n	8004706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d063      	beq.n	80047da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004712:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004726:	2b08      	cmp	r3, #8
 8004728:	d11c      	bne.n	8004764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472a:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d116      	bne.n	8004764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_RCC_OscConfig+0x152>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d001      	beq.n	800474e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e1c7      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	4937      	ldr	r1, [pc, #220]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004762:	e03a      	b.n	80047da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476c:	4b34      	ldr	r3, [pc, #208]	; (8004840 <HAL_RCC_OscConfig+0x244>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd fa85 	bl	8001c80 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477a:	f7fd fa81 	bl	8001c80 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1a8      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	4b2b      	ldr	r3, [pc, #172]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004798:	4b28      	ldr	r3, [pc, #160]	; (800483c <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	4925      	ldr	r1, [pc, #148]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]
 80047ac:	e015      	b.n	80047da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ae:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_RCC_OscConfig+0x244>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fd fa64 	bl	8001c80 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047bc:	f7fd fa60 	bl	8001c80 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e187      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ce:	4b1b      	ldr	r3, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d036      	beq.n	8004854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ee:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_RCC_OscConfig+0x248>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd fa44 	bl	8001c80 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047fc:	f7fd fa40 	bl	8001c80 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e167      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_OscConfig+0x240>)
 8004810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x200>
 800481a:	e01b      	b.n	8004854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800481c:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_OscConfig+0x248>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004822:	f7fd fa2d 	bl	8001c80 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004828:	e00e      	b.n	8004848 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482a:	f7fd fa29 	bl	8001c80 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d907      	bls.n	8004848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e150      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
 800483c:	40023800 	.word	0x40023800
 8004840:	42470000 	.word	0x42470000
 8004844:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	4b88      	ldr	r3, [pc, #544]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800484a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1ea      	bne.n	800482a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8097 	beq.w	8004990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004866:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]
 8004876:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a7c      	ldr	r2, [pc, #496]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800487c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
 8004882:	4b7a      	ldr	r3, [pc, #488]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	4b77      	ldr	r3, [pc, #476]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d118      	bne.n	80048d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489e:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a73      	ldr	r2, [pc, #460]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 80048a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048aa:	f7fd f9e9 	bl	8001c80 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b2:	f7fd f9e5 	bl	8001c80 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e10c      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c4:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <HAL_RCC_OscConfig+0x474>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d106      	bne.n	80048e6 <HAL_RCC_OscConfig+0x2ea>
 80048d8:	4b64      	ldr	r3, [pc, #400]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048dc:	4a63      	ldr	r2, [pc, #396]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6713      	str	r3, [r2, #112]	; 0x70
 80048e4:	e01c      	b.n	8004920 <HAL_RCC_OscConfig+0x324>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b05      	cmp	r3, #5
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x30c>
 80048ee:	4b5f      	ldr	r3, [pc, #380]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a5e      	ldr	r2, [pc, #376]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	4a5b      	ldr	r2, [pc, #364]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	6713      	str	r3, [r2, #112]	; 0x70
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0x324>
 8004908:	4b58      	ldr	r3, [pc, #352]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a57      	ldr	r2, [pc, #348]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
 8004914:	4b55      	ldr	r3, [pc, #340]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	4a54      	ldr	r2, [pc, #336]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800491a:	f023 0304 	bic.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d015      	beq.n	8004954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fd f9aa 	bl	8001c80 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd f9a6 	bl	8001c80 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e0cb      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004946:	4b49      	ldr	r3, [pc, #292]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ee      	beq.n	8004930 <HAL_RCC_OscConfig+0x334>
 8004952:	e014      	b.n	800497e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004954:	f7fd f994 	bl	8001c80 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495a:	e00a      	b.n	8004972 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd f990 	bl	8001c80 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e0b5      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1ee      	bne.n	800495c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497e:	7dfb      	ldrb	r3, [r7, #23]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d105      	bne.n	8004990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004984:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	4a38      	ldr	r2, [pc, #224]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800498a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80a1 	beq.w	8004adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800499a:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 030c 	and.w	r3, r3, #12
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d05c      	beq.n	8004a60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d141      	bne.n	8004a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <HAL_RCC_OscConfig+0x478>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd f964 	bl	8001c80 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd f960 	bl	8001c80 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e087      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	085b      	lsrs	r3, r3, #1
 80049f2:	3b01      	subs	r3, #1
 80049f4:	041b      	lsls	r3, r3, #16
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	061b      	lsls	r3, r3, #24
 80049fe:	491b      	ldr	r1, [pc, #108]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <HAL_RCC_OscConfig+0x478>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd f939 	bl	8001c80 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fd f935 	bl	8001c80 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e05c      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x416>
 8004a30:	e054      	b.n	8004adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_RCC_OscConfig+0x478>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fd f922 	bl	8001c80 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd f91e 	bl	8001c80 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e045      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <HAL_RCC_OscConfig+0x470>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x444>
 8004a5e:	e03d      	b.n	8004adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d107      	bne.n	8004a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e038      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40007000 	.word	0x40007000
 8004a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x4ec>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d028      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d121      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d11a      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d111      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40023800 	.word	0x40023800

08004aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0cc      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b68      	ldr	r3, [pc, #416]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d90c      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b65      	ldr	r3, [pc, #404]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0b8      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d020      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b40:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b58:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	4a52      	ldr	r2, [pc, #328]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b64:	4b50      	ldr	r3, [pc, #320]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	494d      	ldr	r1, [pc, #308]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d044      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d119      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e07f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004baa:	4b3f      	ldr	r3, [pc, #252]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e06f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bba:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e067      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bca:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f023 0203 	bic.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4934      	ldr	r1, [pc, #208]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bdc:	f7fd f850 	bl	8001c80 <HAL_GetTick>
 8004be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fd f84c 	bl	8001c80 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e04f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 020c 	and.w	r2, r3, #12
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d1eb      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d20c      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e032      	b.n	8004c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4916      	ldr	r1, [pc, #88]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	490e      	ldr	r1, [pc, #56]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c72:	f000 f821 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc ffb0 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023c00 	.word	0x40023c00
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	08008bb8 	.word	0x08008bb8
 8004cb0:	20000000 	.word	0x20000000
 8004cb4:	20000004 	.word	0x20000004

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cbc:	b094      	sub	sp, #80	; 0x50
 8004cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	2300      	movs	r3, #0
 8004cca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd0:	4b79      	ldr	r3, [pc, #484]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	f200 80e1 	bhi.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cea:	e0db      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b73      	ldr	r3, [pc, #460]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8004cee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004cf0:	e0db      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf2:	4b73      	ldr	r3, [pc, #460]	; (8004ec0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004cf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004cf6:	e0d8      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d02:	4b6d      	ldr	r3, [pc, #436]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d063      	beq.n	8004dd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b6a      	ldr	r3, [pc, #424]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	2200      	movs	r2, #0
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d20:	633b      	str	r3, [r7, #48]	; 0x30
 8004d22:	2300      	movs	r3, #0
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	f04f 0000 	mov.w	r0, #0
 8004d32:	f04f 0100 	mov.w	r1, #0
 8004d36:	0159      	lsls	r1, r3, #5
 8004d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d3c:	0150      	lsls	r0, r2, #5
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4621      	mov	r1, r4
 8004d44:	1a51      	subs	r1, r2, r1
 8004d46:	6139      	str	r1, [r7, #16]
 8004d48:	4629      	mov	r1, r5
 8004d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d5c:	4659      	mov	r1, fp
 8004d5e:	018b      	lsls	r3, r1, #6
 8004d60:	4651      	mov	r1, sl
 8004d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d66:	4651      	mov	r1, sl
 8004d68:	018a      	lsls	r2, r1, #6
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d70:	4659      	mov	r1, fp
 8004d72:	eb63 0901 	sbc.w	r9, r3, r1
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d8a:	4690      	mov	r8, r2
 8004d8c:	4699      	mov	r9, r3
 8004d8e:	4623      	mov	r3, r4
 8004d90:	eb18 0303 	adds.w	r3, r8, r3
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	462b      	mov	r3, r5
 8004d98:	eb49 0303 	adc.w	r3, r9, r3
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004daa:	4629      	mov	r1, r5
 8004dac:	024b      	lsls	r3, r1, #9
 8004dae:	4621      	mov	r1, r4
 8004db0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004db4:	4621      	mov	r1, r4
 8004db6:	024a      	lsls	r2, r1, #9
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dc8:	f7fb fef6 	bl	8000bb8 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd4:	e058      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dd6:	4b38      	ldr	r3, [pc, #224]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	4611      	mov	r1, r2
 8004de2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004de6:	623b      	str	r3, [r7, #32]
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	0159      	lsls	r1, r3, #5
 8004dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e02:	0150      	lsls	r0, r2, #5
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4641      	mov	r1, r8
 8004e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e0e:	4649      	mov	r1, r9
 8004e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e28:	ebb2 040a 	subs.w	r4, r2, sl
 8004e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	00eb      	lsls	r3, r5, #3
 8004e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e3e:	00e2      	lsls	r2, r4, #3
 8004e40:	4614      	mov	r4, r2
 8004e42:	461d      	mov	r5, r3
 8004e44:	4643      	mov	r3, r8
 8004e46:	18e3      	adds	r3, r4, r3
 8004e48:	603b      	str	r3, [r7, #0]
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	eb45 0303 	adc.w	r3, r5, r3
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	028b      	lsls	r3, r1, #10
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e68:	4621      	mov	r1, r4
 8004e6a:	028a      	lsls	r2, r1, #10
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e72:	2200      	movs	r2, #0
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	61fa      	str	r2, [r7, #28]
 8004e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e7c:	f7fb fe9c 	bl	8000bb8 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	3301      	adds	r3, #1
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea2:	e002      	b.n	8004eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ea6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3750      	adds	r7, #80	; 0x50
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	00f42400 	.word	0x00f42400
 8004ec0:	007a1200 	.word	0x007a1200

08004ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000

08004edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ee0:	f7ff fff0 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	0a9b      	lsrs	r3, r3, #10
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	4903      	ldr	r1, [pc, #12]	; (8004f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	08008bc8 	.word	0x08008bc8

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f08:	f7ff ffdc 	bl	8004ec4 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0b5b      	lsrs	r3, r3, #13
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4903      	ldr	r1, [pc, #12]	; (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	08008bc8 	.word	0x08008bc8

08004f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e03f      	b.n	8004fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc fc94 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fc7b 	bl	800586c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b0ba      	sub	sp, #232	; 0xe8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10f      	bne.n	800502e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800500e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_UART_IRQHandler+0x66>
 800501a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fb65 	bl	80056f6 <UART_Receive_IT>
      return;
 800502c:	e256      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800502e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80de 	beq.w	80051f4 <HAL_UART_IRQHandler+0x22c>
 8005038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80d1 	beq.w	80051f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <HAL_UART_IRQHandler+0xae>
 800505e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00b      	beq.n	800509a <HAL_UART_IRQHandler+0xd2>
 8005082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0202 	orr.w	r2, r3, #2
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_UART_IRQHandler+0xf6>
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0204 	orr.w	r2, r3, #4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d011      	beq.n	80050ee <HAL_UART_IRQHandler+0x126>
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f043 0208 	orr.w	r2, r3, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 81ed 	beq.w	80054d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_UART_IRQHandler+0x14e>
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 faf0 	bl	80056f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <HAL_UART_IRQHandler+0x17a>
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04f      	beq.n	80051e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f9f8 	bl	8005538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d141      	bne.n	80051da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800516c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800518e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800519a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1d9      	bne.n	8005156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d013      	beq.n	80051d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	4a7d      	ldr	r2, [pc, #500]	; (80053a4 <HAL_UART_IRQHandler+0x3dc>)
 80051b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fc ff13 	bl	8001fe2 <HAL_DMA_Abort_IT>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d016      	beq.n	80051f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051cc:	4610      	mov	r0, r2
 80051ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	e00e      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f99a 	bl	800550c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d8:	e00a      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f996 	bl	800550c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e006      	b.n	80051f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f992 	bl	800550c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80051ee:	e170      	b.n	80054d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	bf00      	nop
    return;
 80051f2:	e16e      	b.n	80054d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	f040 814a 	bne.w	8005492 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8143 	beq.w	8005492 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 813c 	beq.w	8005492 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	f040 80b4 	bne.w	80053a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800524c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8140 	beq.w	80054d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800525a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800525e:	429a      	cmp	r2, r3
 8005260:	f080 8139 	bcs.w	80054d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800526a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	f000 8088 	beq.w	800538a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	330c      	adds	r3, #12
 80052a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1d9      	bne.n	800527a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e1      	bne.n	80052c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800530c:	e853 3f00 	ldrex	r3, [r3]
 8005310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800532c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e3      	bne.n	8005302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800536c:	65ba      	str	r2, [r7, #88]	; 0x58
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800537a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e3      	bne.n	8005348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	4618      	mov	r0, r3
 8005386:	f7fc fdbc 	bl	8001f02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005392:	b29b      	uxth	r3, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	b29b      	uxth	r3, r3
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8c0 	bl	8005520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053a0:	e099      	b.n	80054d6 <HAL_UART_IRQHandler+0x50e>
 80053a2:	bf00      	nop
 80053a4:	080055ff 	.word	0x080055ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 808b 	beq.w	80054da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80053c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8086 	beq.w	80054da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	330c      	adds	r3, #12
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053f2:	647a      	str	r2, [r7, #68]	; 0x44
 80053f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e3      	bne.n	80053ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	623b      	str	r3, [r7, #32]
   return(result);
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800542a:	633a      	str	r2, [r7, #48]	; 0x30
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e3      	bne.n	8005406 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	60fb      	str	r3, [r7, #12]
   return(result);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0310 	bic.w	r3, r3, #16
 8005462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	69b9      	ldr	r1, [r7, #24]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	e841 2300 	strex	r3, r2, [r1]
 800547c:	617b      	str	r3, [r7, #20]
   return(result);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e3      	bne.n	800544c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f848 	bl	8005520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005490:	e023      	b.n	80054da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_UART_IRQHandler+0x4ea>
 800549e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8bb 	bl	8005626 <UART_Transmit_IT>
    return;
 80054b0:	e014      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <HAL_UART_IRQHandler+0x514>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d008      	beq.n	80054dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8fb 	bl	80056c6 <UART_EndTransmit_IT>
    return;
 80054d0:	e004      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
    return;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
      return;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_UART_IRQHandler+0x514>
      return;
 80054da:	bf00      	nop
  }
}
 80054dc:	37e8      	adds	r7, #232	; 0xe8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop

080054e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b095      	sub	sp, #84	; 0x54
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005560:	643a      	str	r2, [r7, #64]	; 0x40
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e5      	bne.n	8005540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3314      	adds	r3, #20
 800557a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	61fb      	str	r3, [r7, #28]
   return(result);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	64bb      	str	r3, [r7, #72]	; 0x48
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800559a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e5      	bne.n	8005574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d119      	bne.n	80055e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	330c      	adds	r3, #12
 80055b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	e853 3f00 	ldrex	r3, [r3]
 80055be:	60bb      	str	r3, [r7, #8]
   return(result);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 0310 	bic.w	r3, r3, #16
 80055c6:	647b      	str	r3, [r7, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	330c      	adds	r3, #12
 80055ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055d0:	61ba      	str	r2, [r7, #24]
 80055d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d4:	6979      	ldr	r1, [r7, #20]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	e841 2300 	strex	r3, r2, [r1]
 80055dc:	613b      	str	r3, [r7, #16]
   return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e5      	bne.n	80055b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055f2:	bf00      	nop
 80055f4:	3754      	adds	r7, #84	; 0x54
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff ff77 	bl	800550c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b21      	cmp	r3, #33	; 0x21
 8005638:	d13e      	bne.n	80056b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	d114      	bne.n	800566e <UART_Transmit_IT+0x48>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d110      	bne.n	800566e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	1c9a      	adds	r2, r3, #2
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	621a      	str	r2, [r3, #32]
 800566c:	e008      	b.n	8005680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	1c59      	adds	r1, r3, #1
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	6211      	str	r1, [r2, #32]
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29b      	uxth	r3, r3
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4619      	mov	r1, r3
 800568e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10f      	bne.n	80056b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fefc 	bl	80054e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b08c      	sub	sp, #48	; 0x30
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b22      	cmp	r3, #34	; 0x22
 8005708:	f040 80ab 	bne.w	8005862 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	d117      	bne.n	8005746 <UART_Receive_IT+0x50>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d113      	bne.n	8005746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005734:	b29a      	uxth	r2, r3
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
 8005744:	e026      	b.n	8005794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005758:	d007      	beq.n	800576a <UART_Receive_IT+0x74>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10a      	bne.n	8005778 <UART_Receive_IT+0x82>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	701a      	strb	r2, [r3, #0]
 8005776:	e008      	b.n	800578a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005784:	b2da      	uxtb	r2, r3
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29b      	uxth	r3, r3
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	4619      	mov	r1, r3
 80057a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d15a      	bne.n	800585e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0220 	bic.w	r2, r2, #32
 80057b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f022 0201 	bic.w	r2, r2, #1
 80057d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d135      	bne.n	8005854 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	613b      	str	r3, [r7, #16]
   return(result);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f023 0310 	bic.w	r3, r3, #16
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	330c      	adds	r3, #12
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	623a      	str	r2, [r7, #32]
 8005810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	69f9      	ldr	r1, [r7, #28]
 8005814:	6a3a      	ldr	r2, [r7, #32]
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	61bb      	str	r3, [r7, #24]
   return(result);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e5      	bne.n	80057ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b10      	cmp	r3, #16
 800582e:	d10a      	bne.n	8005846 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fe67 	bl	8005520 <HAL_UARTEx_RxEventCallback>
 8005852:	e002      	b.n	800585a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fe4f 	bl	80054f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e002      	b.n	8005864 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	e000      	b.n	8005864 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005862:	2302      	movs	r3, #2
  }
}
 8005864:	4618      	mov	r0, r3
 8005866:	3730      	adds	r7, #48	; 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800586c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005870:	b0c0      	sub	sp, #256	; 0x100
 8005872:	af00      	add	r7, sp, #0
 8005874:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	68d9      	ldr	r1, [r3, #12]
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	ea40 0301 	orr.w	r3, r0, r1
 8005894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80058c4:	f021 010c 	bic.w	r1, r1, #12
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80058d2:	430b      	orrs	r3, r1
 80058d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e6:	6999      	ldr	r1, [r3, #24]
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	ea40 0301 	orr.w	r3, r0, r1
 80058f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b8f      	ldr	r3, [pc, #572]	; (8005b38 <UART_SetConfig+0x2cc>)
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d005      	beq.n	800590c <UART_SetConfig+0xa0>
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b8d      	ldr	r3, [pc, #564]	; (8005b3c <UART_SetConfig+0x2d0>)
 8005908:	429a      	cmp	r2, r3
 800590a:	d104      	bne.n	8005916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800590c:	f7ff fafa 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 8005910:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005914:	e003      	b.n	800591e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005916:	f7ff fae1 	bl	8004edc <HAL_RCC_GetPCLK1Freq>
 800591a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005928:	f040 810c 	bne.w	8005b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800592c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005930:	2200      	movs	r2, #0
 8005932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005936:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800593a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800593e:	4622      	mov	r2, r4
 8005940:	462b      	mov	r3, r5
 8005942:	1891      	adds	r1, r2, r2
 8005944:	65b9      	str	r1, [r7, #88]	; 0x58
 8005946:	415b      	adcs	r3, r3
 8005948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800594a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800594e:	4621      	mov	r1, r4
 8005950:	eb12 0801 	adds.w	r8, r2, r1
 8005954:	4629      	mov	r1, r5
 8005956:	eb43 0901 	adc.w	r9, r3, r1
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800596a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800596e:	4690      	mov	r8, r2
 8005970:	4699      	mov	r9, r3
 8005972:	4623      	mov	r3, r4
 8005974:	eb18 0303 	adds.w	r3, r8, r3
 8005978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800597c:	462b      	mov	r3, r5
 800597e:	eb49 0303 	adc.w	r3, r9, r3
 8005982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005992:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800599a:	460b      	mov	r3, r1
 800599c:	18db      	adds	r3, r3, r3
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
 80059a0:	4613      	mov	r3, r2
 80059a2:	eb42 0303 	adc.w	r3, r2, r3
 80059a6:	657b      	str	r3, [r7, #84]	; 0x54
 80059a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80059ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80059b0:	f7fb f902 	bl	8000bb8 <__aeabi_uldivmod>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4b61      	ldr	r3, [pc, #388]	; (8005b40 <UART_SetConfig+0x2d4>)
 80059ba:	fba3 2302 	umull	r2, r3, r3, r2
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	011c      	lsls	r4, r3, #4
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80059d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	64b9      	str	r1, [r7, #72]	; 0x48
 80059dc:	415b      	adcs	r3, r3
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059e4:	4641      	mov	r1, r8
 80059e6:	eb12 0a01 	adds.w	sl, r2, r1
 80059ea:	4649      	mov	r1, r9
 80059ec:	eb43 0b01 	adc.w	fp, r3, r1
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a04:	4692      	mov	sl, r2
 8005a06:	469b      	mov	fp, r3
 8005a08:	4643      	mov	r3, r8
 8005a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a12:	464b      	mov	r3, r9
 8005a14:	eb4b 0303 	adc.w	r3, fp, r3
 8005a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a30:	460b      	mov	r3, r1
 8005a32:	18db      	adds	r3, r3, r3
 8005a34:	643b      	str	r3, [r7, #64]	; 0x40
 8005a36:	4613      	mov	r3, r2
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a46:	f7fb f8b7 	bl	8000bb8 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4b3b      	ldr	r3, [pc, #236]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005a52:	fba3 2301 	umull	r2, r3, r3, r1
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2264      	movs	r2, #100	; 0x64
 8005a5a:	fb02 f303 	mul.w	r3, r2, r3
 8005a5e:	1acb      	subs	r3, r1, r3
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a66:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005a68:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a74:	441c      	add	r4, r3
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a88:	4642      	mov	r2, r8
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	1891      	adds	r1, r2, r2
 8005a8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a90:	415b      	adcs	r3, r3
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a98:	4641      	mov	r1, r8
 8005a9a:	1851      	adds	r1, r2, r1
 8005a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	414b      	adcs	r3, r1
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ab0:	4659      	mov	r1, fp
 8005ab2:	00cb      	lsls	r3, r1, #3
 8005ab4:	4651      	mov	r1, sl
 8005ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aba:	4651      	mov	r1, sl
 8005abc:	00ca      	lsls	r2, r1, #3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	189b      	adds	r3, r3, r2
 8005ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005acc:	464b      	mov	r3, r9
 8005ace:	460a      	mov	r2, r1
 8005ad0:	eb42 0303 	adc.w	r3, r2, r3
 8005ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aec:	460b      	mov	r3, r1
 8005aee:	18db      	adds	r3, r3, r3
 8005af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af2:	4613      	mov	r3, r2
 8005af4:	eb42 0303 	adc.w	r3, r2, r3
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b02:	f7fb f859 	bl	8000bb8 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	2164      	movs	r1, #100	; 0x64
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	3332      	adds	r3, #50	; 0x32
 8005b1e:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <UART_SetConfig+0x2d4>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	f003 0207 	and.w	r2, r3, #7
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4422      	add	r2, r4
 8005b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b34:	e105      	b.n	8005d42 <UART_SetConfig+0x4d6>
 8005b36:	bf00      	nop
 8005b38:	40011000 	.word	0x40011000
 8005b3c:	40011400 	.word	0x40011400
 8005b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b56:	4642      	mov	r2, r8
 8005b58:	464b      	mov	r3, r9
 8005b5a:	1891      	adds	r1, r2, r2
 8005b5c:	6239      	str	r1, [r7, #32]
 8005b5e:	415b      	adcs	r3, r3
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b66:	4641      	mov	r1, r8
 8005b68:	1854      	adds	r4, r2, r1
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	eb43 0501 	adc.w	r5, r3, r1
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	00eb      	lsls	r3, r5, #3
 8005b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b7e:	00e2      	lsls	r2, r4, #3
 8005b80:	4614      	mov	r4, r2
 8005b82:	461d      	mov	r5, r3
 8005b84:	4643      	mov	r3, r8
 8005b86:	18e3      	adds	r3, r4, r3
 8005b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	eb45 0303 	adc.w	r3, r5, r3
 8005b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ba2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	008b      	lsls	r3, r1, #2
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	008a      	lsls	r2, r1, #2
 8005bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005bc4:	f7fa fff8 	bl	8000bb8 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4b60      	ldr	r3, [pc, #384]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005bce:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	011c      	lsls	r4, r3, #4
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	61b9      	str	r1, [r7, #24]
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	61fb      	str	r3, [r7, #28]
 8005bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	1851      	adds	r1, r2, r1
 8005bfc:	6139      	str	r1, [r7, #16]
 8005bfe:	4649      	mov	r1, r9
 8005c00:	414b      	adcs	r3, r1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c10:	4659      	mov	r1, fp
 8005c12:	00cb      	lsls	r3, r1, #3
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	00ca      	lsls	r2, r1, #3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	4642      	mov	r2, r8
 8005c26:	189b      	adds	r3, r3, r2
 8005c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c2c:	464b      	mov	r3, r9
 8005c2e:	460a      	mov	r2, r1
 8005c30:	eb42 0303 	adc.w	r3, r2, r3
 8005c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c50:	4649      	mov	r1, r9
 8005c52:	008b      	lsls	r3, r1, #2
 8005c54:	4641      	mov	r1, r8
 8005c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5a:	4641      	mov	r1, r8
 8005c5c:	008a      	lsls	r2, r1, #2
 8005c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c62:	f7fa ffa9 	bl	8000bb8 <__aeabi_uldivmod>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	2164      	movs	r1, #100	; 0x64
 8005c74:	fb01 f303 	mul.w	r3, r1, r3
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	3332      	adds	r3, #50	; 0x32
 8005c7e:	4a34      	ldr	r2, [pc, #208]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005c80:	fba2 2303 	umull	r2, r3, r2, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8a:	441c      	add	r4, r3
 8005c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c90:	2200      	movs	r2, #0
 8005c92:	673b      	str	r3, [r7, #112]	; 0x70
 8005c94:	677a      	str	r2, [r7, #116]	; 0x74
 8005c96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005caa:	4641      	mov	r1, r8
 8005cac:	1851      	adds	r1, r2, r1
 8005cae:	6039      	str	r1, [r7, #0]
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	414b      	adcs	r3, r1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	00cb      	lsls	r3, r1, #3
 8005cc6:	4651      	mov	r1, sl
 8005cc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ccc:	4651      	mov	r1, sl
 8005cce:	00ca      	lsls	r2, r1, #3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4642      	mov	r2, r8
 8005cd8:	189b      	adds	r3, r3, r2
 8005cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cdc:	464b      	mov	r3, r9
 8005cde:	460a      	mov	r2, r1
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	663b      	str	r3, [r7, #96]	; 0x60
 8005cf0:	667a      	str	r2, [r7, #100]	; 0x64
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cfe:	4649      	mov	r1, r9
 8005d00:	008b      	lsls	r3, r1, #2
 8005d02:	4641      	mov	r1, r8
 8005d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d08:	4641      	mov	r1, r8
 8005d0a:	008a      	lsls	r2, r1, #2
 8005d0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d10:	f7fa ff52 	bl	8000bb8 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2164      	movs	r1, #100	; 0x64
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	3332      	adds	r3, #50	; 0x32
 8005d2c:	4a08      	ldr	r2, [pc, #32]	; (8005d50 <UART_SetConfig+0x4e4>)
 8005d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4422      	add	r2, r4
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d4e:	bf00      	nop
 8005d50:	51eb851f 	.word	0x51eb851f

08005d54 <__errno>:
 8005d54:	4b01      	ldr	r3, [pc, #4]	; (8005d5c <__errno+0x8>)
 8005d56:	6818      	ldr	r0, [r3, #0]
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	2000000c 	.word	0x2000000c

08005d60 <__libc_init_array>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4d0d      	ldr	r5, [pc, #52]	; (8005d98 <__libc_init_array+0x38>)
 8005d64:	4c0d      	ldr	r4, [pc, #52]	; (8005d9c <__libc_init_array+0x3c>)
 8005d66:	1b64      	subs	r4, r4, r5
 8005d68:	10a4      	asrs	r4, r4, #2
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	42a6      	cmp	r6, r4
 8005d6e:	d109      	bne.n	8005d84 <__libc_init_array+0x24>
 8005d70:	4d0b      	ldr	r5, [pc, #44]	; (8005da0 <__libc_init_array+0x40>)
 8005d72:	4c0c      	ldr	r4, [pc, #48]	; (8005da4 <__libc_init_array+0x44>)
 8005d74:	f002 ff02 	bl	8008b7c <_init>
 8005d78:	1b64      	subs	r4, r4, r5
 8005d7a:	10a4      	asrs	r4, r4, #2
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	42a6      	cmp	r6, r4
 8005d80:	d105      	bne.n	8005d8e <__libc_init_array+0x2e>
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d88:	4798      	blx	r3
 8005d8a:	3601      	adds	r6, #1
 8005d8c:	e7ee      	b.n	8005d6c <__libc_init_array+0xc>
 8005d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d92:	4798      	blx	r3
 8005d94:	3601      	adds	r6, #1
 8005d96:	e7f2      	b.n	8005d7e <__libc_init_array+0x1e>
 8005d98:	08008fb4 	.word	0x08008fb4
 8005d9c:	08008fb4 	.word	0x08008fb4
 8005da0:	08008fb4 	.word	0x08008fb4
 8005da4:	08008fb8 	.word	0x08008fb8

08005da8 <memset>:
 8005da8:	4402      	add	r2, r0
 8005daa:	4603      	mov	r3, r0
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d100      	bne.n	8005db2 <memset+0xa>
 8005db0:	4770      	bx	lr
 8005db2:	f803 1b01 	strb.w	r1, [r3], #1
 8005db6:	e7f9      	b.n	8005dac <memset+0x4>

08005db8 <__cvt>:
 8005db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	b088      	sub	sp, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	4614      	mov	r4, r2
 8005dc4:	bfbc      	itt	lt
 8005dc6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005dca:	4614      	movlt	r4, r2
 8005dcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dce:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8005dd0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005dd4:	bfb6      	itet	lt
 8005dd6:	461d      	movlt	r5, r3
 8005dd8:	2300      	movge	r3, #0
 8005dda:	232d      	movlt	r3, #45	; 0x2d
 8005ddc:	7013      	strb	r3, [r2, #0]
 8005dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005de0:	f023 0820 	bic.w	r8, r3, #32
 8005de4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005de8:	d005      	beq.n	8005df6 <__cvt+0x3e>
 8005dea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005dee:	d100      	bne.n	8005df2 <__cvt+0x3a>
 8005df0:	3601      	adds	r6, #1
 8005df2:	2302      	movs	r3, #2
 8005df4:	e000      	b.n	8005df8 <__cvt+0x40>
 8005df6:	2303      	movs	r3, #3
 8005df8:	aa07      	add	r2, sp, #28
 8005dfa:	9204      	str	r2, [sp, #16]
 8005dfc:	aa06      	add	r2, sp, #24
 8005dfe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e02:	e9cd 3600 	strd	r3, r6, [sp]
 8005e06:	4622      	mov	r2, r4
 8005e08:	462b      	mov	r3, r5
 8005e0a:	f000 fced 	bl	80067e8 <_dtoa_r>
 8005e0e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e12:	4607      	mov	r7, r0
 8005e14:	d102      	bne.n	8005e1c <__cvt+0x64>
 8005e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e18:	07db      	lsls	r3, r3, #31
 8005e1a:	d522      	bpl.n	8005e62 <__cvt+0xaa>
 8005e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e20:	eb07 0906 	add.w	r9, r7, r6
 8005e24:	d110      	bne.n	8005e48 <__cvt+0x90>
 8005e26:	783b      	ldrb	r3, [r7, #0]
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d10a      	bne.n	8005e42 <__cvt+0x8a>
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7fa fe50 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e38:	b918      	cbnz	r0, 8005e42 <__cvt+0x8a>
 8005e3a:	f1c6 0601 	rsb	r6, r6, #1
 8005e3e:	f8ca 6000 	str.w	r6, [sl]
 8005e42:	f8da 3000 	ldr.w	r3, [sl]
 8005e46:	4499      	add	r9, r3
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f7fa fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e54:	b108      	cbz	r0, 8005e5a <__cvt+0xa2>
 8005e56:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e5a:	2230      	movs	r2, #48	; 0x30
 8005e5c:	9b07      	ldr	r3, [sp, #28]
 8005e5e:	454b      	cmp	r3, r9
 8005e60:	d307      	bcc.n	8005e72 <__cvt+0xba>
 8005e62:	9b07      	ldr	r3, [sp, #28]
 8005e64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005e66:	1bdb      	subs	r3, r3, r7
 8005e68:	4638      	mov	r0, r7
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	b008      	add	sp, #32
 8005e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e72:	1c59      	adds	r1, r3, #1
 8005e74:	9107      	str	r1, [sp, #28]
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e7f0      	b.n	8005e5c <__cvt+0xa4>

08005e7a <__exponent>:
 8005e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	bfb8      	it	lt
 8005e82:	4249      	neglt	r1, r1
 8005e84:	f803 2b02 	strb.w	r2, [r3], #2
 8005e88:	bfb4      	ite	lt
 8005e8a:	222d      	movlt	r2, #45	; 0x2d
 8005e8c:	222b      	movge	r2, #43	; 0x2b
 8005e8e:	2909      	cmp	r1, #9
 8005e90:	7042      	strb	r2, [r0, #1]
 8005e92:	dd2a      	ble.n	8005eea <__exponent+0x70>
 8005e94:	f10d 0407 	add.w	r4, sp, #7
 8005e98:	46a4      	mov	ip, r4
 8005e9a:	270a      	movs	r7, #10
 8005e9c:	46a6      	mov	lr, r4
 8005e9e:	460a      	mov	r2, r1
 8005ea0:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ea4:	fb07 1516 	mls	r5, r7, r6, r1
 8005ea8:	3530      	adds	r5, #48	; 0x30
 8005eaa:	2a63      	cmp	r2, #99	; 0x63
 8005eac:	f104 34ff 	add.w	r4, r4, #4294967295
 8005eb0:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	dcf1      	bgt.n	8005e9c <__exponent+0x22>
 8005eb8:	3130      	adds	r1, #48	; 0x30
 8005eba:	f1ae 0502 	sub.w	r5, lr, #2
 8005ebe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ec2:	1c44      	adds	r4, r0, #1
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4561      	cmp	r1, ip
 8005ec8:	d30a      	bcc.n	8005ee0 <__exponent+0x66>
 8005eca:	f10d 0209 	add.w	r2, sp, #9
 8005ece:	eba2 020e 	sub.w	r2, r2, lr
 8005ed2:	4565      	cmp	r5, ip
 8005ed4:	bf88      	it	hi
 8005ed6:	2200      	movhi	r2, #0
 8005ed8:	4413      	add	r3, r2
 8005eda:	1a18      	subs	r0, r3, r0
 8005edc:	b003      	add	sp, #12
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ee4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ee8:	e7ed      	b.n	8005ec6 <__exponent+0x4c>
 8005eea:	2330      	movs	r3, #48	; 0x30
 8005eec:	3130      	adds	r1, #48	; 0x30
 8005eee:	7083      	strb	r3, [r0, #2]
 8005ef0:	70c1      	strb	r1, [r0, #3]
 8005ef2:	1d03      	adds	r3, r0, #4
 8005ef4:	e7f1      	b.n	8005eda <__exponent+0x60>
	...

08005ef8 <_printf_float>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	ed2d 8b02 	vpush	{d8}
 8005f00:	b091      	sub	sp, #68	; 0x44
 8005f02:	460c      	mov	r4, r1
 8005f04:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005f08:	4616      	mov	r6, r2
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	f001 fa59 	bl	80073c4 <_localeconv_r>
 8005f12:	f8d0 a000 	ldr.w	sl, [r0]
 8005f16:	4650      	mov	r0, sl
 8005f18:	f7fa f962 	bl	80001e0 <strlen>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	930e      	str	r3, [sp, #56]	; 0x38
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	9309      	str	r3, [sp, #36]	; 0x24
 8005f24:	f8d8 3000 	ldr.w	r3, [r8]
 8005f28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005f2c:	3307      	adds	r3, #7
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	f103 0208 	add.w	r2, r3, #8
 8005f36:	f8c8 2000 	str.w	r2, [r8]
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f4c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005f50:	ee08 0a10 	vmov	s16, r0
 8005f54:	4ba0      	ldr	r3, [pc, #640]	; (80061d8 <_printf_float+0x2e0>)
 8005f56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5e:	f7fa fded 	bl	8000b3c <__aeabi_dcmpun>
 8005f62:	bb88      	cbnz	r0, 8005fc8 <_printf_float+0xd0>
 8005f64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f68:	4b9b      	ldr	r3, [pc, #620]	; (80061d8 <_printf_float+0x2e0>)
 8005f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6e:	f7fa fdc7 	bl	8000b00 <__aeabi_dcmple>
 8005f72:	bb48      	cbnz	r0, 8005fc8 <_printf_float+0xd0>
 8005f74:	2200      	movs	r2, #0
 8005f76:	2300      	movs	r3, #0
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa fdb6 	bl	8000aec <__aeabi_dcmplt>
 8005f80:	b110      	cbz	r0, 8005f88 <_printf_float+0x90>
 8005f82:	232d      	movs	r3, #45	; 0x2d
 8005f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f88:	4b94      	ldr	r3, [pc, #592]	; (80061dc <_printf_float+0x2e4>)
 8005f8a:	4895      	ldr	r0, [pc, #596]	; (80061e0 <_printf_float+0x2e8>)
 8005f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f90:	bf94      	ite	ls
 8005f92:	4698      	movls	r8, r3
 8005f94:	4680      	movhi	r8, r0
 8005f96:	2303      	movs	r3, #3
 8005f98:	6123      	str	r3, [r4, #16]
 8005f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	f04f 0900 	mov.w	r9, #0
 8005fa6:	9700      	str	r7, [sp, #0]
 8005fa8:	4633      	mov	r3, r6
 8005faa:	aa0f      	add	r2, sp, #60	; 0x3c
 8005fac:	4621      	mov	r1, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 f9da 	bl	8006368 <_printf_common>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	f040 8092 	bne.w	80060de <_printf_float+0x1e6>
 8005fba:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbe:	b011      	add	sp, #68	; 0x44
 8005fc0:	ecbd 8b02 	vpop	{d8}
 8005fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	4640      	mov	r0, r8
 8005fce:	4649      	mov	r1, r9
 8005fd0:	f7fa fdb4 	bl	8000b3c <__aeabi_dcmpun>
 8005fd4:	b140      	cbz	r0, 8005fe8 <_printf_float+0xf0>
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfbc      	itt	lt
 8005fdc:	232d      	movlt	r3, #45	; 0x2d
 8005fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005fe2:	4880      	ldr	r0, [pc, #512]	; (80061e4 <_printf_float+0x2ec>)
 8005fe4:	4b80      	ldr	r3, [pc, #512]	; (80061e8 <_printf_float+0x2f0>)
 8005fe6:	e7d1      	b.n	8005f8c <_printf_float+0x94>
 8005fe8:	6863      	ldr	r3, [r4, #4]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
 8005ff0:	d143      	bne.n	800607a <_printf_float+0x182>
 8005ff2:	2306      	movs	r3, #6
 8005ff4:	6063      	str	r3, [r4, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ffa:	9206      	str	r2, [sp, #24]
 8005ffc:	aa0e      	add	r2, sp, #56	; 0x38
 8005ffe:	e9cd b204 	strd	fp, r2, [sp, #16]
 8006002:	aa0d      	add	r2, sp, #52	; 0x34
 8006004:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800600e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	6863      	ldr	r3, [r4, #4]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	4628      	mov	r0, r5
 800601e:	910a      	str	r1, [sp, #40]	; 0x28
 8006020:	f7ff feca 	bl	8005db8 <__cvt>
 8006024:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006026:	2947      	cmp	r1, #71	; 0x47
 8006028:	4680      	mov	r8, r0
 800602a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800602c:	d108      	bne.n	8006040 <_printf_float+0x148>
 800602e:	1cc8      	adds	r0, r1, #3
 8006030:	db02      	blt.n	8006038 <_printf_float+0x140>
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	4299      	cmp	r1, r3
 8006036:	dd40      	ble.n	80060ba <_printf_float+0x1c2>
 8006038:	f1ab 0b02 	sub.w	fp, fp, #2
 800603c:	fa5f fb8b 	uxtb.w	fp, fp
 8006040:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006044:	d81f      	bhi.n	8006086 <_printf_float+0x18e>
 8006046:	3901      	subs	r1, #1
 8006048:	465a      	mov	r2, fp
 800604a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800604e:	910d      	str	r1, [sp, #52]	; 0x34
 8006050:	f7ff ff13 	bl	8005e7a <__exponent>
 8006054:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006056:	1813      	adds	r3, r2, r0
 8006058:	2a01      	cmp	r2, #1
 800605a:	4681      	mov	r9, r0
 800605c:	6123      	str	r3, [r4, #16]
 800605e:	dc02      	bgt.n	8006066 <_printf_float+0x16e>
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	07d2      	lsls	r2, r2, #31
 8006064:	d501      	bpl.n	800606a <_printf_float+0x172>
 8006066:	3301      	adds	r3, #1
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800606e:	2b00      	cmp	r3, #0
 8006070:	d099      	beq.n	8005fa6 <_printf_float+0xae>
 8006072:	232d      	movs	r3, #45	; 0x2d
 8006074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006078:	e795      	b.n	8005fa6 <_printf_float+0xae>
 800607a:	2947      	cmp	r1, #71	; 0x47
 800607c:	d1bb      	bne.n	8005ff6 <_printf_float+0xfe>
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1b9      	bne.n	8005ff6 <_printf_float+0xfe>
 8006082:	2301      	movs	r3, #1
 8006084:	e7b6      	b.n	8005ff4 <_printf_float+0xfc>
 8006086:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800608a:	d118      	bne.n	80060be <_printf_float+0x1c6>
 800608c:	2900      	cmp	r1, #0
 800608e:	6863      	ldr	r3, [r4, #4]
 8006090:	dd0b      	ble.n	80060aa <_printf_float+0x1b2>
 8006092:	6121      	str	r1, [r4, #16]
 8006094:	b913      	cbnz	r3, 800609c <_printf_float+0x1a4>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	07d0      	lsls	r0, r2, #31
 800609a:	d502      	bpl.n	80060a2 <_printf_float+0x1aa>
 800609c:	3301      	adds	r3, #1
 800609e:	440b      	add	r3, r1
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80060a4:	f04f 0900 	mov.w	r9, #0
 80060a8:	e7df      	b.n	800606a <_printf_float+0x172>
 80060aa:	b913      	cbnz	r3, 80060b2 <_printf_float+0x1ba>
 80060ac:	6822      	ldr	r2, [r4, #0]
 80060ae:	07d2      	lsls	r2, r2, #31
 80060b0:	d501      	bpl.n	80060b6 <_printf_float+0x1be>
 80060b2:	3302      	adds	r3, #2
 80060b4:	e7f4      	b.n	80060a0 <_printf_float+0x1a8>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e7f2      	b.n	80060a0 <_printf_float+0x1a8>
 80060ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80060be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060c0:	4299      	cmp	r1, r3
 80060c2:	db05      	blt.n	80060d0 <_printf_float+0x1d8>
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	6121      	str	r1, [r4, #16]
 80060c8:	07d8      	lsls	r0, r3, #31
 80060ca:	d5ea      	bpl.n	80060a2 <_printf_float+0x1aa>
 80060cc:	1c4b      	adds	r3, r1, #1
 80060ce:	e7e7      	b.n	80060a0 <_printf_float+0x1a8>
 80060d0:	2900      	cmp	r1, #0
 80060d2:	bfd4      	ite	le
 80060d4:	f1c1 0202 	rsble	r2, r1, #2
 80060d8:	2201      	movgt	r2, #1
 80060da:	4413      	add	r3, r2
 80060dc:	e7e0      	b.n	80060a0 <_printf_float+0x1a8>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	055a      	lsls	r2, r3, #21
 80060e2:	d407      	bmi.n	80060f4 <_printf_float+0x1fc>
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	4642      	mov	r2, r8
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	d12c      	bne.n	800614c <_printf_float+0x254>
 80060f2:	e762      	b.n	8005fba <_printf_float+0xc2>
 80060f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060f8:	f240 80e0 	bls.w	80062bc <_printf_float+0x3c4>
 80060fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006100:	2200      	movs	r2, #0
 8006102:	2300      	movs	r3, #0
 8006104:	f7fa fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006108:	2800      	cmp	r0, #0
 800610a:	d034      	beq.n	8006176 <_printf_float+0x27e>
 800610c:	4a37      	ldr	r2, [pc, #220]	; (80061ec <_printf_float+0x2f4>)
 800610e:	2301      	movs	r3, #1
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f af4f 	beq.w	8005fba <_printf_float+0xc2>
 800611c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006120:	429a      	cmp	r2, r3
 8006122:	db02      	blt.n	800612a <_printf_float+0x232>
 8006124:	6823      	ldr	r3, [r4, #0]
 8006126:	07d8      	lsls	r0, r3, #31
 8006128:	d510      	bpl.n	800614c <_printf_float+0x254>
 800612a:	ee18 3a10 	vmov	r3, s16
 800612e:	4652      	mov	r2, sl
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f af3f 	beq.w	8005fba <_printf_float+0xc2>
 800613c:	f04f 0800 	mov.w	r8, #0
 8006140:	f104 091a 	add.w	r9, r4, #26
 8006144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006146:	3b01      	subs	r3, #1
 8006148:	4543      	cmp	r3, r8
 800614a:	dc09      	bgt.n	8006160 <_printf_float+0x268>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	079b      	lsls	r3, r3, #30
 8006150:	f100 8105 	bmi.w	800635e <_printf_float+0x466>
 8006154:	68e0      	ldr	r0, [r4, #12]
 8006156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006158:	4298      	cmp	r0, r3
 800615a:	bfb8      	it	lt
 800615c:	4618      	movlt	r0, r3
 800615e:	e72e      	b.n	8005fbe <_printf_float+0xc6>
 8006160:	2301      	movs	r3, #1
 8006162:	464a      	mov	r2, r9
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	47b8      	blx	r7
 800616a:	3001      	adds	r0, #1
 800616c:	f43f af25 	beq.w	8005fba <_printf_float+0xc2>
 8006170:	f108 0801 	add.w	r8, r8, #1
 8006174:	e7e6      	b.n	8006144 <_printf_float+0x24c>
 8006176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006178:	2b00      	cmp	r3, #0
 800617a:	dc39      	bgt.n	80061f0 <_printf_float+0x2f8>
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <_printf_float+0x2f4>)
 800617e:	2301      	movs	r3, #1
 8006180:	4631      	mov	r1, r6
 8006182:	4628      	mov	r0, r5
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f af17 	beq.w	8005fba <_printf_float+0xc2>
 800618c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006190:	4313      	orrs	r3, r2
 8006192:	d102      	bne.n	800619a <_printf_float+0x2a2>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	07d9      	lsls	r1, r3, #31
 8006198:	d5d8      	bpl.n	800614c <_printf_float+0x254>
 800619a:	ee18 3a10 	vmov	r3, s16
 800619e:	4652      	mov	r2, sl
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af07 	beq.w	8005fba <_printf_float+0xc2>
 80061ac:	f04f 0900 	mov.w	r9, #0
 80061b0:	f104 0a1a 	add.w	sl, r4, #26
 80061b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b6:	425b      	negs	r3, r3
 80061b8:	454b      	cmp	r3, r9
 80061ba:	dc01      	bgt.n	80061c0 <_printf_float+0x2c8>
 80061bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061be:	e792      	b.n	80060e6 <_printf_float+0x1ee>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4652      	mov	r2, sl
 80061c4:	4631      	mov	r1, r6
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	f43f aef5 	beq.w	8005fba <_printf_float+0xc2>
 80061d0:	f109 0901 	add.w	r9, r9, #1
 80061d4:	e7ee      	b.n	80061b4 <_printf_float+0x2bc>
 80061d6:	bf00      	nop
 80061d8:	7fefffff 	.word	0x7fefffff
 80061dc:	08008bd4 	.word	0x08008bd4
 80061e0:	08008bd8 	.word	0x08008bd8
 80061e4:	08008be0 	.word	0x08008be0
 80061e8:	08008bdc 	.word	0x08008bdc
 80061ec:	08008be4 	.word	0x08008be4
 80061f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bfa8      	it	ge
 80061f8:	461a      	movge	r2, r3
 80061fa:	2a00      	cmp	r2, #0
 80061fc:	4691      	mov	r9, r2
 80061fe:	dc37      	bgt.n	8006270 <_printf_float+0x378>
 8006200:	f04f 0b00 	mov.w	fp, #0
 8006204:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006208:	f104 021a 	add.w	r2, r4, #26
 800620c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800620e:	9309      	str	r3, [sp, #36]	; 0x24
 8006210:	eba3 0309 	sub.w	r3, r3, r9
 8006214:	455b      	cmp	r3, fp
 8006216:	dc33      	bgt.n	8006280 <_printf_float+0x388>
 8006218:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800621c:	429a      	cmp	r2, r3
 800621e:	db3b      	blt.n	8006298 <_printf_float+0x3a0>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	07da      	lsls	r2, r3, #31
 8006224:	d438      	bmi.n	8006298 <_printf_float+0x3a0>
 8006226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006228:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800622a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800622c:	1a9a      	subs	r2, r3, r2
 800622e:	eba3 0901 	sub.w	r9, r3, r1
 8006232:	4591      	cmp	r9, r2
 8006234:	bfa8      	it	ge
 8006236:	4691      	movge	r9, r2
 8006238:	f1b9 0f00 	cmp.w	r9, #0
 800623c:	dc35      	bgt.n	80062aa <_printf_float+0x3b2>
 800623e:	f04f 0800 	mov.w	r8, #0
 8006242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006246:	f104 0a1a 	add.w	sl, r4, #26
 800624a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800624e:	1a9b      	subs	r3, r3, r2
 8006250:	eba3 0309 	sub.w	r3, r3, r9
 8006254:	4543      	cmp	r3, r8
 8006256:	f77f af79 	ble.w	800614c <_printf_float+0x254>
 800625a:	2301      	movs	r3, #1
 800625c:	4652      	mov	r2, sl
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f aea8 	beq.w	8005fba <_printf_float+0xc2>
 800626a:	f108 0801 	add.w	r8, r8, #1
 800626e:	e7ec      	b.n	800624a <_printf_float+0x352>
 8006270:	4613      	mov	r3, r2
 8006272:	4631      	mov	r1, r6
 8006274:	4642      	mov	r2, r8
 8006276:	4628      	mov	r0, r5
 8006278:	47b8      	blx	r7
 800627a:	3001      	adds	r0, #1
 800627c:	d1c0      	bne.n	8006200 <_printf_float+0x308>
 800627e:	e69c      	b.n	8005fba <_printf_float+0xc2>
 8006280:	2301      	movs	r3, #1
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	9209      	str	r2, [sp, #36]	; 0x24
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f ae95 	beq.w	8005fba <_printf_float+0xc2>
 8006290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006292:	f10b 0b01 	add.w	fp, fp, #1
 8006296:	e7b9      	b.n	800620c <_printf_float+0x314>
 8006298:	ee18 3a10 	vmov	r3, s16
 800629c:	4652      	mov	r2, sl
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	d1be      	bne.n	8006226 <_printf_float+0x32e>
 80062a8:	e687      	b.n	8005fba <_printf_float+0xc2>
 80062aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062ac:	464b      	mov	r3, r9
 80062ae:	4442      	add	r2, r8
 80062b0:	4631      	mov	r1, r6
 80062b2:	4628      	mov	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	d1c1      	bne.n	800623e <_printf_float+0x346>
 80062ba:	e67e      	b.n	8005fba <_printf_float+0xc2>
 80062bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062be:	2a01      	cmp	r2, #1
 80062c0:	dc01      	bgt.n	80062c6 <_printf_float+0x3ce>
 80062c2:	07db      	lsls	r3, r3, #31
 80062c4:	d538      	bpl.n	8006338 <_printf_float+0x440>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4642      	mov	r2, r8
 80062ca:	4631      	mov	r1, r6
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae72 	beq.w	8005fba <_printf_float+0xc2>
 80062d6:	ee18 3a10 	vmov	r3, s16
 80062da:	4652      	mov	r2, sl
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f ae69 	beq.w	8005fba <_printf_float+0xc2>
 80062e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	f7fa fbf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80062f4:	b9d8      	cbnz	r0, 800632e <_printf_float+0x436>
 80062f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f8:	f108 0201 	add.w	r2, r8, #1
 80062fc:	3b01      	subs	r3, #1
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	47b8      	blx	r7
 8006304:	3001      	adds	r0, #1
 8006306:	d10e      	bne.n	8006326 <_printf_float+0x42e>
 8006308:	e657      	b.n	8005fba <_printf_float+0xc2>
 800630a:	2301      	movs	r3, #1
 800630c:	4652      	mov	r2, sl
 800630e:	4631      	mov	r1, r6
 8006310:	4628      	mov	r0, r5
 8006312:	47b8      	blx	r7
 8006314:	3001      	adds	r0, #1
 8006316:	f43f ae50 	beq.w	8005fba <_printf_float+0xc2>
 800631a:	f108 0801 	add.w	r8, r8, #1
 800631e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006320:	3b01      	subs	r3, #1
 8006322:	4543      	cmp	r3, r8
 8006324:	dcf1      	bgt.n	800630a <_printf_float+0x412>
 8006326:	464b      	mov	r3, r9
 8006328:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800632c:	e6dc      	b.n	80060e8 <_printf_float+0x1f0>
 800632e:	f04f 0800 	mov.w	r8, #0
 8006332:	f104 0a1a 	add.w	sl, r4, #26
 8006336:	e7f2      	b.n	800631e <_printf_float+0x426>
 8006338:	2301      	movs	r3, #1
 800633a:	4642      	mov	r2, r8
 800633c:	e7df      	b.n	80062fe <_printf_float+0x406>
 800633e:	2301      	movs	r3, #1
 8006340:	464a      	mov	r2, r9
 8006342:	4631      	mov	r1, r6
 8006344:	4628      	mov	r0, r5
 8006346:	47b8      	blx	r7
 8006348:	3001      	adds	r0, #1
 800634a:	f43f ae36 	beq.w	8005fba <_printf_float+0xc2>
 800634e:	f108 0801 	add.w	r8, r8, #1
 8006352:	68e3      	ldr	r3, [r4, #12]
 8006354:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006356:	1a5b      	subs	r3, r3, r1
 8006358:	4543      	cmp	r3, r8
 800635a:	dcf0      	bgt.n	800633e <_printf_float+0x446>
 800635c:	e6fa      	b.n	8006154 <_printf_float+0x25c>
 800635e:	f04f 0800 	mov.w	r8, #0
 8006362:	f104 0919 	add.w	r9, r4, #25
 8006366:	e7f4      	b.n	8006352 <_printf_float+0x45a>

08006368 <_printf_common>:
 8006368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	4616      	mov	r6, r2
 800636e:	4699      	mov	r9, r3
 8006370:	688a      	ldr	r2, [r1, #8]
 8006372:	690b      	ldr	r3, [r1, #16]
 8006374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006378:	4293      	cmp	r3, r2
 800637a:	bfb8      	it	lt
 800637c:	4613      	movlt	r3, r2
 800637e:	6033      	str	r3, [r6, #0]
 8006380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006384:	4607      	mov	r7, r0
 8006386:	460c      	mov	r4, r1
 8006388:	b10a      	cbz	r2, 800638e <_printf_common+0x26>
 800638a:	3301      	adds	r3, #1
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	0699      	lsls	r1, r3, #26
 8006392:	bf42      	ittt	mi
 8006394:	6833      	ldrmi	r3, [r6, #0]
 8006396:	3302      	addmi	r3, #2
 8006398:	6033      	strmi	r3, [r6, #0]
 800639a:	6825      	ldr	r5, [r4, #0]
 800639c:	f015 0506 	ands.w	r5, r5, #6
 80063a0:	d106      	bne.n	80063b0 <_printf_common+0x48>
 80063a2:	f104 0a19 	add.w	sl, r4, #25
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	6832      	ldr	r2, [r6, #0]
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	42ab      	cmp	r3, r5
 80063ae:	dc26      	bgt.n	80063fe <_printf_common+0x96>
 80063b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063b4:	1e13      	subs	r3, r2, #0
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	bf18      	it	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	0692      	lsls	r2, r2, #26
 80063be:	d42b      	bmi.n	8006418 <_printf_common+0xb0>
 80063c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063c4:	4649      	mov	r1, r9
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c0      	blx	r8
 80063ca:	3001      	adds	r0, #1
 80063cc:	d01e      	beq.n	800640c <_printf_common+0xa4>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	68e5      	ldr	r5, [r4, #12]
 80063d2:	6832      	ldr	r2, [r6, #0]
 80063d4:	f003 0306 	and.w	r3, r3, #6
 80063d8:	2b04      	cmp	r3, #4
 80063da:	bf08      	it	eq
 80063dc:	1aad      	subeq	r5, r5, r2
 80063de:	68a3      	ldr	r3, [r4, #8]
 80063e0:	6922      	ldr	r2, [r4, #16]
 80063e2:	bf0c      	ite	eq
 80063e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e8:	2500      	movne	r5, #0
 80063ea:	4293      	cmp	r3, r2
 80063ec:	bfc4      	itt	gt
 80063ee:	1a9b      	subgt	r3, r3, r2
 80063f0:	18ed      	addgt	r5, r5, r3
 80063f2:	2600      	movs	r6, #0
 80063f4:	341a      	adds	r4, #26
 80063f6:	42b5      	cmp	r5, r6
 80063f8:	d11a      	bne.n	8006430 <_printf_common+0xc8>
 80063fa:	2000      	movs	r0, #0
 80063fc:	e008      	b.n	8006410 <_printf_common+0xa8>
 80063fe:	2301      	movs	r3, #1
 8006400:	4652      	mov	r2, sl
 8006402:	4649      	mov	r1, r9
 8006404:	4638      	mov	r0, r7
 8006406:	47c0      	blx	r8
 8006408:	3001      	adds	r0, #1
 800640a:	d103      	bne.n	8006414 <_printf_common+0xac>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006414:	3501      	adds	r5, #1
 8006416:	e7c6      	b.n	80063a6 <_printf_common+0x3e>
 8006418:	18e1      	adds	r1, r4, r3
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	2030      	movs	r0, #48	; 0x30
 800641e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006422:	4422      	add	r2, r4
 8006424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800642c:	3302      	adds	r3, #2
 800642e:	e7c7      	b.n	80063c0 <_printf_common+0x58>
 8006430:	2301      	movs	r3, #1
 8006432:	4622      	mov	r2, r4
 8006434:	4649      	mov	r1, r9
 8006436:	4638      	mov	r0, r7
 8006438:	47c0      	blx	r8
 800643a:	3001      	adds	r0, #1
 800643c:	d0e6      	beq.n	800640c <_printf_common+0xa4>
 800643e:	3601      	adds	r6, #1
 8006440:	e7d9      	b.n	80063f6 <_printf_common+0x8e>
	...

08006444 <_printf_i>:
 8006444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	7e0f      	ldrb	r7, [r1, #24]
 800644a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800644c:	2f78      	cmp	r7, #120	; 0x78
 800644e:	4691      	mov	r9, r2
 8006450:	4680      	mov	r8, r0
 8006452:	460c      	mov	r4, r1
 8006454:	469a      	mov	sl, r3
 8006456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800645a:	d807      	bhi.n	800646c <_printf_i+0x28>
 800645c:	2f62      	cmp	r7, #98	; 0x62
 800645e:	d80a      	bhi.n	8006476 <_printf_i+0x32>
 8006460:	2f00      	cmp	r7, #0
 8006462:	f000 80d8 	beq.w	8006616 <_printf_i+0x1d2>
 8006466:	2f58      	cmp	r7, #88	; 0x58
 8006468:	f000 80a3 	beq.w	80065b2 <_printf_i+0x16e>
 800646c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006474:	e03a      	b.n	80064ec <_printf_i+0xa8>
 8006476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800647a:	2b15      	cmp	r3, #21
 800647c:	d8f6      	bhi.n	800646c <_printf_i+0x28>
 800647e:	a101      	add	r1, pc, #4	; (adr r1, 8006484 <_printf_i+0x40>)
 8006480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006484:	080064dd 	.word	0x080064dd
 8006488:	080064f1 	.word	0x080064f1
 800648c:	0800646d 	.word	0x0800646d
 8006490:	0800646d 	.word	0x0800646d
 8006494:	0800646d 	.word	0x0800646d
 8006498:	0800646d 	.word	0x0800646d
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	0800646d 	.word	0x0800646d
 80064a4:	0800646d 	.word	0x0800646d
 80064a8:	0800646d 	.word	0x0800646d
 80064ac:	0800646d 	.word	0x0800646d
 80064b0:	080065fd 	.word	0x080065fd
 80064b4:	08006521 	.word	0x08006521
 80064b8:	080065df 	.word	0x080065df
 80064bc:	0800646d 	.word	0x0800646d
 80064c0:	0800646d 	.word	0x0800646d
 80064c4:	0800661f 	.word	0x0800661f
 80064c8:	0800646d 	.word	0x0800646d
 80064cc:	08006521 	.word	0x08006521
 80064d0:	0800646d 	.word	0x0800646d
 80064d4:	0800646d 	.word	0x0800646d
 80064d8:	080065e7 	.word	0x080065e7
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	1d1a      	adds	r2, r3, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	602a      	str	r2, [r5, #0]
 80064e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0a3      	b.n	8006638 <_printf_i+0x1f4>
 80064f0:	6820      	ldr	r0, [r4, #0]
 80064f2:	6829      	ldr	r1, [r5, #0]
 80064f4:	0606      	lsls	r6, r0, #24
 80064f6:	f101 0304 	add.w	r3, r1, #4
 80064fa:	d50a      	bpl.n	8006512 <_printf_i+0xce>
 80064fc:	680e      	ldr	r6, [r1, #0]
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	2e00      	cmp	r6, #0
 8006502:	da03      	bge.n	800650c <_printf_i+0xc8>
 8006504:	232d      	movs	r3, #45	; 0x2d
 8006506:	4276      	negs	r6, r6
 8006508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650c:	485e      	ldr	r0, [pc, #376]	; (8006688 <_printf_i+0x244>)
 800650e:	230a      	movs	r3, #10
 8006510:	e019      	b.n	8006546 <_printf_i+0x102>
 8006512:	680e      	ldr	r6, [r1, #0]
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	f010 0f40 	tst.w	r0, #64	; 0x40
 800651a:	bf18      	it	ne
 800651c:	b236      	sxthne	r6, r6
 800651e:	e7ef      	b.n	8006500 <_printf_i+0xbc>
 8006520:	682b      	ldr	r3, [r5, #0]
 8006522:	6820      	ldr	r0, [r4, #0]
 8006524:	1d19      	adds	r1, r3, #4
 8006526:	6029      	str	r1, [r5, #0]
 8006528:	0601      	lsls	r1, r0, #24
 800652a:	d501      	bpl.n	8006530 <_printf_i+0xec>
 800652c:	681e      	ldr	r6, [r3, #0]
 800652e:	e002      	b.n	8006536 <_printf_i+0xf2>
 8006530:	0646      	lsls	r6, r0, #25
 8006532:	d5fb      	bpl.n	800652c <_printf_i+0xe8>
 8006534:	881e      	ldrh	r6, [r3, #0]
 8006536:	4854      	ldr	r0, [pc, #336]	; (8006688 <_printf_i+0x244>)
 8006538:	2f6f      	cmp	r7, #111	; 0x6f
 800653a:	bf0c      	ite	eq
 800653c:	2308      	moveq	r3, #8
 800653e:	230a      	movne	r3, #10
 8006540:	2100      	movs	r1, #0
 8006542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006546:	6865      	ldr	r5, [r4, #4]
 8006548:	60a5      	str	r5, [r4, #8]
 800654a:	2d00      	cmp	r5, #0
 800654c:	bfa2      	ittt	ge
 800654e:	6821      	ldrge	r1, [r4, #0]
 8006550:	f021 0104 	bicge.w	r1, r1, #4
 8006554:	6021      	strge	r1, [r4, #0]
 8006556:	b90e      	cbnz	r6, 800655c <_printf_i+0x118>
 8006558:	2d00      	cmp	r5, #0
 800655a:	d04d      	beq.n	80065f8 <_printf_i+0x1b4>
 800655c:	4615      	mov	r5, r2
 800655e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006562:	fb03 6711 	mls	r7, r3, r1, r6
 8006566:	5dc7      	ldrb	r7, [r0, r7]
 8006568:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800656c:	4637      	mov	r7, r6
 800656e:	42bb      	cmp	r3, r7
 8006570:	460e      	mov	r6, r1
 8006572:	d9f4      	bls.n	800655e <_printf_i+0x11a>
 8006574:	2b08      	cmp	r3, #8
 8006576:	d10b      	bne.n	8006590 <_printf_i+0x14c>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	07de      	lsls	r6, r3, #31
 800657c:	d508      	bpl.n	8006590 <_printf_i+0x14c>
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	6861      	ldr	r1, [r4, #4]
 8006582:	4299      	cmp	r1, r3
 8006584:	bfde      	ittt	le
 8006586:	2330      	movle	r3, #48	; 0x30
 8006588:	f805 3c01 	strble.w	r3, [r5, #-1]
 800658c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006590:	1b52      	subs	r2, r2, r5
 8006592:	6122      	str	r2, [r4, #16]
 8006594:	f8cd a000 	str.w	sl, [sp]
 8006598:	464b      	mov	r3, r9
 800659a:	aa03      	add	r2, sp, #12
 800659c:	4621      	mov	r1, r4
 800659e:	4640      	mov	r0, r8
 80065a0:	f7ff fee2 	bl	8006368 <_printf_common>
 80065a4:	3001      	adds	r0, #1
 80065a6:	d14c      	bne.n	8006642 <_printf_i+0x1fe>
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	b004      	add	sp, #16
 80065ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b2:	4835      	ldr	r0, [pc, #212]	; (8006688 <_printf_i+0x244>)
 80065b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065b8:	6829      	ldr	r1, [r5, #0]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80065c0:	6029      	str	r1, [r5, #0]
 80065c2:	061d      	lsls	r5, r3, #24
 80065c4:	d514      	bpl.n	80065f0 <_printf_i+0x1ac>
 80065c6:	07df      	lsls	r7, r3, #31
 80065c8:	bf44      	itt	mi
 80065ca:	f043 0320 	orrmi.w	r3, r3, #32
 80065ce:	6023      	strmi	r3, [r4, #0]
 80065d0:	b91e      	cbnz	r6, 80065da <_printf_i+0x196>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f023 0320 	bic.w	r3, r3, #32
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	2310      	movs	r3, #16
 80065dc:	e7b0      	b.n	8006540 <_printf_i+0xfc>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f043 0320 	orr.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2378      	movs	r3, #120	; 0x78
 80065e8:	4828      	ldr	r0, [pc, #160]	; (800668c <_printf_i+0x248>)
 80065ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065ee:	e7e3      	b.n	80065b8 <_printf_i+0x174>
 80065f0:	0659      	lsls	r1, r3, #25
 80065f2:	bf48      	it	mi
 80065f4:	b2b6      	uxthmi	r6, r6
 80065f6:	e7e6      	b.n	80065c6 <_printf_i+0x182>
 80065f8:	4615      	mov	r5, r2
 80065fa:	e7bb      	b.n	8006574 <_printf_i+0x130>
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	6826      	ldr	r6, [r4, #0]
 8006600:	6961      	ldr	r1, [r4, #20]
 8006602:	1d18      	adds	r0, r3, #4
 8006604:	6028      	str	r0, [r5, #0]
 8006606:	0635      	lsls	r5, r6, #24
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	d501      	bpl.n	8006610 <_printf_i+0x1cc>
 800660c:	6019      	str	r1, [r3, #0]
 800660e:	e002      	b.n	8006616 <_printf_i+0x1d2>
 8006610:	0670      	lsls	r0, r6, #25
 8006612:	d5fb      	bpl.n	800660c <_printf_i+0x1c8>
 8006614:	8019      	strh	r1, [r3, #0]
 8006616:	2300      	movs	r3, #0
 8006618:	6123      	str	r3, [r4, #16]
 800661a:	4615      	mov	r5, r2
 800661c:	e7ba      	b.n	8006594 <_printf_i+0x150>
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	1d1a      	adds	r2, r3, #4
 8006622:	602a      	str	r2, [r5, #0]
 8006624:	681d      	ldr	r5, [r3, #0]
 8006626:	6862      	ldr	r2, [r4, #4]
 8006628:	2100      	movs	r1, #0
 800662a:	4628      	mov	r0, r5
 800662c:	f7f9 fde0 	bl	80001f0 <memchr>
 8006630:	b108      	cbz	r0, 8006636 <_printf_i+0x1f2>
 8006632:	1b40      	subs	r0, r0, r5
 8006634:	6060      	str	r0, [r4, #4]
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	2300      	movs	r3, #0
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	e7a8      	b.n	8006594 <_printf_i+0x150>
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	462a      	mov	r2, r5
 8006646:	4649      	mov	r1, r9
 8006648:	4640      	mov	r0, r8
 800664a:	47d0      	blx	sl
 800664c:	3001      	adds	r0, #1
 800664e:	d0ab      	beq.n	80065a8 <_printf_i+0x164>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	079b      	lsls	r3, r3, #30
 8006654:	d413      	bmi.n	800667e <_printf_i+0x23a>
 8006656:	68e0      	ldr	r0, [r4, #12]
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	4298      	cmp	r0, r3
 800665c:	bfb8      	it	lt
 800665e:	4618      	movlt	r0, r3
 8006660:	e7a4      	b.n	80065ac <_printf_i+0x168>
 8006662:	2301      	movs	r3, #1
 8006664:	4632      	mov	r2, r6
 8006666:	4649      	mov	r1, r9
 8006668:	4640      	mov	r0, r8
 800666a:	47d0      	blx	sl
 800666c:	3001      	adds	r0, #1
 800666e:	d09b      	beq.n	80065a8 <_printf_i+0x164>
 8006670:	3501      	adds	r5, #1
 8006672:	68e3      	ldr	r3, [r4, #12]
 8006674:	9903      	ldr	r1, [sp, #12]
 8006676:	1a5b      	subs	r3, r3, r1
 8006678:	42ab      	cmp	r3, r5
 800667a:	dcf2      	bgt.n	8006662 <_printf_i+0x21e>
 800667c:	e7eb      	b.n	8006656 <_printf_i+0x212>
 800667e:	2500      	movs	r5, #0
 8006680:	f104 0619 	add.w	r6, r4, #25
 8006684:	e7f5      	b.n	8006672 <_printf_i+0x22e>
 8006686:	bf00      	nop
 8006688:	08008be6 	.word	0x08008be6
 800668c:	08008bf7 	.word	0x08008bf7

08006690 <siprintf>:
 8006690:	b40e      	push	{r1, r2, r3}
 8006692:	b500      	push	{lr}
 8006694:	b09c      	sub	sp, #112	; 0x70
 8006696:	ab1d      	add	r3, sp, #116	; 0x74
 8006698:	9002      	str	r0, [sp, #8]
 800669a:	9006      	str	r0, [sp, #24]
 800669c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066a0:	4809      	ldr	r0, [pc, #36]	; (80066c8 <siprintf+0x38>)
 80066a2:	9107      	str	r1, [sp, #28]
 80066a4:	9104      	str	r1, [sp, #16]
 80066a6:	4909      	ldr	r1, [pc, #36]	; (80066cc <siprintf+0x3c>)
 80066a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ac:	9105      	str	r1, [sp, #20]
 80066ae:	6800      	ldr	r0, [r0, #0]
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	a902      	add	r1, sp, #8
 80066b4:	f001 fb74 	bl	8007da0 <_svfiprintf_r>
 80066b8:	9b02      	ldr	r3, [sp, #8]
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	b01c      	add	sp, #112	; 0x70
 80066c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80066c4:	b003      	add	sp, #12
 80066c6:	4770      	bx	lr
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	ffff0208 	.word	0xffff0208

080066d0 <quorem>:
 80066d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	6903      	ldr	r3, [r0, #16]
 80066d6:	690c      	ldr	r4, [r1, #16]
 80066d8:	42a3      	cmp	r3, r4
 80066da:	4607      	mov	r7, r0
 80066dc:	f2c0 8081 	blt.w	80067e2 <quorem+0x112>
 80066e0:	3c01      	subs	r4, #1
 80066e2:	f101 0814 	add.w	r8, r1, #20
 80066e6:	f100 0514 	add.w	r5, r0, #20
 80066ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f8:	3301      	adds	r3, #1
 80066fa:	429a      	cmp	r2, r3
 80066fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006704:	fbb2 f6f3 	udiv	r6, r2, r3
 8006708:	d331      	bcc.n	800676e <quorem+0x9e>
 800670a:	f04f 0e00 	mov.w	lr, #0
 800670e:	4640      	mov	r0, r8
 8006710:	46ac      	mov	ip, r5
 8006712:	46f2      	mov	sl, lr
 8006714:	f850 2b04 	ldr.w	r2, [r0], #4
 8006718:	b293      	uxth	r3, r2
 800671a:	fb06 e303 	mla	r3, r6, r3, lr
 800671e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006722:	b29b      	uxth	r3, r3
 8006724:	ebaa 0303 	sub.w	r3, sl, r3
 8006728:	f8dc a000 	ldr.w	sl, [ip]
 800672c:	0c12      	lsrs	r2, r2, #16
 800672e:	fa13 f38a 	uxtah	r3, r3, sl
 8006732:	fb06 e202 	mla	r2, r6, r2, lr
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	9b00      	ldr	r3, [sp, #0]
 800673a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800673e:	b292      	uxth	r2, r2
 8006740:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006744:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006748:	f8bd 3000 	ldrh.w	r3, [sp]
 800674c:	4581      	cmp	r9, r0
 800674e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006752:	f84c 3b04 	str.w	r3, [ip], #4
 8006756:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800675a:	d2db      	bcs.n	8006714 <quorem+0x44>
 800675c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006760:	b92b      	cbnz	r3, 800676e <quorem+0x9e>
 8006762:	9b01      	ldr	r3, [sp, #4]
 8006764:	3b04      	subs	r3, #4
 8006766:	429d      	cmp	r5, r3
 8006768:	461a      	mov	r2, r3
 800676a:	d32e      	bcc.n	80067ca <quorem+0xfa>
 800676c:	613c      	str	r4, [r7, #16]
 800676e:	4638      	mov	r0, r7
 8006770:	f001 f8c4 	bl	80078fc <__mcmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	db24      	blt.n	80067c2 <quorem+0xf2>
 8006778:	3601      	adds	r6, #1
 800677a:	4628      	mov	r0, r5
 800677c:	f04f 0c00 	mov.w	ip, #0
 8006780:	f858 2b04 	ldr.w	r2, [r8], #4
 8006784:	f8d0 e000 	ldr.w	lr, [r0]
 8006788:	b293      	uxth	r3, r2
 800678a:	ebac 0303 	sub.w	r3, ip, r3
 800678e:	0c12      	lsrs	r2, r2, #16
 8006790:	fa13 f38e 	uxtah	r3, r3, lr
 8006794:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006798:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067a2:	45c1      	cmp	r9, r8
 80067a4:	f840 3b04 	str.w	r3, [r0], #4
 80067a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067ac:	d2e8      	bcs.n	8006780 <quorem+0xb0>
 80067ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067b6:	b922      	cbnz	r2, 80067c2 <quorem+0xf2>
 80067b8:	3b04      	subs	r3, #4
 80067ba:	429d      	cmp	r5, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	d30a      	bcc.n	80067d6 <quorem+0x106>
 80067c0:	613c      	str	r4, [r7, #16]
 80067c2:	4630      	mov	r0, r6
 80067c4:	b003      	add	sp, #12
 80067c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	3b04      	subs	r3, #4
 80067ce:	2a00      	cmp	r2, #0
 80067d0:	d1cc      	bne.n	800676c <quorem+0x9c>
 80067d2:	3c01      	subs	r4, #1
 80067d4:	e7c7      	b.n	8006766 <quorem+0x96>
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	3b04      	subs	r3, #4
 80067da:	2a00      	cmp	r2, #0
 80067dc:	d1f0      	bne.n	80067c0 <quorem+0xf0>
 80067de:	3c01      	subs	r4, #1
 80067e0:	e7eb      	b.n	80067ba <quorem+0xea>
 80067e2:	2000      	movs	r0, #0
 80067e4:	e7ee      	b.n	80067c4 <quorem+0xf4>
	...

080067e8 <_dtoa_r>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	ed2d 8b04 	vpush	{d8-d9}
 80067f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067f2:	b093      	sub	sp, #76	; 0x4c
 80067f4:	4604      	mov	r4, r0
 80067f6:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 80067fa:	4616      	mov	r6, r2
 80067fc:	461f      	mov	r7, r3
 80067fe:	4692      	mov	sl, r2
 8006800:	469b      	mov	fp, r3
 8006802:	b975      	cbnz	r5, 8006822 <_dtoa_r+0x3a>
 8006804:	2010      	movs	r0, #16
 8006806:	f000 fde1 	bl	80073cc <malloc>
 800680a:	4602      	mov	r2, r0
 800680c:	6260      	str	r0, [r4, #36]	; 0x24
 800680e:	b920      	cbnz	r0, 800681a <_dtoa_r+0x32>
 8006810:	4ba9      	ldr	r3, [pc, #676]	; (8006ab8 <_dtoa_r+0x2d0>)
 8006812:	21ea      	movs	r1, #234	; 0xea
 8006814:	48a9      	ldr	r0, [pc, #676]	; (8006abc <_dtoa_r+0x2d4>)
 8006816:	f001 fbd3 	bl	8007fc0 <__assert_func>
 800681a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800681e:	6005      	str	r5, [r0, #0]
 8006820:	60c5      	str	r5, [r0, #12]
 8006822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006824:	6819      	ldr	r1, [r3, #0]
 8006826:	b151      	cbz	r1, 800683e <_dtoa_r+0x56>
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	604a      	str	r2, [r1, #4]
 800682c:	2301      	movs	r3, #1
 800682e:	4093      	lsls	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
 8006832:	4620      	mov	r0, r4
 8006834:	f000 fe20 	bl	8007478 <_Bfree>
 8006838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	1e3b      	subs	r3, r7, #0
 8006840:	bfaa      	itet	ge
 8006842:	2300      	movge	r3, #0
 8006844:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006848:	f8c8 3000 	strge.w	r3, [r8]
 800684c:	4b9c      	ldr	r3, [pc, #624]	; (8006ac0 <_dtoa_r+0x2d8>)
 800684e:	bfbc      	itt	lt
 8006850:	2201      	movlt	r2, #1
 8006852:	f8c8 2000 	strlt.w	r2, [r8]
 8006856:	ea33 030b 	bics.w	r3, r3, fp
 800685a:	d11b      	bne.n	8006894 <_dtoa_r+0xac>
 800685c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800685e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006868:	4333      	orrs	r3, r6
 800686a:	f000 8596 	beq.w	800739a <_dtoa_r+0xbb2>
 800686e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006870:	b963      	cbnz	r3, 800688c <_dtoa_r+0xa4>
 8006872:	4b94      	ldr	r3, [pc, #592]	; (8006ac4 <_dtoa_r+0x2dc>)
 8006874:	e022      	b.n	80068bc <_dtoa_r+0xd4>
 8006876:	4b94      	ldr	r3, [pc, #592]	; (8006ac8 <_dtoa_r+0x2e0>)
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	3308      	adds	r3, #8
 800687c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	9804      	ldr	r0, [sp, #16]
 8006882:	b013      	add	sp, #76	; 0x4c
 8006884:	ecbd 8b04 	vpop	{d8-d9}
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	4b8d      	ldr	r3, [pc, #564]	; (8006ac4 <_dtoa_r+0x2dc>)
 800688e:	9304      	str	r3, [sp, #16]
 8006890:	3303      	adds	r3, #3
 8006892:	e7f3      	b.n	800687c <_dtoa_r+0x94>
 8006894:	2200      	movs	r2, #0
 8006896:	2300      	movs	r3, #0
 8006898:	4650      	mov	r0, sl
 800689a:	4659      	mov	r1, fp
 800689c:	f7fa f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80068a0:	ec4b ab19 	vmov	d9, sl, fp
 80068a4:	4680      	mov	r8, r0
 80068a6:	b158      	cbz	r0, 80068c0 <_dtoa_r+0xd8>
 80068a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068aa:	2301      	movs	r3, #1
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 856f 	beq.w	8007394 <_dtoa_r+0xbac>
 80068b6:	4885      	ldr	r0, [pc, #532]	; (8006acc <_dtoa_r+0x2e4>)
 80068b8:	6018      	str	r0, [r3, #0]
 80068ba:	1e43      	subs	r3, r0, #1
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	e7df      	b.n	8006880 <_dtoa_r+0x98>
 80068c0:	ab10      	add	r3, sp, #64	; 0x40
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	ab11      	add	r3, sp, #68	; 0x44
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4652      	mov	r2, sl
 80068ca:	465b      	mov	r3, fp
 80068cc:	4620      	mov	r0, r4
 80068ce:	f001 f8bb 	bl	8007a48 <__d2b>
 80068d2:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80068d6:	ee08 0a10 	vmov	s16, r0
 80068da:	2d00      	cmp	r5, #0
 80068dc:	f000 8084 	beq.w	80069e8 <_dtoa_r+0x200>
 80068e0:	ee19 3a90 	vmov	r3, s19
 80068e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068e8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80068ec:	4656      	mov	r6, sl
 80068ee:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80068f2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068f6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80068fa:	4b75      	ldr	r3, [pc, #468]	; (8006ad0 <_dtoa_r+0x2e8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	f7f9 fcc9 	bl	8000298 <__aeabi_dsub>
 8006906:	a366      	add	r3, pc, #408	; (adr r3, 8006aa0 <_dtoa_r+0x2b8>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7f9 fe7c 	bl	8000608 <__aeabi_dmul>
 8006910:	a365      	add	r3, pc, #404	; (adr r3, 8006aa8 <_dtoa_r+0x2c0>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fcc1 	bl	800029c <__adddf3>
 800691a:	4606      	mov	r6, r0
 800691c:	4628      	mov	r0, r5
 800691e:	460f      	mov	r7, r1
 8006920:	f7f9 fe08 	bl	8000534 <__aeabi_i2d>
 8006924:	a362      	add	r3, pc, #392	; (adr r3, 8006ab0 <_dtoa_r+0x2c8>)
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f7f9 fe6d 	bl	8000608 <__aeabi_dmul>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7f9 fcb1 	bl	800029c <__adddf3>
 800693a:	4606      	mov	r6, r0
 800693c:	460f      	mov	r7, r1
 800693e:	f7fa f913 	bl	8000b68 <__aeabi_d2iz>
 8006942:	2200      	movs	r2, #0
 8006944:	9003      	str	r0, [sp, #12]
 8006946:	2300      	movs	r3, #0
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7fa f8ce 	bl	8000aec <__aeabi_dcmplt>
 8006950:	b150      	cbz	r0, 8006968 <_dtoa_r+0x180>
 8006952:	9803      	ldr	r0, [sp, #12]
 8006954:	f7f9 fdee 	bl	8000534 <__aeabi_i2d>
 8006958:	4632      	mov	r2, r6
 800695a:	463b      	mov	r3, r7
 800695c:	f7fa f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006960:	b910      	cbnz	r0, 8006968 <_dtoa_r+0x180>
 8006962:	9b03      	ldr	r3, [sp, #12]
 8006964:	3b01      	subs	r3, #1
 8006966:	9303      	str	r3, [sp, #12]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	2b16      	cmp	r3, #22
 800696c:	d85a      	bhi.n	8006a24 <_dtoa_r+0x23c>
 800696e:	9a03      	ldr	r2, [sp, #12]
 8006970:	4b58      	ldr	r3, [pc, #352]	; (8006ad4 <_dtoa_r+0x2ec>)
 8006972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	ec51 0b19 	vmov	r0, r1, d9
 800697e:	f7fa f8b5 	bl	8000aec <__aeabi_dcmplt>
 8006982:	2800      	cmp	r0, #0
 8006984:	d050      	beq.n	8006a28 <_dtoa_r+0x240>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3b01      	subs	r3, #1
 800698a:	9303      	str	r3, [sp, #12]
 800698c:	2300      	movs	r3, #0
 800698e:	930c      	str	r3, [sp, #48]	; 0x30
 8006990:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006992:	1b5d      	subs	r5, r3, r5
 8006994:	1e6b      	subs	r3, r5, #1
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	bf45      	ittet	mi
 800699a:	f1c5 0301 	rsbmi	r3, r5, #1
 800699e:	9307      	strmi	r3, [sp, #28]
 80069a0:	2300      	movpl	r3, #0
 80069a2:	2300      	movmi	r3, #0
 80069a4:	bf4c      	ite	mi
 80069a6:	9308      	strmi	r3, [sp, #32]
 80069a8:	9307      	strpl	r3, [sp, #28]
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db3d      	blt.n	8006a2c <_dtoa_r+0x244>
 80069b0:	9b08      	ldr	r3, [sp, #32]
 80069b2:	9a03      	ldr	r2, [sp, #12]
 80069b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80069b6:	4413      	add	r3, r2
 80069b8:	9308      	str	r3, [sp, #32]
 80069ba:	2300      	movs	r3, #0
 80069bc:	9309      	str	r3, [sp, #36]	; 0x24
 80069be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069c0:	2b09      	cmp	r3, #9
 80069c2:	f200 808b 	bhi.w	8006adc <_dtoa_r+0x2f4>
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	bfc4      	itt	gt
 80069ca:	3b04      	subgt	r3, #4
 80069cc:	9320      	strgt	r3, [sp, #128]	; 0x80
 80069ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80069d0:	f1a3 0302 	sub.w	r3, r3, #2
 80069d4:	bfcc      	ite	gt
 80069d6:	2500      	movgt	r5, #0
 80069d8:	2501      	movle	r5, #1
 80069da:	2b03      	cmp	r3, #3
 80069dc:	f200 8089 	bhi.w	8006af2 <_dtoa_r+0x30a>
 80069e0:	e8df f003 	tbb	[pc, r3]
 80069e4:	59383a2d 	.word	0x59383a2d
 80069e8:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80069ec:	441d      	add	r5, r3
 80069ee:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	bfc1      	itttt	gt
 80069f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069fa:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80069fe:	fa0b f303 	lslgt.w	r3, fp, r3
 8006a02:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a06:	bfda      	itte	le
 8006a08:	f1c3 0320 	rsble	r3, r3, #32
 8006a0c:	fa06 f003 	lslle.w	r0, r6, r3
 8006a10:	4318      	orrgt	r0, r3
 8006a12:	f7f9 fd7f 	bl	8000514 <__aeabi_ui2d>
 8006a16:	2301      	movs	r3, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006a1e:	3d01      	subs	r5, #1
 8006a20:	930e      	str	r3, [sp, #56]	; 0x38
 8006a22:	e76a      	b.n	80068fa <_dtoa_r+0x112>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e7b2      	b.n	800698e <_dtoa_r+0x1a6>
 8006a28:	900c      	str	r0, [sp, #48]	; 0x30
 8006a2a:	e7b1      	b.n	8006990 <_dtoa_r+0x1a8>
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	9a03      	ldr	r2, [sp, #12]
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	9307      	str	r3, [sp, #28]
 8006a34:	4253      	negs	r3, r2
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
 8006a38:	2300      	movs	r3, #0
 8006a3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a3c:	e7bf      	b.n	80069be <_dtoa_r+0x1d6>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	930a      	str	r3, [sp, #40]	; 0x28
 8006a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	dc57      	bgt.n	8006af8 <_dtoa_r+0x310>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	9221      	str	r2, [sp, #132]	; 0x84
 8006a52:	e00c      	b.n	8006a6e <_dtoa_r+0x286>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e7f3      	b.n	8006a40 <_dtoa_r+0x258>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	4413      	add	r3, r2
 8006a62:	9305      	str	r3, [sp, #20]
 8006a64:	3301      	adds	r3, #1
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	9306      	str	r3, [sp, #24]
 8006a6a:	bfb8      	it	lt
 8006a6c:	2301      	movlt	r3, #1
 8006a6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a70:	2200      	movs	r2, #0
 8006a72:	6042      	str	r2, [r0, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	f102 0614 	add.w	r6, r2, #20
 8006a7a:	429e      	cmp	r6, r3
 8006a7c:	6841      	ldr	r1, [r0, #4]
 8006a7e:	d93f      	bls.n	8006b00 <_dtoa_r+0x318>
 8006a80:	4620      	mov	r0, r4
 8006a82:	f000 fcb9 	bl	80073f8 <_Balloc>
 8006a86:	9004      	str	r0, [sp, #16]
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d13d      	bne.n	8006b08 <_dtoa_r+0x320>
 8006a8c:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <_dtoa_r+0x2f0>)
 8006a8e:	4602      	mov	r2, r0
 8006a90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a94:	e6be      	b.n	8006814 <_dtoa_r+0x2c>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e7df      	b.n	8006a5a <_dtoa_r+0x272>
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w
 8006aa0:	636f4361 	.word	0x636f4361
 8006aa4:	3fd287a7 	.word	0x3fd287a7
 8006aa8:	8b60c8b3 	.word	0x8b60c8b3
 8006aac:	3fc68a28 	.word	0x3fc68a28
 8006ab0:	509f79fb 	.word	0x509f79fb
 8006ab4:	3fd34413 	.word	0x3fd34413
 8006ab8:	08008c15 	.word	0x08008c15
 8006abc:	08008c2c 	.word	0x08008c2c
 8006ac0:	7ff00000 	.word	0x7ff00000
 8006ac4:	08008c11 	.word	0x08008c11
 8006ac8:	08008c08 	.word	0x08008c08
 8006acc:	08008be5 	.word	0x08008be5
 8006ad0:	3ff80000 	.word	0x3ff80000
 8006ad4:	08008d20 	.word	0x08008d20
 8006ad8:	08008c87 	.word	0x08008c87
 8006adc:	2501      	movs	r5, #1
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9320      	str	r3, [sp, #128]	; 0x80
 8006ae2:	950a      	str	r5, [sp, #40]	; 0x28
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	2312      	movs	r3, #18
 8006af0:	e7ae      	b.n	8006a50 <_dtoa_r+0x268>
 8006af2:	2301      	movs	r3, #1
 8006af4:	930a      	str	r3, [sp, #40]	; 0x28
 8006af6:	e7f5      	b.n	8006ae4 <_dtoa_r+0x2fc>
 8006af8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006afa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006afe:	e7b6      	b.n	8006a6e <_dtoa_r+0x286>
 8006b00:	3101      	adds	r1, #1
 8006b02:	6041      	str	r1, [r0, #4]
 8006b04:	0052      	lsls	r2, r2, #1
 8006b06:	e7b6      	b.n	8006a76 <_dtoa_r+0x28e>
 8006b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b0a:	9a04      	ldr	r2, [sp, #16]
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	9b06      	ldr	r3, [sp, #24]
 8006b10:	2b0e      	cmp	r3, #14
 8006b12:	f200 809d 	bhi.w	8006c50 <_dtoa_r+0x468>
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	f000 809a 	beq.w	8006c50 <_dtoa_r+0x468>
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd32      	ble.n	8006b88 <_dtoa_r+0x3a0>
 8006b22:	4ab7      	ldr	r2, [pc, #732]	; (8006e00 <_dtoa_r+0x618>)
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	05d8      	lsls	r0, r3, #23
 8006b34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006b38:	d516      	bpl.n	8006b68 <_dtoa_r+0x380>
 8006b3a:	4bb2      	ldr	r3, [pc, #712]	; (8006e04 <_dtoa_r+0x61c>)
 8006b3c:	ec51 0b19 	vmov	r0, r1, d9
 8006b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b44:	f7f9 fe8a 	bl	800085c <__aeabi_ddiv>
 8006b48:	f007 070f 	and.w	r7, r7, #15
 8006b4c:	4682      	mov	sl, r0
 8006b4e:	468b      	mov	fp, r1
 8006b50:	2503      	movs	r5, #3
 8006b52:	4eac      	ldr	r6, [pc, #688]	; (8006e04 <_dtoa_r+0x61c>)
 8006b54:	b957      	cbnz	r7, 8006b6c <_dtoa_r+0x384>
 8006b56:	4642      	mov	r2, r8
 8006b58:	464b      	mov	r3, r9
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	4659      	mov	r1, fp
 8006b5e:	f7f9 fe7d 	bl	800085c <__aeabi_ddiv>
 8006b62:	4682      	mov	sl, r0
 8006b64:	468b      	mov	fp, r1
 8006b66:	e028      	b.n	8006bba <_dtoa_r+0x3d2>
 8006b68:	2502      	movs	r5, #2
 8006b6a:	e7f2      	b.n	8006b52 <_dtoa_r+0x36a>
 8006b6c:	07f9      	lsls	r1, r7, #31
 8006b6e:	d508      	bpl.n	8006b82 <_dtoa_r+0x39a>
 8006b70:	4640      	mov	r0, r8
 8006b72:	4649      	mov	r1, r9
 8006b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b78:	f7f9 fd46 	bl	8000608 <__aeabi_dmul>
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4689      	mov	r9, r1
 8006b82:	107f      	asrs	r7, r7, #1
 8006b84:	3608      	adds	r6, #8
 8006b86:	e7e5      	b.n	8006b54 <_dtoa_r+0x36c>
 8006b88:	f000 809b 	beq.w	8006cc2 <_dtoa_r+0x4da>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	4f9d      	ldr	r7, [pc, #628]	; (8006e04 <_dtoa_r+0x61c>)
 8006b90:	425e      	negs	r6, r3
 8006b92:	4b9b      	ldr	r3, [pc, #620]	; (8006e00 <_dtoa_r+0x618>)
 8006b94:	f006 020f 	and.w	r2, r6, #15
 8006b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	ec51 0b19 	vmov	r0, r1, d9
 8006ba4:	f7f9 fd30 	bl	8000608 <__aeabi_dmul>
 8006ba8:	1136      	asrs	r6, r6, #4
 8006baa:	4682      	mov	sl, r0
 8006bac:	468b      	mov	fp, r1
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2502      	movs	r5, #2
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	d17a      	bne.n	8006cac <_dtoa_r+0x4c4>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1d3      	bne.n	8006b62 <_dtoa_r+0x37a>
 8006bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8082 	beq.w	8006cc6 <_dtoa_r+0x4de>
 8006bc2:	4b91      	ldr	r3, [pc, #580]	; (8006e08 <_dtoa_r+0x620>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4650      	mov	r0, sl
 8006bc8:	4659      	mov	r1, fp
 8006bca:	f7f9 ff8f 	bl	8000aec <__aeabi_dcmplt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d079      	beq.n	8006cc6 <_dtoa_r+0x4de>
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d076      	beq.n	8006cc6 <_dtoa_r+0x4de>
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd36      	ble.n	8006c4c <_dtoa_r+0x464>
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	1e5f      	subs	r7, r3, #1
 8006be6:	2200      	movs	r2, #0
 8006be8:	4b88      	ldr	r3, [pc, #544]	; (8006e0c <_dtoa_r+0x624>)
 8006bea:	f7f9 fd0d 	bl	8000608 <__aeabi_dmul>
 8006bee:	9e05      	ldr	r6, [sp, #20]
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	468b      	mov	fp, r1
 8006bf4:	3501      	adds	r5, #1
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f7f9 fc9c 	bl	8000534 <__aeabi_i2d>
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	465b      	mov	r3, fp
 8006c00:	f7f9 fd02 	bl	8000608 <__aeabi_dmul>
 8006c04:	4b82      	ldr	r3, [pc, #520]	; (8006e10 <_dtoa_r+0x628>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	f7f9 fb48 	bl	800029c <__adddf3>
 8006c0c:	46d0      	mov	r8, sl
 8006c0e:	46d9      	mov	r9, fp
 8006c10:	4682      	mov	sl, r0
 8006c12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006c16:	2e00      	cmp	r6, #0
 8006c18:	d158      	bne.n	8006ccc <_dtoa_r+0x4e4>
 8006c1a:	4b7e      	ldr	r3, [pc, #504]	; (8006e14 <_dtoa_r+0x62c>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7f9 fb39 	bl	8000298 <__aeabi_dsub>
 8006c26:	4652      	mov	r2, sl
 8006c28:	465b      	mov	r3, fp
 8006c2a:	4680      	mov	r8, r0
 8006c2c:	4689      	mov	r9, r1
 8006c2e:	f7f9 ff7b 	bl	8000b28 <__aeabi_dcmpgt>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f040 8295 	bne.w	8007162 <_dtoa_r+0x97a>
 8006c38:	4652      	mov	r2, sl
 8006c3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c3e:	4640      	mov	r0, r8
 8006c40:	4649      	mov	r1, r9
 8006c42:	f7f9 ff53 	bl	8000aec <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f040 8289 	bne.w	800715e <_dtoa_r+0x976>
 8006c4c:	ec5b ab19 	vmov	sl, fp, d9
 8006c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f2c0 8148 	blt.w	8006ee8 <_dtoa_r+0x700>
 8006c58:	9a03      	ldr	r2, [sp, #12]
 8006c5a:	2a0e      	cmp	r2, #14
 8006c5c:	f300 8144 	bgt.w	8006ee8 <_dtoa_r+0x700>
 8006c60:	4b67      	ldr	r3, [pc, #412]	; (8006e00 <_dtoa_r+0x618>)
 8006c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f280 80d5 	bge.w	8006e1c <_dtoa_r+0x634>
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f300 80d1 	bgt.w	8006e1c <_dtoa_r+0x634>
 8006c7a:	f040 826f 	bne.w	800715c <_dtoa_r+0x974>
 8006c7e:	4b65      	ldr	r3, [pc, #404]	; (8006e14 <_dtoa_r+0x62c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7f9 fcbf 	bl	8000608 <__aeabi_dmul>
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	f7f9 ff41 	bl	8000b14 <__aeabi_dcmpge>
 8006c92:	9e06      	ldr	r6, [sp, #24]
 8006c94:	4637      	mov	r7, r6
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f040 8245 	bne.w	8007126 <_dtoa_r+0x93e>
 8006c9c:	9d04      	ldr	r5, [sp, #16]
 8006c9e:	2331      	movs	r3, #49	; 0x31
 8006ca0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	e240      	b.n	800712e <_dtoa_r+0x946>
 8006cac:	07f2      	lsls	r2, r6, #31
 8006cae:	d505      	bpl.n	8006cbc <_dtoa_r+0x4d4>
 8006cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb4:	f7f9 fca8 	bl	8000608 <__aeabi_dmul>
 8006cb8:	3501      	adds	r5, #1
 8006cba:	2301      	movs	r3, #1
 8006cbc:	1076      	asrs	r6, r6, #1
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	e777      	b.n	8006bb2 <_dtoa_r+0x3ca>
 8006cc2:	2502      	movs	r5, #2
 8006cc4:	e779      	b.n	8006bba <_dtoa_r+0x3d2>
 8006cc6:	9f03      	ldr	r7, [sp, #12]
 8006cc8:	9e06      	ldr	r6, [sp, #24]
 8006cca:	e794      	b.n	8006bf6 <_dtoa_r+0x40e>
 8006ccc:	9904      	ldr	r1, [sp, #16]
 8006cce:	4b4c      	ldr	r3, [pc, #304]	; (8006e00 <_dtoa_r+0x618>)
 8006cd0:	4431      	add	r1, r6
 8006cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8006cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	d043      	beq.n	8006d6a <_dtoa_r+0x582>
 8006ce2:	494d      	ldr	r1, [pc, #308]	; (8006e18 <_dtoa_r+0x630>)
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	f7f9 fdb9 	bl	800085c <__aeabi_ddiv>
 8006cea:	4652      	mov	r2, sl
 8006cec:	465b      	mov	r3, fp
 8006cee:	f7f9 fad3 	bl	8000298 <__aeabi_dsub>
 8006cf2:	9d04      	ldr	r5, [sp, #16]
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	468b      	mov	fp, r1
 8006cf8:	4649      	mov	r1, r9
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	f7f9 ff34 	bl	8000b68 <__aeabi_d2iz>
 8006d00:	4606      	mov	r6, r0
 8006d02:	f7f9 fc17 	bl	8000534 <__aeabi_i2d>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4640      	mov	r0, r8
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	f7f9 fac3 	bl	8000298 <__aeabi_dsub>
 8006d12:	3630      	adds	r6, #48	; 0x30
 8006d14:	f805 6b01 	strb.w	r6, [r5], #1
 8006d18:	4652      	mov	r2, sl
 8006d1a:	465b      	mov	r3, fp
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4689      	mov	r9, r1
 8006d20:	f7f9 fee4 	bl	8000aec <__aeabi_dcmplt>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d163      	bne.n	8006df0 <_dtoa_r+0x608>
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	4936      	ldr	r1, [pc, #216]	; (8006e08 <_dtoa_r+0x620>)
 8006d2e:	2000      	movs	r0, #0
 8006d30:	f7f9 fab2 	bl	8000298 <__aeabi_dsub>
 8006d34:	4652      	mov	r2, sl
 8006d36:	465b      	mov	r3, fp
 8006d38:	f7f9 fed8 	bl	8000aec <__aeabi_dcmplt>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f040 80b5 	bne.w	8006eac <_dtoa_r+0x6c4>
 8006d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d44:	429d      	cmp	r5, r3
 8006d46:	d081      	beq.n	8006c4c <_dtoa_r+0x464>
 8006d48:	4b30      	ldr	r3, [pc, #192]	; (8006e0c <_dtoa_r+0x624>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4659      	mov	r1, fp
 8006d50:	f7f9 fc5a 	bl	8000608 <__aeabi_dmul>
 8006d54:	4b2d      	ldr	r3, [pc, #180]	; (8006e0c <_dtoa_r+0x624>)
 8006d56:	4682      	mov	sl, r0
 8006d58:	468b      	mov	fp, r1
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	4649      	mov	r1, r9
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f7f9 fc52 	bl	8000608 <__aeabi_dmul>
 8006d64:	4680      	mov	r8, r0
 8006d66:	4689      	mov	r9, r1
 8006d68:	e7c6      	b.n	8006cf8 <_dtoa_r+0x510>
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	f7f9 fc4b 	bl	8000608 <__aeabi_dmul>
 8006d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d74:	9d04      	ldr	r5, [sp, #16]
 8006d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d78:	4682      	mov	sl, r0
 8006d7a:	468b      	mov	fp, r1
 8006d7c:	4649      	mov	r1, r9
 8006d7e:	4640      	mov	r0, r8
 8006d80:	f7f9 fef2 	bl	8000b68 <__aeabi_d2iz>
 8006d84:	4606      	mov	r6, r0
 8006d86:	f7f9 fbd5 	bl	8000534 <__aeabi_i2d>
 8006d8a:	3630      	adds	r6, #48	; 0x30
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f7f9 fa80 	bl	8000298 <__aeabi_dsub>
 8006d98:	f805 6b01 	strb.w	r6, [r5], #1
 8006d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d9e:	429d      	cmp	r5, r3
 8006da0:	4680      	mov	r8, r0
 8006da2:	4689      	mov	r9, r1
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	d124      	bne.n	8006df4 <_dtoa_r+0x60c>
 8006daa:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <_dtoa_r+0x630>)
 8006dac:	4650      	mov	r0, sl
 8006dae:	4659      	mov	r1, fp
 8006db0:	f7f9 fa74 	bl	800029c <__adddf3>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4640      	mov	r0, r8
 8006dba:	4649      	mov	r1, r9
 8006dbc:	f7f9 feb4 	bl	8000b28 <__aeabi_dcmpgt>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d173      	bne.n	8006eac <_dtoa_r+0x6c4>
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	465b      	mov	r3, fp
 8006dc8:	4913      	ldr	r1, [pc, #76]	; (8006e18 <_dtoa_r+0x630>)
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f7f9 fa64 	bl	8000298 <__aeabi_dsub>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	f7f9 fe88 	bl	8000aec <__aeabi_dcmplt>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f43f af35 	beq.w	8006c4c <_dtoa_r+0x464>
 8006de2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006de4:	1e6b      	subs	r3, r5, #1
 8006de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006de8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006dec:	2b30      	cmp	r3, #48	; 0x30
 8006dee:	d0f8      	beq.n	8006de2 <_dtoa_r+0x5fa>
 8006df0:	9703      	str	r7, [sp, #12]
 8006df2:	e049      	b.n	8006e88 <_dtoa_r+0x6a0>
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <_dtoa_r+0x624>)
 8006df6:	f7f9 fc07 	bl	8000608 <__aeabi_dmul>
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	e7bd      	b.n	8006d7c <_dtoa_r+0x594>
 8006e00:	08008d20 	.word	0x08008d20
 8006e04:	08008cf8 	.word	0x08008cf8
 8006e08:	3ff00000 	.word	0x3ff00000
 8006e0c:	40240000 	.word	0x40240000
 8006e10:	401c0000 	.word	0x401c0000
 8006e14:	40140000 	.word	0x40140000
 8006e18:	3fe00000 	.word	0x3fe00000
 8006e1c:	9d04      	ldr	r5, [sp, #16]
 8006e1e:	4656      	mov	r6, sl
 8006e20:	465f      	mov	r7, fp
 8006e22:	4642      	mov	r2, r8
 8006e24:	464b      	mov	r3, r9
 8006e26:	4630      	mov	r0, r6
 8006e28:	4639      	mov	r1, r7
 8006e2a:	f7f9 fd17 	bl	800085c <__aeabi_ddiv>
 8006e2e:	f7f9 fe9b 	bl	8000b68 <__aeabi_d2iz>
 8006e32:	4682      	mov	sl, r0
 8006e34:	f7f9 fb7e 	bl	8000534 <__aeabi_i2d>
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	f7f9 fbe4 	bl	8000608 <__aeabi_dmul>
 8006e40:	4602      	mov	r2, r0
 8006e42:	460b      	mov	r3, r1
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006e4c:	f7f9 fa24 	bl	8000298 <__aeabi_dsub>
 8006e50:	f805 6b01 	strb.w	r6, [r5], #1
 8006e54:	9e04      	ldr	r6, [sp, #16]
 8006e56:	9f06      	ldr	r7, [sp, #24]
 8006e58:	1bae      	subs	r6, r5, r6
 8006e5a:	42b7      	cmp	r7, r6
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	d135      	bne.n	8006ece <_dtoa_r+0x6e6>
 8006e62:	f7f9 fa1b 	bl	800029c <__adddf3>
 8006e66:	4642      	mov	r2, r8
 8006e68:	464b      	mov	r3, r9
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	f7f9 fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 8006e72:	b9d0      	cbnz	r0, 8006eaa <_dtoa_r+0x6c2>
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e80:	b110      	cbz	r0, 8006e88 <_dtoa_r+0x6a0>
 8006e82:	f01a 0f01 	tst.w	sl, #1
 8006e86:	d110      	bne.n	8006eaa <_dtoa_r+0x6c2>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	ee18 1a10 	vmov	r1, s16
 8006e8e:	f000 faf3 	bl	8007478 <_Bfree>
 8006e92:	2300      	movs	r3, #0
 8006e94:	9803      	ldr	r0, [sp, #12]
 8006e96:	702b      	strb	r3, [r5, #0]
 8006e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	6018      	str	r0, [r3, #0]
 8006e9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f43f aced 	beq.w	8006880 <_dtoa_r+0x98>
 8006ea6:	601d      	str	r5, [r3, #0]
 8006ea8:	e4ea      	b.n	8006880 <_dtoa_r+0x98>
 8006eaa:	9f03      	ldr	r7, [sp, #12]
 8006eac:	462b      	mov	r3, r5
 8006eae:	461d      	mov	r5, r3
 8006eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eb4:	2a39      	cmp	r2, #57	; 0x39
 8006eb6:	d106      	bne.n	8006ec6 <_dtoa_r+0x6de>
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d1f7      	bne.n	8006eae <_dtoa_r+0x6c6>
 8006ebe:	9904      	ldr	r1, [sp, #16]
 8006ec0:	2230      	movs	r2, #48	; 0x30
 8006ec2:	3701      	adds	r7, #1
 8006ec4:	700a      	strb	r2, [r1, #0]
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	3201      	adds	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e790      	b.n	8006df0 <_dtoa_r+0x608>
 8006ece:	4ba6      	ldr	r3, [pc, #664]	; (8007168 <_dtoa_r+0x980>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f7f9 fb99 	bl	8000608 <__aeabi_dmul>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4606      	mov	r6, r0
 8006edc:	460f      	mov	r7, r1
 8006ede:	f7f9 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	d09d      	beq.n	8006e22 <_dtoa_r+0x63a>
 8006ee6:	e7cf      	b.n	8006e88 <_dtoa_r+0x6a0>
 8006ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eea:	2a00      	cmp	r2, #0
 8006eec:	f000 80d7 	beq.w	800709e <_dtoa_r+0x8b6>
 8006ef0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ef2:	2a01      	cmp	r2, #1
 8006ef4:	f300 80ba 	bgt.w	800706c <_dtoa_r+0x884>
 8006ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	f000 80b2 	beq.w	8007064 <_dtoa_r+0x87c>
 8006f00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006f06:	9d07      	ldr	r5, [sp, #28]
 8006f08:	9a07      	ldr	r2, [sp, #28]
 8006f0a:	441a      	add	r2, r3
 8006f0c:	9207      	str	r2, [sp, #28]
 8006f0e:	9a08      	ldr	r2, [sp, #32]
 8006f10:	2101      	movs	r1, #1
 8006f12:	441a      	add	r2, r3
 8006f14:	4620      	mov	r0, r4
 8006f16:	9208      	str	r2, [sp, #32]
 8006f18:	f000 fb66 	bl	80075e8 <__i2b>
 8006f1c:	4607      	mov	r7, r0
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	dd0c      	ble.n	8006f3c <_dtoa_r+0x754>
 8006f22:	9b08      	ldr	r3, [sp, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dd09      	ble.n	8006f3c <_dtoa_r+0x754>
 8006f28:	42ab      	cmp	r3, r5
 8006f2a:	9a07      	ldr	r2, [sp, #28]
 8006f2c:	bfa8      	it	ge
 8006f2e:	462b      	movge	r3, r5
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	9207      	str	r2, [sp, #28]
 8006f34:	9a08      	ldr	r2, [sp, #32]
 8006f36:	1aed      	subs	r5, r5, r3
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	9308      	str	r3, [sp, #32]
 8006f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3e:	b31b      	cbz	r3, 8006f88 <_dtoa_r+0x7a0>
 8006f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80af 	beq.w	80070a6 <_dtoa_r+0x8be>
 8006f48:	2e00      	cmp	r6, #0
 8006f4a:	dd13      	ble.n	8006f74 <_dtoa_r+0x78c>
 8006f4c:	4639      	mov	r1, r7
 8006f4e:	4632      	mov	r2, r6
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fc09 	bl	8007768 <__pow5mult>
 8006f56:	ee18 2a10 	vmov	r2, s16
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 fb58 	bl	8007614 <__multiply>
 8006f64:	ee18 1a10 	vmov	r1, s16
 8006f68:	4680      	mov	r8, r0
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fa84 	bl	8007478 <_Bfree>
 8006f70:	ee08 8a10 	vmov	s16, r8
 8006f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f76:	1b9a      	subs	r2, r3, r6
 8006f78:	d006      	beq.n	8006f88 <_dtoa_r+0x7a0>
 8006f7a:	ee18 1a10 	vmov	r1, s16
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f000 fbf2 	bl	8007768 <__pow5mult>
 8006f84:	ee08 0a10 	vmov	s16, r0
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fb2c 	bl	80075e8 <__i2b>
 8006f90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	4606      	mov	r6, r0
 8006f96:	f340 8088 	ble.w	80070aa <_dtoa_r+0x8c2>
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fbe2 	bl	8007768 <__pow5mult>
 8006fa4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	4606      	mov	r6, r0
 8006faa:	f340 8081 	ble.w	80070b0 <_dtoa_r+0x8c8>
 8006fae:	f04f 0800 	mov.w	r8, #0
 8006fb2:	6933      	ldr	r3, [r6, #16]
 8006fb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006fb8:	6918      	ldr	r0, [r3, #16]
 8006fba:	f000 fac5 	bl	8007548 <__hi0bits>
 8006fbe:	f1c0 0020 	rsb	r0, r0, #32
 8006fc2:	9b08      	ldr	r3, [sp, #32]
 8006fc4:	4418      	add	r0, r3
 8006fc6:	f010 001f 	ands.w	r0, r0, #31
 8006fca:	f000 8092 	beq.w	80070f2 <_dtoa_r+0x90a>
 8006fce:	f1c0 0320 	rsb	r3, r0, #32
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	f340 808a 	ble.w	80070ec <_dtoa_r+0x904>
 8006fd8:	f1c0 001c 	rsb	r0, r0, #28
 8006fdc:	9b07      	ldr	r3, [sp, #28]
 8006fde:	4403      	add	r3, r0
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	9b08      	ldr	r3, [sp, #32]
 8006fe4:	4403      	add	r3, r0
 8006fe6:	4405      	add	r5, r0
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dd07      	ble.n	8007000 <_dtoa_r+0x818>
 8006ff0:	ee18 1a10 	vmov	r1, s16
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f000 fc10 	bl	800781c <__lshift>
 8006ffc:	ee08 0a10 	vmov	s16, r0
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	2b00      	cmp	r3, #0
 8007004:	dd05      	ble.n	8007012 <_dtoa_r+0x82a>
 8007006:	4631      	mov	r1, r6
 8007008:	461a      	mov	r2, r3
 800700a:	4620      	mov	r0, r4
 800700c:	f000 fc06 	bl	800781c <__lshift>
 8007010:	4606      	mov	r6, r0
 8007012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007014:	2b00      	cmp	r3, #0
 8007016:	d06e      	beq.n	80070f6 <_dtoa_r+0x90e>
 8007018:	ee18 0a10 	vmov	r0, s16
 800701c:	4631      	mov	r1, r6
 800701e:	f000 fc6d 	bl	80078fc <__mcmp>
 8007022:	2800      	cmp	r0, #0
 8007024:	da67      	bge.n	80070f6 <_dtoa_r+0x90e>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	3b01      	subs	r3, #1
 800702a:	ee18 1a10 	vmov	r1, s16
 800702e:	9303      	str	r3, [sp, #12]
 8007030:	220a      	movs	r2, #10
 8007032:	2300      	movs	r3, #0
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fa41 	bl	80074bc <__multadd>
 800703a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800703c:	ee08 0a10 	vmov	s16, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 81b1 	beq.w	80073a8 <_dtoa_r+0xbc0>
 8007046:	2300      	movs	r3, #0
 8007048:	4639      	mov	r1, r7
 800704a:	220a      	movs	r2, #10
 800704c:	4620      	mov	r0, r4
 800704e:	f000 fa35 	bl	80074bc <__multadd>
 8007052:	9b05      	ldr	r3, [sp, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	4607      	mov	r7, r0
 8007058:	f300 808e 	bgt.w	8007178 <_dtoa_r+0x990>
 800705c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800705e:	2b02      	cmp	r3, #2
 8007060:	dc51      	bgt.n	8007106 <_dtoa_r+0x91e>
 8007062:	e089      	b.n	8007178 <_dtoa_r+0x990>
 8007064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800706a:	e74b      	b.n	8006f04 <_dtoa_r+0x71c>
 800706c:	9b06      	ldr	r3, [sp, #24]
 800706e:	1e5e      	subs	r6, r3, #1
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	42b3      	cmp	r3, r6
 8007074:	bfbf      	itttt	lt
 8007076:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8007078:	9609      	strlt	r6, [sp, #36]	; 0x24
 800707a:	1af2      	sublt	r2, r6, r3
 800707c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800707e:	bfb6      	itet	lt
 8007080:	189b      	addlt	r3, r3, r2
 8007082:	1b9e      	subge	r6, r3, r6
 8007084:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	bfb8      	it	lt
 800708a:	2600      	movlt	r6, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	bfb7      	itett	lt
 8007090:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
 8007094:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
 8007098:	1a9d      	sublt	r5, r3, r2
 800709a:	2300      	movlt	r3, #0
 800709c:	e734      	b.n	8006f08 <_dtoa_r+0x720>
 800709e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80070a0:	9d07      	ldr	r5, [sp, #28]
 80070a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80070a4:	e73b      	b.n	8006f1e <_dtoa_r+0x736>
 80070a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a8:	e767      	b.n	8006f7a <_dtoa_r+0x792>
 80070aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	dc18      	bgt.n	80070e2 <_dtoa_r+0x8fa>
 80070b0:	f1ba 0f00 	cmp.w	sl, #0
 80070b4:	d115      	bne.n	80070e2 <_dtoa_r+0x8fa>
 80070b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070ba:	b993      	cbnz	r3, 80070e2 <_dtoa_r+0x8fa>
 80070bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80070c0:	0d1b      	lsrs	r3, r3, #20
 80070c2:	051b      	lsls	r3, r3, #20
 80070c4:	b183      	cbz	r3, 80070e8 <_dtoa_r+0x900>
 80070c6:	9b07      	ldr	r3, [sp, #28]
 80070c8:	3301      	adds	r3, #1
 80070ca:	9307      	str	r3, [sp, #28]
 80070cc:	9b08      	ldr	r3, [sp, #32]
 80070ce:	3301      	adds	r3, #1
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	f04f 0801 	mov.w	r8, #1
 80070d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f af6a 	bne.w	8006fb2 <_dtoa_r+0x7ca>
 80070de:	2001      	movs	r0, #1
 80070e0:	e76f      	b.n	8006fc2 <_dtoa_r+0x7da>
 80070e2:	f04f 0800 	mov.w	r8, #0
 80070e6:	e7f6      	b.n	80070d6 <_dtoa_r+0x8ee>
 80070e8:	4698      	mov	r8, r3
 80070ea:	e7f4      	b.n	80070d6 <_dtoa_r+0x8ee>
 80070ec:	f43f af7d 	beq.w	8006fea <_dtoa_r+0x802>
 80070f0:	4618      	mov	r0, r3
 80070f2:	301c      	adds	r0, #28
 80070f4:	e772      	b.n	8006fdc <_dtoa_r+0x7f4>
 80070f6:	9b06      	ldr	r3, [sp, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	dc37      	bgt.n	800716c <_dtoa_r+0x984>
 80070fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070fe:	2b02      	cmp	r3, #2
 8007100:	dd34      	ble.n	800716c <_dtoa_r+0x984>
 8007102:	9b06      	ldr	r3, [sp, #24]
 8007104:	9305      	str	r3, [sp, #20]
 8007106:	9b05      	ldr	r3, [sp, #20]
 8007108:	b96b      	cbnz	r3, 8007126 <_dtoa_r+0x93e>
 800710a:	4631      	mov	r1, r6
 800710c:	2205      	movs	r2, #5
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f9d4 	bl	80074bc <__multadd>
 8007114:	4601      	mov	r1, r0
 8007116:	4606      	mov	r6, r0
 8007118:	ee18 0a10 	vmov	r0, s16
 800711c:	f000 fbee 	bl	80078fc <__mcmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	f73f adbb 	bgt.w	8006c9c <_dtoa_r+0x4b4>
 8007126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007128:	9d04      	ldr	r5, [sp, #16]
 800712a:	43db      	mvns	r3, r3
 800712c:	9303      	str	r3, [sp, #12]
 800712e:	f04f 0800 	mov.w	r8, #0
 8007132:	4631      	mov	r1, r6
 8007134:	4620      	mov	r0, r4
 8007136:	f000 f99f 	bl	8007478 <_Bfree>
 800713a:	2f00      	cmp	r7, #0
 800713c:	f43f aea4 	beq.w	8006e88 <_dtoa_r+0x6a0>
 8007140:	f1b8 0f00 	cmp.w	r8, #0
 8007144:	d005      	beq.n	8007152 <_dtoa_r+0x96a>
 8007146:	45b8      	cmp	r8, r7
 8007148:	d003      	beq.n	8007152 <_dtoa_r+0x96a>
 800714a:	4641      	mov	r1, r8
 800714c:	4620      	mov	r0, r4
 800714e:	f000 f993 	bl	8007478 <_Bfree>
 8007152:	4639      	mov	r1, r7
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f98f 	bl	8007478 <_Bfree>
 800715a:	e695      	b.n	8006e88 <_dtoa_r+0x6a0>
 800715c:	2600      	movs	r6, #0
 800715e:	4637      	mov	r7, r6
 8007160:	e7e1      	b.n	8007126 <_dtoa_r+0x93e>
 8007162:	9703      	str	r7, [sp, #12]
 8007164:	4637      	mov	r7, r6
 8007166:	e599      	b.n	8006c9c <_dtoa_r+0x4b4>
 8007168:	40240000 	.word	0x40240000
 800716c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80ca 	beq.w	8007308 <_dtoa_r+0xb20>
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	9305      	str	r3, [sp, #20]
 8007178:	2d00      	cmp	r5, #0
 800717a:	dd05      	ble.n	8007188 <_dtoa_r+0x9a0>
 800717c:	4639      	mov	r1, r7
 800717e:	462a      	mov	r2, r5
 8007180:	4620      	mov	r0, r4
 8007182:	f000 fb4b 	bl	800781c <__lshift>
 8007186:	4607      	mov	r7, r0
 8007188:	f1b8 0f00 	cmp.w	r8, #0
 800718c:	d05b      	beq.n	8007246 <_dtoa_r+0xa5e>
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	4620      	mov	r0, r4
 8007192:	f000 f931 	bl	80073f8 <_Balloc>
 8007196:	4605      	mov	r5, r0
 8007198:	b928      	cbnz	r0, 80071a6 <_dtoa_r+0x9be>
 800719a:	4b87      	ldr	r3, [pc, #540]	; (80073b8 <_dtoa_r+0xbd0>)
 800719c:	4602      	mov	r2, r0
 800719e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071a2:	f7ff bb37 	b.w	8006814 <_dtoa_r+0x2c>
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	3202      	adds	r2, #2
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	f107 010c 	add.w	r1, r7, #12
 80071b0:	300c      	adds	r0, #12
 80071b2:	f000 f913 	bl	80073dc <memcpy>
 80071b6:	2201      	movs	r2, #1
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f000 fb2e 	bl	800781c <__lshift>
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	f103 0901 	add.w	r9, r3, #1
 80071c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ca:	4413      	add	r3, r2
 80071cc:	9308      	str	r3, [sp, #32]
 80071ce:	f00a 0301 	and.w	r3, sl, #1
 80071d2:	46b8      	mov	r8, r7
 80071d4:	9307      	str	r3, [sp, #28]
 80071d6:	4607      	mov	r7, r0
 80071d8:	4631      	mov	r1, r6
 80071da:	ee18 0a10 	vmov	r0, s16
 80071de:	f7ff fa77 	bl	80066d0 <quorem>
 80071e2:	4641      	mov	r1, r8
 80071e4:	9005      	str	r0, [sp, #20]
 80071e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071ea:	ee18 0a10 	vmov	r0, s16
 80071ee:	f000 fb85 	bl	80078fc <__mcmp>
 80071f2:	463a      	mov	r2, r7
 80071f4:	9006      	str	r0, [sp, #24]
 80071f6:	4631      	mov	r1, r6
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fb9b 	bl	8007934 <__mdiff>
 80071fe:	68c2      	ldr	r2, [r0, #12]
 8007200:	f109 3bff 	add.w	fp, r9, #4294967295
 8007204:	4605      	mov	r5, r0
 8007206:	bb02      	cbnz	r2, 800724a <_dtoa_r+0xa62>
 8007208:	4601      	mov	r1, r0
 800720a:	ee18 0a10 	vmov	r0, s16
 800720e:	f000 fb75 	bl	80078fc <__mcmp>
 8007212:	4602      	mov	r2, r0
 8007214:	4629      	mov	r1, r5
 8007216:	4620      	mov	r0, r4
 8007218:	9209      	str	r2, [sp, #36]	; 0x24
 800721a:	f000 f92d 	bl	8007478 <_Bfree>
 800721e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007222:	ea43 0102 	orr.w	r1, r3, r2
 8007226:	9b07      	ldr	r3, [sp, #28]
 8007228:	430b      	orrs	r3, r1
 800722a:	464d      	mov	r5, r9
 800722c:	d10f      	bne.n	800724e <_dtoa_r+0xa66>
 800722e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007232:	d02a      	beq.n	800728a <_dtoa_r+0xaa2>
 8007234:	9b06      	ldr	r3, [sp, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd02      	ble.n	8007240 <_dtoa_r+0xa58>
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007240:	f88b a000 	strb.w	sl, [fp]
 8007244:	e775      	b.n	8007132 <_dtoa_r+0x94a>
 8007246:	4638      	mov	r0, r7
 8007248:	e7ba      	b.n	80071c0 <_dtoa_r+0x9d8>
 800724a:	2201      	movs	r2, #1
 800724c:	e7e2      	b.n	8007214 <_dtoa_r+0xa2c>
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	db04      	blt.n	800725e <_dtoa_r+0xa76>
 8007254:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007256:	430b      	orrs	r3, r1
 8007258:	9907      	ldr	r1, [sp, #28]
 800725a:	430b      	orrs	r3, r1
 800725c:	d122      	bne.n	80072a4 <_dtoa_r+0xabc>
 800725e:	2a00      	cmp	r2, #0
 8007260:	ddee      	ble.n	8007240 <_dtoa_r+0xa58>
 8007262:	ee18 1a10 	vmov	r1, s16
 8007266:	2201      	movs	r2, #1
 8007268:	4620      	mov	r0, r4
 800726a:	f000 fad7 	bl	800781c <__lshift>
 800726e:	4631      	mov	r1, r6
 8007270:	ee08 0a10 	vmov	s16, r0
 8007274:	f000 fb42 	bl	80078fc <__mcmp>
 8007278:	2800      	cmp	r0, #0
 800727a:	dc03      	bgt.n	8007284 <_dtoa_r+0xa9c>
 800727c:	d1e0      	bne.n	8007240 <_dtoa_r+0xa58>
 800727e:	f01a 0f01 	tst.w	sl, #1
 8007282:	d0dd      	beq.n	8007240 <_dtoa_r+0xa58>
 8007284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007288:	d1d7      	bne.n	800723a <_dtoa_r+0xa52>
 800728a:	2339      	movs	r3, #57	; 0x39
 800728c:	f88b 3000 	strb.w	r3, [fp]
 8007290:	462b      	mov	r3, r5
 8007292:	461d      	mov	r5, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800729a:	2a39      	cmp	r2, #57	; 0x39
 800729c:	d071      	beq.n	8007382 <_dtoa_r+0xb9a>
 800729e:	3201      	adds	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	e746      	b.n	8007132 <_dtoa_r+0x94a>
 80072a4:	2a00      	cmp	r2, #0
 80072a6:	dd07      	ble.n	80072b8 <_dtoa_r+0xad0>
 80072a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80072ac:	d0ed      	beq.n	800728a <_dtoa_r+0xaa2>
 80072ae:	f10a 0301 	add.w	r3, sl, #1
 80072b2:	f88b 3000 	strb.w	r3, [fp]
 80072b6:	e73c      	b.n	8007132 <_dtoa_r+0x94a>
 80072b8:	9b08      	ldr	r3, [sp, #32]
 80072ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80072be:	4599      	cmp	r9, r3
 80072c0:	d047      	beq.n	8007352 <_dtoa_r+0xb6a>
 80072c2:	ee18 1a10 	vmov	r1, s16
 80072c6:	2300      	movs	r3, #0
 80072c8:	220a      	movs	r2, #10
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 f8f6 	bl	80074bc <__multadd>
 80072d0:	45b8      	cmp	r8, r7
 80072d2:	ee08 0a10 	vmov	s16, r0
 80072d6:	f04f 0300 	mov.w	r3, #0
 80072da:	f04f 020a 	mov.w	r2, #10
 80072de:	4641      	mov	r1, r8
 80072e0:	4620      	mov	r0, r4
 80072e2:	d106      	bne.n	80072f2 <_dtoa_r+0xb0a>
 80072e4:	f000 f8ea 	bl	80074bc <__multadd>
 80072e8:	4680      	mov	r8, r0
 80072ea:	4607      	mov	r7, r0
 80072ec:	f109 0901 	add.w	r9, r9, #1
 80072f0:	e772      	b.n	80071d8 <_dtoa_r+0x9f0>
 80072f2:	f000 f8e3 	bl	80074bc <__multadd>
 80072f6:	4639      	mov	r1, r7
 80072f8:	4680      	mov	r8, r0
 80072fa:	2300      	movs	r3, #0
 80072fc:	220a      	movs	r2, #10
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f8dc 	bl	80074bc <__multadd>
 8007304:	4607      	mov	r7, r0
 8007306:	e7f1      	b.n	80072ec <_dtoa_r+0xb04>
 8007308:	9b06      	ldr	r3, [sp, #24]
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	9d04      	ldr	r5, [sp, #16]
 800730e:	ee18 0a10 	vmov	r0, s16
 8007312:	4631      	mov	r1, r6
 8007314:	f7ff f9dc 	bl	80066d0 <quorem>
 8007318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800731c:	9b04      	ldr	r3, [sp, #16]
 800731e:	f805 ab01 	strb.w	sl, [r5], #1
 8007322:	1aea      	subs	r2, r5, r3
 8007324:	9b05      	ldr	r3, [sp, #20]
 8007326:	4293      	cmp	r3, r2
 8007328:	dd09      	ble.n	800733e <_dtoa_r+0xb56>
 800732a:	ee18 1a10 	vmov	r1, s16
 800732e:	2300      	movs	r3, #0
 8007330:	220a      	movs	r2, #10
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f8c2 	bl	80074bc <__multadd>
 8007338:	ee08 0a10 	vmov	s16, r0
 800733c:	e7e7      	b.n	800730e <_dtoa_r+0xb26>
 800733e:	9b05      	ldr	r3, [sp, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	bfc8      	it	gt
 8007344:	461d      	movgt	r5, r3
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	bfd8      	it	le
 800734a:	2501      	movle	r5, #1
 800734c:	441d      	add	r5, r3
 800734e:	f04f 0800 	mov.w	r8, #0
 8007352:	ee18 1a10 	vmov	r1, s16
 8007356:	2201      	movs	r2, #1
 8007358:	4620      	mov	r0, r4
 800735a:	f000 fa5f 	bl	800781c <__lshift>
 800735e:	4631      	mov	r1, r6
 8007360:	ee08 0a10 	vmov	s16, r0
 8007364:	f000 faca 	bl	80078fc <__mcmp>
 8007368:	2800      	cmp	r0, #0
 800736a:	dc91      	bgt.n	8007290 <_dtoa_r+0xaa8>
 800736c:	d102      	bne.n	8007374 <_dtoa_r+0xb8c>
 800736e:	f01a 0f01 	tst.w	sl, #1
 8007372:	d18d      	bne.n	8007290 <_dtoa_r+0xaa8>
 8007374:	462b      	mov	r3, r5
 8007376:	461d      	mov	r5, r3
 8007378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800737c:	2a30      	cmp	r2, #48	; 0x30
 800737e:	d0fa      	beq.n	8007376 <_dtoa_r+0xb8e>
 8007380:	e6d7      	b.n	8007132 <_dtoa_r+0x94a>
 8007382:	9a04      	ldr	r2, [sp, #16]
 8007384:	429a      	cmp	r2, r3
 8007386:	d184      	bne.n	8007292 <_dtoa_r+0xaaa>
 8007388:	9b03      	ldr	r3, [sp, #12]
 800738a:	3301      	adds	r3, #1
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	2331      	movs	r3, #49	; 0x31
 8007390:	7013      	strb	r3, [r2, #0]
 8007392:	e6ce      	b.n	8007132 <_dtoa_r+0x94a>
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <_dtoa_r+0xbd4>)
 8007396:	f7ff ba91 	b.w	80068bc <_dtoa_r+0xd4>
 800739a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800739c:	2b00      	cmp	r3, #0
 800739e:	f47f aa6a 	bne.w	8006876 <_dtoa_r+0x8e>
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <_dtoa_r+0xbd8>)
 80073a4:	f7ff ba8a 	b.w	80068bc <_dtoa_r+0xd4>
 80073a8:	9b05      	ldr	r3, [sp, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	dcae      	bgt.n	800730c <_dtoa_r+0xb24>
 80073ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	f73f aea8 	bgt.w	8007106 <_dtoa_r+0x91e>
 80073b6:	e7a9      	b.n	800730c <_dtoa_r+0xb24>
 80073b8:	08008c87 	.word	0x08008c87
 80073bc:	08008be4 	.word	0x08008be4
 80073c0:	08008c08 	.word	0x08008c08

080073c4 <_localeconv_r>:
 80073c4:	4800      	ldr	r0, [pc, #0]	; (80073c8 <_localeconv_r+0x4>)
 80073c6:	4770      	bx	lr
 80073c8:	20000160 	.word	0x20000160

080073cc <malloc>:
 80073cc:	4b02      	ldr	r3, [pc, #8]	; (80073d8 <malloc+0xc>)
 80073ce:	4601      	mov	r1, r0
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	f000 bc15 	b.w	8007c00 <_malloc_r>
 80073d6:	bf00      	nop
 80073d8:	2000000c 	.word	0x2000000c

080073dc <memcpy>:
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e4:	d100      	bne.n	80073e8 <memcpy+0xc>
 80073e6:	4770      	bx	lr
 80073e8:	b510      	push	{r4, lr}
 80073ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f2:	4291      	cmp	r1, r2
 80073f4:	d1f9      	bne.n	80073ea <memcpy+0xe>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <_Balloc>:
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073fc:	4604      	mov	r4, r0
 80073fe:	460d      	mov	r5, r1
 8007400:	b976      	cbnz	r6, 8007420 <_Balloc+0x28>
 8007402:	2010      	movs	r0, #16
 8007404:	f7ff ffe2 	bl	80073cc <malloc>
 8007408:	4602      	mov	r2, r0
 800740a:	6260      	str	r0, [r4, #36]	; 0x24
 800740c:	b920      	cbnz	r0, 8007418 <_Balloc+0x20>
 800740e:	4b18      	ldr	r3, [pc, #96]	; (8007470 <_Balloc+0x78>)
 8007410:	4818      	ldr	r0, [pc, #96]	; (8007474 <_Balloc+0x7c>)
 8007412:	2166      	movs	r1, #102	; 0x66
 8007414:	f000 fdd4 	bl	8007fc0 <__assert_func>
 8007418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800741c:	6006      	str	r6, [r0, #0]
 800741e:	60c6      	str	r6, [r0, #12]
 8007420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007422:	68f3      	ldr	r3, [r6, #12]
 8007424:	b183      	cbz	r3, 8007448 <_Balloc+0x50>
 8007426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800742e:	b9b8      	cbnz	r0, 8007460 <_Balloc+0x68>
 8007430:	2101      	movs	r1, #1
 8007432:	fa01 f605 	lsl.w	r6, r1, r5
 8007436:	1d72      	adds	r2, r6, #5
 8007438:	0092      	lsls	r2, r2, #2
 800743a:	4620      	mov	r0, r4
 800743c:	f000 fb5e 	bl	8007afc <_calloc_r>
 8007440:	b160      	cbz	r0, 800745c <_Balloc+0x64>
 8007442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007446:	e00e      	b.n	8007466 <_Balloc+0x6e>
 8007448:	2221      	movs	r2, #33	; 0x21
 800744a:	2104      	movs	r1, #4
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fb55 	bl	8007afc <_calloc_r>
 8007452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007454:	60f0      	str	r0, [r6, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e4      	bne.n	8007426 <_Balloc+0x2e>
 800745c:	2000      	movs	r0, #0
 800745e:	bd70      	pop	{r4, r5, r6, pc}
 8007460:	6802      	ldr	r2, [r0, #0]
 8007462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007466:	2300      	movs	r3, #0
 8007468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800746c:	e7f7      	b.n	800745e <_Balloc+0x66>
 800746e:	bf00      	nop
 8007470:	08008c15 	.word	0x08008c15
 8007474:	08008c98 	.word	0x08008c98

08007478 <_Bfree>:
 8007478:	b570      	push	{r4, r5, r6, lr}
 800747a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800747c:	4605      	mov	r5, r0
 800747e:	460c      	mov	r4, r1
 8007480:	b976      	cbnz	r6, 80074a0 <_Bfree+0x28>
 8007482:	2010      	movs	r0, #16
 8007484:	f7ff ffa2 	bl	80073cc <malloc>
 8007488:	4602      	mov	r2, r0
 800748a:	6268      	str	r0, [r5, #36]	; 0x24
 800748c:	b920      	cbnz	r0, 8007498 <_Bfree+0x20>
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <_Bfree+0x3c>)
 8007490:	4809      	ldr	r0, [pc, #36]	; (80074b8 <_Bfree+0x40>)
 8007492:	218a      	movs	r1, #138	; 0x8a
 8007494:	f000 fd94 	bl	8007fc0 <__assert_func>
 8007498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800749c:	6006      	str	r6, [r0, #0]
 800749e:	60c6      	str	r6, [r0, #12]
 80074a0:	b13c      	cbz	r4, 80074b2 <_Bfree+0x3a>
 80074a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074a4:	6862      	ldr	r2, [r4, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074ac:	6021      	str	r1, [r4, #0]
 80074ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	08008c15 	.word	0x08008c15
 80074b8:	08008c98 	.word	0x08008c98

080074bc <__multadd>:
 80074bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	690d      	ldr	r5, [r1, #16]
 80074c2:	4607      	mov	r7, r0
 80074c4:	460c      	mov	r4, r1
 80074c6:	461e      	mov	r6, r3
 80074c8:	f101 0c14 	add.w	ip, r1, #20
 80074cc:	2000      	movs	r0, #0
 80074ce:	f8dc 3000 	ldr.w	r3, [ip]
 80074d2:	b299      	uxth	r1, r3
 80074d4:	fb02 6101 	mla	r1, r2, r1, r6
 80074d8:	0c1e      	lsrs	r6, r3, #16
 80074da:	0c0b      	lsrs	r3, r1, #16
 80074dc:	fb02 3306 	mla	r3, r2, r6, r3
 80074e0:	b289      	uxth	r1, r1
 80074e2:	3001      	adds	r0, #1
 80074e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074e8:	4285      	cmp	r5, r0
 80074ea:	f84c 1b04 	str.w	r1, [ip], #4
 80074ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074f2:	dcec      	bgt.n	80074ce <__multadd+0x12>
 80074f4:	b30e      	cbz	r6, 800753a <__multadd+0x7e>
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	42ab      	cmp	r3, r5
 80074fa:	dc19      	bgt.n	8007530 <__multadd+0x74>
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	4638      	mov	r0, r7
 8007500:	3101      	adds	r1, #1
 8007502:	f7ff ff79 	bl	80073f8 <_Balloc>
 8007506:	4680      	mov	r8, r0
 8007508:	b928      	cbnz	r0, 8007516 <__multadd+0x5a>
 800750a:	4602      	mov	r2, r0
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <__multadd+0x84>)
 800750e:	480d      	ldr	r0, [pc, #52]	; (8007544 <__multadd+0x88>)
 8007510:	21b5      	movs	r1, #181	; 0xb5
 8007512:	f000 fd55 	bl	8007fc0 <__assert_func>
 8007516:	6922      	ldr	r2, [r4, #16]
 8007518:	3202      	adds	r2, #2
 800751a:	f104 010c 	add.w	r1, r4, #12
 800751e:	0092      	lsls	r2, r2, #2
 8007520:	300c      	adds	r0, #12
 8007522:	f7ff ff5b 	bl	80073dc <memcpy>
 8007526:	4621      	mov	r1, r4
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff ffa5 	bl	8007478 <_Bfree>
 800752e:	4644      	mov	r4, r8
 8007530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007534:	3501      	adds	r5, #1
 8007536:	615e      	str	r6, [r3, #20]
 8007538:	6125      	str	r5, [r4, #16]
 800753a:	4620      	mov	r0, r4
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007540:	08008c87 	.word	0x08008c87
 8007544:	08008c98 	.word	0x08008c98

08007548 <__hi0bits>:
 8007548:	0c03      	lsrs	r3, r0, #16
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	b9d3      	cbnz	r3, 8007584 <__hi0bits+0x3c>
 800754e:	0400      	lsls	r0, r0, #16
 8007550:	2310      	movs	r3, #16
 8007552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007556:	bf04      	itt	eq
 8007558:	0200      	lsleq	r0, r0, #8
 800755a:	3308      	addeq	r3, #8
 800755c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007560:	bf04      	itt	eq
 8007562:	0100      	lsleq	r0, r0, #4
 8007564:	3304      	addeq	r3, #4
 8007566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800756a:	bf04      	itt	eq
 800756c:	0080      	lsleq	r0, r0, #2
 800756e:	3302      	addeq	r3, #2
 8007570:	2800      	cmp	r0, #0
 8007572:	db05      	blt.n	8007580 <__hi0bits+0x38>
 8007574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007578:	f103 0301 	add.w	r3, r3, #1
 800757c:	bf08      	it	eq
 800757e:	2320      	moveq	r3, #32
 8007580:	4618      	mov	r0, r3
 8007582:	4770      	bx	lr
 8007584:	2300      	movs	r3, #0
 8007586:	e7e4      	b.n	8007552 <__hi0bits+0xa>

08007588 <__lo0bits>:
 8007588:	6803      	ldr	r3, [r0, #0]
 800758a:	f013 0207 	ands.w	r2, r3, #7
 800758e:	4601      	mov	r1, r0
 8007590:	d00b      	beq.n	80075aa <__lo0bits+0x22>
 8007592:	07da      	lsls	r2, r3, #31
 8007594:	d423      	bmi.n	80075de <__lo0bits+0x56>
 8007596:	0798      	lsls	r0, r3, #30
 8007598:	bf49      	itett	mi
 800759a:	085b      	lsrmi	r3, r3, #1
 800759c:	089b      	lsrpl	r3, r3, #2
 800759e:	2001      	movmi	r0, #1
 80075a0:	600b      	strmi	r3, [r1, #0]
 80075a2:	bf5c      	itt	pl
 80075a4:	600b      	strpl	r3, [r1, #0]
 80075a6:	2002      	movpl	r0, #2
 80075a8:	4770      	bx	lr
 80075aa:	b298      	uxth	r0, r3
 80075ac:	b9a8      	cbnz	r0, 80075da <__lo0bits+0x52>
 80075ae:	0c1b      	lsrs	r3, r3, #16
 80075b0:	2010      	movs	r0, #16
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	b90a      	cbnz	r2, 80075ba <__lo0bits+0x32>
 80075b6:	3008      	adds	r0, #8
 80075b8:	0a1b      	lsrs	r3, r3, #8
 80075ba:	071a      	lsls	r2, r3, #28
 80075bc:	bf04      	itt	eq
 80075be:	091b      	lsreq	r3, r3, #4
 80075c0:	3004      	addeq	r0, #4
 80075c2:	079a      	lsls	r2, r3, #30
 80075c4:	bf04      	itt	eq
 80075c6:	089b      	lsreq	r3, r3, #2
 80075c8:	3002      	addeq	r0, #2
 80075ca:	07da      	lsls	r2, r3, #31
 80075cc:	d403      	bmi.n	80075d6 <__lo0bits+0x4e>
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	f100 0001 	add.w	r0, r0, #1
 80075d4:	d005      	beq.n	80075e2 <__lo0bits+0x5a>
 80075d6:	600b      	str	r3, [r1, #0]
 80075d8:	4770      	bx	lr
 80075da:	4610      	mov	r0, r2
 80075dc:	e7e9      	b.n	80075b2 <__lo0bits+0x2a>
 80075de:	2000      	movs	r0, #0
 80075e0:	4770      	bx	lr
 80075e2:	2020      	movs	r0, #32
 80075e4:	4770      	bx	lr
	...

080075e8 <__i2b>:
 80075e8:	b510      	push	{r4, lr}
 80075ea:	460c      	mov	r4, r1
 80075ec:	2101      	movs	r1, #1
 80075ee:	f7ff ff03 	bl	80073f8 <_Balloc>
 80075f2:	4602      	mov	r2, r0
 80075f4:	b928      	cbnz	r0, 8007602 <__i2b+0x1a>
 80075f6:	4b05      	ldr	r3, [pc, #20]	; (800760c <__i2b+0x24>)
 80075f8:	4805      	ldr	r0, [pc, #20]	; (8007610 <__i2b+0x28>)
 80075fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075fe:	f000 fcdf 	bl	8007fc0 <__assert_func>
 8007602:	2301      	movs	r3, #1
 8007604:	6144      	str	r4, [r0, #20]
 8007606:	6103      	str	r3, [r0, #16]
 8007608:	bd10      	pop	{r4, pc}
 800760a:	bf00      	nop
 800760c:	08008c87 	.word	0x08008c87
 8007610:	08008c98 	.word	0x08008c98

08007614 <__multiply>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	4691      	mov	r9, r2
 800761a:	690a      	ldr	r2, [r1, #16]
 800761c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	bfb8      	it	lt
 8007624:	460b      	movlt	r3, r1
 8007626:	460c      	mov	r4, r1
 8007628:	bfbc      	itt	lt
 800762a:	464c      	movlt	r4, r9
 800762c:	4699      	movlt	r9, r3
 800762e:	6927      	ldr	r7, [r4, #16]
 8007630:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007634:	68a3      	ldr	r3, [r4, #8]
 8007636:	6861      	ldr	r1, [r4, #4]
 8007638:	eb07 060a 	add.w	r6, r7, sl
 800763c:	42b3      	cmp	r3, r6
 800763e:	b085      	sub	sp, #20
 8007640:	bfb8      	it	lt
 8007642:	3101      	addlt	r1, #1
 8007644:	f7ff fed8 	bl	80073f8 <_Balloc>
 8007648:	b930      	cbnz	r0, 8007658 <__multiply+0x44>
 800764a:	4602      	mov	r2, r0
 800764c:	4b44      	ldr	r3, [pc, #272]	; (8007760 <__multiply+0x14c>)
 800764e:	4845      	ldr	r0, [pc, #276]	; (8007764 <__multiply+0x150>)
 8007650:	f240 115d 	movw	r1, #349	; 0x15d
 8007654:	f000 fcb4 	bl	8007fc0 <__assert_func>
 8007658:	f100 0514 	add.w	r5, r0, #20
 800765c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007660:	462b      	mov	r3, r5
 8007662:	2200      	movs	r2, #0
 8007664:	4543      	cmp	r3, r8
 8007666:	d321      	bcc.n	80076ac <__multiply+0x98>
 8007668:	f104 0314 	add.w	r3, r4, #20
 800766c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007670:	f109 0314 	add.w	r3, r9, #20
 8007674:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007678:	9202      	str	r2, [sp, #8]
 800767a:	1b3a      	subs	r2, r7, r4
 800767c:	3a15      	subs	r2, #21
 800767e:	f022 0203 	bic.w	r2, r2, #3
 8007682:	3204      	adds	r2, #4
 8007684:	f104 0115 	add.w	r1, r4, #21
 8007688:	428f      	cmp	r7, r1
 800768a:	bf38      	it	cc
 800768c:	2204      	movcc	r2, #4
 800768e:	9201      	str	r2, [sp, #4]
 8007690:	9a02      	ldr	r2, [sp, #8]
 8007692:	9303      	str	r3, [sp, #12]
 8007694:	429a      	cmp	r2, r3
 8007696:	d80c      	bhi.n	80076b2 <__multiply+0x9e>
 8007698:	2e00      	cmp	r6, #0
 800769a:	dd03      	ble.n	80076a4 <__multiply+0x90>
 800769c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05a      	beq.n	800775a <__multiply+0x146>
 80076a4:	6106      	str	r6, [r0, #16]
 80076a6:	b005      	add	sp, #20
 80076a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ac:	f843 2b04 	str.w	r2, [r3], #4
 80076b0:	e7d8      	b.n	8007664 <__multiply+0x50>
 80076b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80076b6:	f1ba 0f00 	cmp.w	sl, #0
 80076ba:	d024      	beq.n	8007706 <__multiply+0xf2>
 80076bc:	f104 0e14 	add.w	lr, r4, #20
 80076c0:	46a9      	mov	r9, r5
 80076c2:	f04f 0c00 	mov.w	ip, #0
 80076c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80076ca:	f8d9 1000 	ldr.w	r1, [r9]
 80076ce:	fa1f fb82 	uxth.w	fp, r2
 80076d2:	b289      	uxth	r1, r1
 80076d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80076d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80076dc:	f8d9 2000 	ldr.w	r2, [r9]
 80076e0:	4461      	add	r1, ip
 80076e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80076ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076ee:	b289      	uxth	r1, r1
 80076f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80076f4:	4577      	cmp	r7, lr
 80076f6:	f849 1b04 	str.w	r1, [r9], #4
 80076fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80076fe:	d8e2      	bhi.n	80076c6 <__multiply+0xb2>
 8007700:	9a01      	ldr	r2, [sp, #4]
 8007702:	f845 c002 	str.w	ip, [r5, r2]
 8007706:	9a03      	ldr	r2, [sp, #12]
 8007708:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800770c:	3304      	adds	r3, #4
 800770e:	f1b9 0f00 	cmp.w	r9, #0
 8007712:	d020      	beq.n	8007756 <__multiply+0x142>
 8007714:	6829      	ldr	r1, [r5, #0]
 8007716:	f104 0c14 	add.w	ip, r4, #20
 800771a:	46ae      	mov	lr, r5
 800771c:	f04f 0a00 	mov.w	sl, #0
 8007720:	f8bc b000 	ldrh.w	fp, [ip]
 8007724:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007728:	fb09 220b 	mla	r2, r9, fp, r2
 800772c:	4492      	add	sl, r2
 800772e:	b289      	uxth	r1, r1
 8007730:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007734:	f84e 1b04 	str.w	r1, [lr], #4
 8007738:	f85c 2b04 	ldr.w	r2, [ip], #4
 800773c:	f8be 1000 	ldrh.w	r1, [lr]
 8007740:	0c12      	lsrs	r2, r2, #16
 8007742:	fb09 1102 	mla	r1, r9, r2, r1
 8007746:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800774a:	4567      	cmp	r7, ip
 800774c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007750:	d8e6      	bhi.n	8007720 <__multiply+0x10c>
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	50a9      	str	r1, [r5, r2]
 8007756:	3504      	adds	r5, #4
 8007758:	e79a      	b.n	8007690 <__multiply+0x7c>
 800775a:	3e01      	subs	r6, #1
 800775c:	e79c      	b.n	8007698 <__multiply+0x84>
 800775e:	bf00      	nop
 8007760:	08008c87 	.word	0x08008c87
 8007764:	08008c98 	.word	0x08008c98

08007768 <__pow5mult>:
 8007768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800776c:	4615      	mov	r5, r2
 800776e:	f012 0203 	ands.w	r2, r2, #3
 8007772:	4606      	mov	r6, r0
 8007774:	460f      	mov	r7, r1
 8007776:	d007      	beq.n	8007788 <__pow5mult+0x20>
 8007778:	4c25      	ldr	r4, [pc, #148]	; (8007810 <__pow5mult+0xa8>)
 800777a:	3a01      	subs	r2, #1
 800777c:	2300      	movs	r3, #0
 800777e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007782:	f7ff fe9b 	bl	80074bc <__multadd>
 8007786:	4607      	mov	r7, r0
 8007788:	10ad      	asrs	r5, r5, #2
 800778a:	d03d      	beq.n	8007808 <__pow5mult+0xa0>
 800778c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800778e:	b97c      	cbnz	r4, 80077b0 <__pow5mult+0x48>
 8007790:	2010      	movs	r0, #16
 8007792:	f7ff fe1b 	bl	80073cc <malloc>
 8007796:	4602      	mov	r2, r0
 8007798:	6270      	str	r0, [r6, #36]	; 0x24
 800779a:	b928      	cbnz	r0, 80077a8 <__pow5mult+0x40>
 800779c:	4b1d      	ldr	r3, [pc, #116]	; (8007814 <__pow5mult+0xac>)
 800779e:	481e      	ldr	r0, [pc, #120]	; (8007818 <__pow5mult+0xb0>)
 80077a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80077a4:	f000 fc0c 	bl	8007fc0 <__assert_func>
 80077a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077ac:	6004      	str	r4, [r0, #0]
 80077ae:	60c4      	str	r4, [r0, #12]
 80077b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80077b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077b8:	b94c      	cbnz	r4, 80077ce <__pow5mult+0x66>
 80077ba:	f240 2171 	movw	r1, #625	; 0x271
 80077be:	4630      	mov	r0, r6
 80077c0:	f7ff ff12 	bl	80075e8 <__i2b>
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80077ca:	4604      	mov	r4, r0
 80077cc:	6003      	str	r3, [r0, #0]
 80077ce:	f04f 0900 	mov.w	r9, #0
 80077d2:	07eb      	lsls	r3, r5, #31
 80077d4:	d50a      	bpl.n	80077ec <__pow5mult+0x84>
 80077d6:	4639      	mov	r1, r7
 80077d8:	4622      	mov	r2, r4
 80077da:	4630      	mov	r0, r6
 80077dc:	f7ff ff1a 	bl	8007614 <__multiply>
 80077e0:	4639      	mov	r1, r7
 80077e2:	4680      	mov	r8, r0
 80077e4:	4630      	mov	r0, r6
 80077e6:	f7ff fe47 	bl	8007478 <_Bfree>
 80077ea:	4647      	mov	r7, r8
 80077ec:	106d      	asrs	r5, r5, #1
 80077ee:	d00b      	beq.n	8007808 <__pow5mult+0xa0>
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	b938      	cbnz	r0, 8007804 <__pow5mult+0x9c>
 80077f4:	4622      	mov	r2, r4
 80077f6:	4621      	mov	r1, r4
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7ff ff0b 	bl	8007614 <__multiply>
 80077fe:	6020      	str	r0, [r4, #0]
 8007800:	f8c0 9000 	str.w	r9, [r0]
 8007804:	4604      	mov	r4, r0
 8007806:	e7e4      	b.n	80077d2 <__pow5mult+0x6a>
 8007808:	4638      	mov	r0, r7
 800780a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780e:	bf00      	nop
 8007810:	08008de8 	.word	0x08008de8
 8007814:	08008c15 	.word	0x08008c15
 8007818:	08008c98 	.word	0x08008c98

0800781c <__lshift>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	460c      	mov	r4, r1
 8007822:	6849      	ldr	r1, [r1, #4]
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	4607      	mov	r7, r0
 800782e:	4691      	mov	r9, r2
 8007830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007834:	f108 0601 	add.w	r6, r8, #1
 8007838:	42b3      	cmp	r3, r6
 800783a:	db0b      	blt.n	8007854 <__lshift+0x38>
 800783c:	4638      	mov	r0, r7
 800783e:	f7ff fddb 	bl	80073f8 <_Balloc>
 8007842:	4605      	mov	r5, r0
 8007844:	b948      	cbnz	r0, 800785a <__lshift+0x3e>
 8007846:	4602      	mov	r2, r0
 8007848:	4b2a      	ldr	r3, [pc, #168]	; (80078f4 <__lshift+0xd8>)
 800784a:	482b      	ldr	r0, [pc, #172]	; (80078f8 <__lshift+0xdc>)
 800784c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007850:	f000 fbb6 	bl	8007fc0 <__assert_func>
 8007854:	3101      	adds	r1, #1
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	e7ee      	b.n	8007838 <__lshift+0x1c>
 800785a:	2300      	movs	r3, #0
 800785c:	f100 0114 	add.w	r1, r0, #20
 8007860:	f100 0210 	add.w	r2, r0, #16
 8007864:	4618      	mov	r0, r3
 8007866:	4553      	cmp	r3, sl
 8007868:	db37      	blt.n	80078da <__lshift+0xbe>
 800786a:	6920      	ldr	r0, [r4, #16]
 800786c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007870:	f104 0314 	add.w	r3, r4, #20
 8007874:	f019 091f 	ands.w	r9, r9, #31
 8007878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800787c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007880:	d02f      	beq.n	80078e2 <__lshift+0xc6>
 8007882:	f1c9 0e20 	rsb	lr, r9, #32
 8007886:	468a      	mov	sl, r1
 8007888:	f04f 0c00 	mov.w	ip, #0
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	fa02 f209 	lsl.w	r2, r2, r9
 8007892:	ea42 020c 	orr.w	r2, r2, ip
 8007896:	f84a 2b04 	str.w	r2, [sl], #4
 800789a:	f853 2b04 	ldr.w	r2, [r3], #4
 800789e:	4298      	cmp	r0, r3
 80078a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80078a4:	d8f2      	bhi.n	800788c <__lshift+0x70>
 80078a6:	1b03      	subs	r3, r0, r4
 80078a8:	3b15      	subs	r3, #21
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	3304      	adds	r3, #4
 80078b0:	f104 0215 	add.w	r2, r4, #21
 80078b4:	4290      	cmp	r0, r2
 80078b6:	bf38      	it	cc
 80078b8:	2304      	movcc	r3, #4
 80078ba:	f841 c003 	str.w	ip, [r1, r3]
 80078be:	f1bc 0f00 	cmp.w	ip, #0
 80078c2:	d001      	beq.n	80078c8 <__lshift+0xac>
 80078c4:	f108 0602 	add.w	r6, r8, #2
 80078c8:	3e01      	subs	r6, #1
 80078ca:	4638      	mov	r0, r7
 80078cc:	612e      	str	r6, [r5, #16]
 80078ce:	4621      	mov	r1, r4
 80078d0:	f7ff fdd2 	bl	8007478 <_Bfree>
 80078d4:	4628      	mov	r0, r5
 80078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078da:	f842 0f04 	str.w	r0, [r2, #4]!
 80078de:	3301      	adds	r3, #1
 80078e0:	e7c1      	b.n	8007866 <__lshift+0x4a>
 80078e2:	3904      	subs	r1, #4
 80078e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80078ec:	4298      	cmp	r0, r3
 80078ee:	d8f9      	bhi.n	80078e4 <__lshift+0xc8>
 80078f0:	e7ea      	b.n	80078c8 <__lshift+0xac>
 80078f2:	bf00      	nop
 80078f4:	08008c87 	.word	0x08008c87
 80078f8:	08008c98 	.word	0x08008c98

080078fc <__mcmp>:
 80078fc:	b530      	push	{r4, r5, lr}
 80078fe:	6902      	ldr	r2, [r0, #16]
 8007900:	690c      	ldr	r4, [r1, #16]
 8007902:	1b12      	subs	r2, r2, r4
 8007904:	d10e      	bne.n	8007924 <__mcmp+0x28>
 8007906:	f100 0314 	add.w	r3, r0, #20
 800790a:	3114      	adds	r1, #20
 800790c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007910:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007914:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007918:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800791c:	42a5      	cmp	r5, r4
 800791e:	d003      	beq.n	8007928 <__mcmp+0x2c>
 8007920:	d305      	bcc.n	800792e <__mcmp+0x32>
 8007922:	2201      	movs	r2, #1
 8007924:	4610      	mov	r0, r2
 8007926:	bd30      	pop	{r4, r5, pc}
 8007928:	4283      	cmp	r3, r0
 800792a:	d3f3      	bcc.n	8007914 <__mcmp+0x18>
 800792c:	e7fa      	b.n	8007924 <__mcmp+0x28>
 800792e:	f04f 32ff 	mov.w	r2, #4294967295
 8007932:	e7f7      	b.n	8007924 <__mcmp+0x28>

08007934 <__mdiff>:
 8007934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	460c      	mov	r4, r1
 800793a:	4606      	mov	r6, r0
 800793c:	4611      	mov	r1, r2
 800793e:	4620      	mov	r0, r4
 8007940:	4690      	mov	r8, r2
 8007942:	f7ff ffdb 	bl	80078fc <__mcmp>
 8007946:	1e05      	subs	r5, r0, #0
 8007948:	d110      	bne.n	800796c <__mdiff+0x38>
 800794a:	4629      	mov	r1, r5
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff fd53 	bl	80073f8 <_Balloc>
 8007952:	b930      	cbnz	r0, 8007962 <__mdiff+0x2e>
 8007954:	4b3a      	ldr	r3, [pc, #232]	; (8007a40 <__mdiff+0x10c>)
 8007956:	4602      	mov	r2, r0
 8007958:	f240 2132 	movw	r1, #562	; 0x232
 800795c:	4839      	ldr	r0, [pc, #228]	; (8007a44 <__mdiff+0x110>)
 800795e:	f000 fb2f 	bl	8007fc0 <__assert_func>
 8007962:	2301      	movs	r3, #1
 8007964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	bfa4      	itt	ge
 800796e:	4643      	movge	r3, r8
 8007970:	46a0      	movge	r8, r4
 8007972:	4630      	mov	r0, r6
 8007974:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007978:	bfa6      	itte	ge
 800797a:	461c      	movge	r4, r3
 800797c:	2500      	movge	r5, #0
 800797e:	2501      	movlt	r5, #1
 8007980:	f7ff fd3a 	bl	80073f8 <_Balloc>
 8007984:	b920      	cbnz	r0, 8007990 <__mdiff+0x5c>
 8007986:	4b2e      	ldr	r3, [pc, #184]	; (8007a40 <__mdiff+0x10c>)
 8007988:	4602      	mov	r2, r0
 800798a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800798e:	e7e5      	b.n	800795c <__mdiff+0x28>
 8007990:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007994:	6926      	ldr	r6, [r4, #16]
 8007996:	60c5      	str	r5, [r0, #12]
 8007998:	f104 0914 	add.w	r9, r4, #20
 800799c:	f108 0514 	add.w	r5, r8, #20
 80079a0:	f100 0e14 	add.w	lr, r0, #20
 80079a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80079a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80079ac:	f108 0210 	add.w	r2, r8, #16
 80079b0:	46f2      	mov	sl, lr
 80079b2:	2100      	movs	r1, #0
 80079b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80079b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80079bc:	fa1f f883 	uxth.w	r8, r3
 80079c0:	fa11 f18b 	uxtah	r1, r1, fp
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	eba1 0808 	sub.w	r8, r1, r8
 80079ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80079ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80079d2:	fa1f f888 	uxth.w	r8, r8
 80079d6:	1419      	asrs	r1, r3, #16
 80079d8:	454e      	cmp	r6, r9
 80079da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80079de:	f84a 3b04 	str.w	r3, [sl], #4
 80079e2:	d8e7      	bhi.n	80079b4 <__mdiff+0x80>
 80079e4:	1b33      	subs	r3, r6, r4
 80079e6:	3b15      	subs	r3, #21
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	3304      	adds	r3, #4
 80079ee:	3415      	adds	r4, #21
 80079f0:	42a6      	cmp	r6, r4
 80079f2:	bf38      	it	cc
 80079f4:	2304      	movcc	r3, #4
 80079f6:	441d      	add	r5, r3
 80079f8:	4473      	add	r3, lr
 80079fa:	469e      	mov	lr, r3
 80079fc:	462e      	mov	r6, r5
 80079fe:	4566      	cmp	r6, ip
 8007a00:	d30e      	bcc.n	8007a20 <__mdiff+0xec>
 8007a02:	f10c 0203 	add.w	r2, ip, #3
 8007a06:	1b52      	subs	r2, r2, r5
 8007a08:	f022 0203 	bic.w	r2, r2, #3
 8007a0c:	3d03      	subs	r5, #3
 8007a0e:	45ac      	cmp	ip, r5
 8007a10:	bf38      	it	cc
 8007a12:	2200      	movcc	r2, #0
 8007a14:	441a      	add	r2, r3
 8007a16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007a1a:	b17b      	cbz	r3, 8007a3c <__mdiff+0x108>
 8007a1c:	6107      	str	r7, [r0, #16]
 8007a1e:	e7a3      	b.n	8007968 <__mdiff+0x34>
 8007a20:	f856 8b04 	ldr.w	r8, [r6], #4
 8007a24:	fa11 f288 	uxtah	r2, r1, r8
 8007a28:	1414      	asrs	r4, r2, #16
 8007a2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007a2e:	b292      	uxth	r2, r2
 8007a30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007a34:	f84e 2b04 	str.w	r2, [lr], #4
 8007a38:	1421      	asrs	r1, r4, #16
 8007a3a:	e7e0      	b.n	80079fe <__mdiff+0xca>
 8007a3c:	3f01      	subs	r7, #1
 8007a3e:	e7ea      	b.n	8007a16 <__mdiff+0xe2>
 8007a40:	08008c87 	.word	0x08008c87
 8007a44:	08008c98 	.word	0x08008c98

08007a48 <__d2b>:
 8007a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
 8007a52:	4690      	mov	r8, r2
 8007a54:	4699      	mov	r9, r3
 8007a56:	f7ff fccf 	bl	80073f8 <_Balloc>
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	b930      	cbnz	r0, 8007a6c <__d2b+0x24>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	4b24      	ldr	r3, [pc, #144]	; (8007af4 <__d2b+0xac>)
 8007a62:	4825      	ldr	r0, [pc, #148]	; (8007af8 <__d2b+0xb0>)
 8007a64:	f240 310a 	movw	r1, #778	; 0x30a
 8007a68:	f000 faaa 	bl	8007fc0 <__assert_func>
 8007a6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a74:	bb2d      	cbnz	r5, 8007ac2 <__d2b+0x7a>
 8007a76:	f1b8 0200 	subs.w	r2, r8, #0
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	d026      	beq.n	8007acc <__d2b+0x84>
 8007a7e:	4668      	mov	r0, sp
 8007a80:	9200      	str	r2, [sp, #0]
 8007a82:	f7ff fd81 	bl	8007588 <__lo0bits>
 8007a86:	9900      	ldr	r1, [sp, #0]
 8007a88:	b1f0      	cbz	r0, 8007ac8 <__d2b+0x80>
 8007a8a:	9a01      	ldr	r2, [sp, #4]
 8007a8c:	f1c0 0320 	rsb	r3, r0, #32
 8007a90:	fa02 f303 	lsl.w	r3, r2, r3
 8007a94:	430b      	orrs	r3, r1
 8007a96:	40c2      	lsrs	r2, r0
 8007a98:	6163      	str	r3, [r4, #20]
 8007a9a:	9201      	str	r2, [sp, #4]
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	61a3      	str	r3, [r4, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bf14      	ite	ne
 8007aa4:	2202      	movne	r2, #2
 8007aa6:	2201      	moveq	r2, #1
 8007aa8:	6122      	str	r2, [r4, #16]
 8007aaa:	b1c5      	cbz	r5, 8007ade <__d2b+0x96>
 8007aac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ab0:	4405      	add	r5, r0
 8007ab2:	603d      	str	r5, [r7, #0]
 8007ab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ab8:	6030      	str	r0, [r6, #0]
 8007aba:	4620      	mov	r0, r4
 8007abc:	b003      	add	sp, #12
 8007abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ac6:	e7d6      	b.n	8007a76 <__d2b+0x2e>
 8007ac8:	6161      	str	r1, [r4, #20]
 8007aca:	e7e7      	b.n	8007a9c <__d2b+0x54>
 8007acc:	a801      	add	r0, sp, #4
 8007ace:	f7ff fd5b 	bl	8007588 <__lo0bits>
 8007ad2:	9b01      	ldr	r3, [sp, #4]
 8007ad4:	6163      	str	r3, [r4, #20]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	6122      	str	r2, [r4, #16]
 8007ada:	3020      	adds	r0, #32
 8007adc:	e7e5      	b.n	8007aaa <__d2b+0x62>
 8007ade:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ae2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ae6:	6038      	str	r0, [r7, #0]
 8007ae8:	6918      	ldr	r0, [r3, #16]
 8007aea:	f7ff fd2d 	bl	8007548 <__hi0bits>
 8007aee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007af2:	e7e1      	b.n	8007ab8 <__d2b+0x70>
 8007af4:	08008c87 	.word	0x08008c87
 8007af8:	08008c98 	.word	0x08008c98

08007afc <_calloc_r>:
 8007afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007afe:	fba1 2402 	umull	r2, r4, r1, r2
 8007b02:	b94c      	cbnz	r4, 8007b18 <_calloc_r+0x1c>
 8007b04:	4611      	mov	r1, r2
 8007b06:	9201      	str	r2, [sp, #4]
 8007b08:	f000 f87a 	bl	8007c00 <_malloc_r>
 8007b0c:	9a01      	ldr	r2, [sp, #4]
 8007b0e:	4605      	mov	r5, r0
 8007b10:	b930      	cbnz	r0, 8007b20 <_calloc_r+0x24>
 8007b12:	4628      	mov	r0, r5
 8007b14:	b003      	add	sp, #12
 8007b16:	bd30      	pop	{r4, r5, pc}
 8007b18:	220c      	movs	r2, #12
 8007b1a:	6002      	str	r2, [r0, #0]
 8007b1c:	2500      	movs	r5, #0
 8007b1e:	e7f8      	b.n	8007b12 <_calloc_r+0x16>
 8007b20:	4621      	mov	r1, r4
 8007b22:	f7fe f941 	bl	8005da8 <memset>
 8007b26:	e7f4      	b.n	8007b12 <_calloc_r+0x16>

08007b28 <_free_r>:
 8007b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	d044      	beq.n	8007bb8 <_free_r+0x90>
 8007b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b32:	9001      	str	r0, [sp, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f1a1 0404 	sub.w	r4, r1, #4
 8007b3a:	bfb8      	it	lt
 8007b3c:	18e4      	addlt	r4, r4, r3
 8007b3e:	f000 fa9b 	bl	8008078 <__malloc_lock>
 8007b42:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <_free_r+0x94>)
 8007b44:	9801      	ldr	r0, [sp, #4]
 8007b46:	6813      	ldr	r3, [r2, #0]
 8007b48:	b933      	cbnz	r3, 8007b58 <_free_r+0x30>
 8007b4a:	6063      	str	r3, [r4, #4]
 8007b4c:	6014      	str	r4, [r2, #0]
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b54:	f000 ba96 	b.w	8008084 <__malloc_unlock>
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d908      	bls.n	8007b6e <_free_r+0x46>
 8007b5c:	6825      	ldr	r5, [r4, #0]
 8007b5e:	1961      	adds	r1, r4, r5
 8007b60:	428b      	cmp	r3, r1
 8007b62:	bf01      	itttt	eq
 8007b64:	6819      	ldreq	r1, [r3, #0]
 8007b66:	685b      	ldreq	r3, [r3, #4]
 8007b68:	1949      	addeq	r1, r1, r5
 8007b6a:	6021      	streq	r1, [r4, #0]
 8007b6c:	e7ed      	b.n	8007b4a <_free_r+0x22>
 8007b6e:	461a      	mov	r2, r3
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b10b      	cbz	r3, 8007b78 <_free_r+0x50>
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d9fa      	bls.n	8007b6e <_free_r+0x46>
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	1855      	adds	r5, r2, r1
 8007b7c:	42a5      	cmp	r5, r4
 8007b7e:	d10b      	bne.n	8007b98 <_free_r+0x70>
 8007b80:	6824      	ldr	r4, [r4, #0]
 8007b82:	4421      	add	r1, r4
 8007b84:	1854      	adds	r4, r2, r1
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	d1e0      	bne.n	8007b4e <_free_r+0x26>
 8007b8c:	681c      	ldr	r4, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	6053      	str	r3, [r2, #4]
 8007b92:	4421      	add	r1, r4
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	e7da      	b.n	8007b4e <_free_r+0x26>
 8007b98:	d902      	bls.n	8007ba0 <_free_r+0x78>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	e7d6      	b.n	8007b4e <_free_r+0x26>
 8007ba0:	6825      	ldr	r5, [r4, #0]
 8007ba2:	1961      	adds	r1, r4, r5
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	bf04      	itt	eq
 8007ba8:	6819      	ldreq	r1, [r3, #0]
 8007baa:	685b      	ldreq	r3, [r3, #4]
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	bf04      	itt	eq
 8007bb0:	1949      	addeq	r1, r1, r5
 8007bb2:	6021      	streq	r1, [r4, #0]
 8007bb4:	6054      	str	r4, [r2, #4]
 8007bb6:	e7ca      	b.n	8007b4e <_free_r+0x26>
 8007bb8:	b003      	add	sp, #12
 8007bba:	bd30      	pop	{r4, r5, pc}
 8007bbc:	200002b4 	.word	0x200002b4

08007bc0 <sbrk_aligned>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	4e0e      	ldr	r6, [pc, #56]	; (8007bfc <sbrk_aligned+0x3c>)
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	6831      	ldr	r1, [r6, #0]
 8007bc8:	4605      	mov	r5, r0
 8007bca:	b911      	cbnz	r1, 8007bd2 <sbrk_aligned+0x12>
 8007bcc:	f000 f9e8 	bl	8007fa0 <_sbrk_r>
 8007bd0:	6030      	str	r0, [r6, #0]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 f9e3 	bl	8007fa0 <_sbrk_r>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d00a      	beq.n	8007bf4 <sbrk_aligned+0x34>
 8007bde:	1cc4      	adds	r4, r0, #3
 8007be0:	f024 0403 	bic.w	r4, r4, #3
 8007be4:	42a0      	cmp	r0, r4
 8007be6:	d007      	beq.n	8007bf8 <sbrk_aligned+0x38>
 8007be8:	1a21      	subs	r1, r4, r0
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 f9d8 	bl	8007fa0 <_sbrk_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d101      	bne.n	8007bf8 <sbrk_aligned+0x38>
 8007bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	200002b8 	.word	0x200002b8

08007c00 <_malloc_r>:
 8007c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c04:	1ccd      	adds	r5, r1, #3
 8007c06:	f025 0503 	bic.w	r5, r5, #3
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	2d0c      	cmp	r5, #12
 8007c0e:	bf38      	it	cc
 8007c10:	250c      	movcc	r5, #12
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	4607      	mov	r7, r0
 8007c16:	db01      	blt.n	8007c1c <_malloc_r+0x1c>
 8007c18:	42a9      	cmp	r1, r5
 8007c1a:	d905      	bls.n	8007c28 <_malloc_r+0x28>
 8007c1c:	230c      	movs	r3, #12
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	2600      	movs	r6, #0
 8007c22:	4630      	mov	r0, r6
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	4e2e      	ldr	r6, [pc, #184]	; (8007ce4 <_malloc_r+0xe4>)
 8007c2a:	f000 fa25 	bl	8008078 <__malloc_lock>
 8007c2e:	6833      	ldr	r3, [r6, #0]
 8007c30:	461c      	mov	r4, r3
 8007c32:	bb34      	cbnz	r4, 8007c82 <_malloc_r+0x82>
 8007c34:	4629      	mov	r1, r5
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff ffc2 	bl	8007bc0 <sbrk_aligned>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	4604      	mov	r4, r0
 8007c40:	d14d      	bne.n	8007cde <_malloc_r+0xde>
 8007c42:	6834      	ldr	r4, [r6, #0]
 8007c44:	4626      	mov	r6, r4
 8007c46:	2e00      	cmp	r6, #0
 8007c48:	d140      	bne.n	8007ccc <_malloc_r+0xcc>
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4638      	mov	r0, r7
 8007c50:	eb04 0803 	add.w	r8, r4, r3
 8007c54:	f000 f9a4 	bl	8007fa0 <_sbrk_r>
 8007c58:	4580      	cmp	r8, r0
 8007c5a:	d13a      	bne.n	8007cd2 <_malloc_r+0xd2>
 8007c5c:	6821      	ldr	r1, [r4, #0]
 8007c5e:	3503      	adds	r5, #3
 8007c60:	1a6d      	subs	r5, r5, r1
 8007c62:	f025 0503 	bic.w	r5, r5, #3
 8007c66:	3508      	adds	r5, #8
 8007c68:	2d0c      	cmp	r5, #12
 8007c6a:	bf38      	it	cc
 8007c6c:	250c      	movcc	r5, #12
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ffa5 	bl	8007bc0 <sbrk_aligned>
 8007c76:	3001      	adds	r0, #1
 8007c78:	d02b      	beq.n	8007cd2 <_malloc_r+0xd2>
 8007c7a:	6823      	ldr	r3, [r4, #0]
 8007c7c:	442b      	add	r3, r5
 8007c7e:	6023      	str	r3, [r4, #0]
 8007c80:	e00e      	b.n	8007ca0 <_malloc_r+0xa0>
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	1b52      	subs	r2, r2, r5
 8007c86:	d41e      	bmi.n	8007cc6 <_malloc_r+0xc6>
 8007c88:	2a0b      	cmp	r2, #11
 8007c8a:	d916      	bls.n	8007cba <_malloc_r+0xba>
 8007c8c:	1961      	adds	r1, r4, r5
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	6025      	str	r5, [r4, #0]
 8007c92:	bf18      	it	ne
 8007c94:	6059      	strne	r1, [r3, #4]
 8007c96:	6863      	ldr	r3, [r4, #4]
 8007c98:	bf08      	it	eq
 8007c9a:	6031      	streq	r1, [r6, #0]
 8007c9c:	5162      	str	r2, [r4, r5]
 8007c9e:	604b      	str	r3, [r1, #4]
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f104 060b 	add.w	r6, r4, #11
 8007ca6:	f000 f9ed 	bl	8008084 <__malloc_unlock>
 8007caa:	f026 0607 	bic.w	r6, r6, #7
 8007cae:	1d23      	adds	r3, r4, #4
 8007cb0:	1af2      	subs	r2, r6, r3
 8007cb2:	d0b6      	beq.n	8007c22 <_malloc_r+0x22>
 8007cb4:	1b9b      	subs	r3, r3, r6
 8007cb6:	50a3      	str	r3, [r4, r2]
 8007cb8:	e7b3      	b.n	8007c22 <_malloc_r+0x22>
 8007cba:	6862      	ldr	r2, [r4, #4]
 8007cbc:	42a3      	cmp	r3, r4
 8007cbe:	bf0c      	ite	eq
 8007cc0:	6032      	streq	r2, [r6, #0]
 8007cc2:	605a      	strne	r2, [r3, #4]
 8007cc4:	e7ec      	b.n	8007ca0 <_malloc_r+0xa0>
 8007cc6:	4623      	mov	r3, r4
 8007cc8:	6864      	ldr	r4, [r4, #4]
 8007cca:	e7b2      	b.n	8007c32 <_malloc_r+0x32>
 8007ccc:	4634      	mov	r4, r6
 8007cce:	6876      	ldr	r6, [r6, #4]
 8007cd0:	e7b9      	b.n	8007c46 <_malloc_r+0x46>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	603b      	str	r3, [r7, #0]
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	f000 f9d4 	bl	8008084 <__malloc_unlock>
 8007cdc:	e7a1      	b.n	8007c22 <_malloc_r+0x22>
 8007cde:	6025      	str	r5, [r4, #0]
 8007ce0:	e7de      	b.n	8007ca0 <_malloc_r+0xa0>
 8007ce2:	bf00      	nop
 8007ce4:	200002b4 	.word	0x200002b4

08007ce8 <__ssputs_r>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	688e      	ldr	r6, [r1, #8]
 8007cee:	429e      	cmp	r6, r3
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4690      	mov	r8, r2
 8007cf6:	461f      	mov	r7, r3
 8007cf8:	d838      	bhi.n	8007d6c <__ssputs_r+0x84>
 8007cfa:	898a      	ldrh	r2, [r1, #12]
 8007cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d00:	d032      	beq.n	8007d68 <__ssputs_r+0x80>
 8007d02:	6825      	ldr	r5, [r4, #0]
 8007d04:	6909      	ldr	r1, [r1, #16]
 8007d06:	eba5 0901 	sub.w	r9, r5, r1
 8007d0a:	6965      	ldr	r5, [r4, #20]
 8007d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d14:	3301      	adds	r3, #1
 8007d16:	444b      	add	r3, r9
 8007d18:	106d      	asrs	r5, r5, #1
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	bf38      	it	cc
 8007d1e:	461d      	movcc	r5, r3
 8007d20:	0553      	lsls	r3, r2, #21
 8007d22:	d531      	bpl.n	8007d88 <__ssputs_r+0xa0>
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7ff ff6b 	bl	8007c00 <_malloc_r>
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	b950      	cbnz	r0, 8007d44 <__ssputs_r+0x5c>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	f8ca 3000 	str.w	r3, [sl]
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	6921      	ldr	r1, [r4, #16]
 8007d46:	464a      	mov	r2, r9
 8007d48:	f7ff fb48 	bl	80073dc <memcpy>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	6126      	str	r6, [r4, #16]
 8007d5a:	6165      	str	r5, [r4, #20]
 8007d5c:	444e      	add	r6, r9
 8007d5e:	eba5 0509 	sub.w	r5, r5, r9
 8007d62:	6026      	str	r6, [r4, #0]
 8007d64:	60a5      	str	r5, [r4, #8]
 8007d66:	463e      	mov	r6, r7
 8007d68:	42be      	cmp	r6, r7
 8007d6a:	d900      	bls.n	8007d6e <__ssputs_r+0x86>
 8007d6c:	463e      	mov	r6, r7
 8007d6e:	6820      	ldr	r0, [r4, #0]
 8007d70:	4632      	mov	r2, r6
 8007d72:	4641      	mov	r1, r8
 8007d74:	f000 f966 	bl	8008044 <memmove>
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	1b9b      	subs	r3, r3, r6
 8007d7c:	60a3      	str	r3, [r4, #8]
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	4433      	add	r3, r6
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	2000      	movs	r0, #0
 8007d86:	e7db      	b.n	8007d40 <__ssputs_r+0x58>
 8007d88:	462a      	mov	r2, r5
 8007d8a:	f000 f981 	bl	8008090 <_realloc_r>
 8007d8e:	4606      	mov	r6, r0
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d1e1      	bne.n	8007d58 <__ssputs_r+0x70>
 8007d94:	6921      	ldr	r1, [r4, #16]
 8007d96:	4650      	mov	r0, sl
 8007d98:	f7ff fec6 	bl	8007b28 <_free_r>
 8007d9c:	e7c7      	b.n	8007d2e <__ssputs_r+0x46>
	...

08007da0 <_svfiprintf_r>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	4698      	mov	r8, r3
 8007da6:	898b      	ldrh	r3, [r1, #12]
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	b09d      	sub	sp, #116	; 0x74
 8007dac:	4607      	mov	r7, r0
 8007dae:	460d      	mov	r5, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	d50e      	bpl.n	8007dd2 <_svfiprintf_r+0x32>
 8007db4:	690b      	ldr	r3, [r1, #16]
 8007db6:	b963      	cbnz	r3, 8007dd2 <_svfiprintf_r+0x32>
 8007db8:	2140      	movs	r1, #64	; 0x40
 8007dba:	f7ff ff21 	bl	8007c00 <_malloc_r>
 8007dbe:	6028      	str	r0, [r5, #0]
 8007dc0:	6128      	str	r0, [r5, #16]
 8007dc2:	b920      	cbnz	r0, 8007dce <_svfiprintf_r+0x2e>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	603b      	str	r3, [r7, #0]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	e0d1      	b.n	8007f72 <_svfiprintf_r+0x1d2>
 8007dce:	2340      	movs	r3, #64	; 0x40
 8007dd0:	616b      	str	r3, [r5, #20]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd6:	2320      	movs	r3, #32
 8007dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007de0:	2330      	movs	r3, #48	; 0x30
 8007de2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f8c <_svfiprintf_r+0x1ec>
 8007de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dea:	f04f 0901 	mov.w	r9, #1
 8007dee:	4623      	mov	r3, r4
 8007df0:	469a      	mov	sl, r3
 8007df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df6:	b10a      	cbz	r2, 8007dfc <_svfiprintf_r+0x5c>
 8007df8:	2a25      	cmp	r2, #37	; 0x25
 8007dfa:	d1f9      	bne.n	8007df0 <_svfiprintf_r+0x50>
 8007dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007e00:	d00b      	beq.n	8007e1a <_svfiprintf_r+0x7a>
 8007e02:	465b      	mov	r3, fp
 8007e04:	4622      	mov	r2, r4
 8007e06:	4629      	mov	r1, r5
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff ff6d 	bl	8007ce8 <__ssputs_r>
 8007e0e:	3001      	adds	r0, #1
 8007e10:	f000 80aa 	beq.w	8007f68 <_svfiprintf_r+0x1c8>
 8007e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e16:	445a      	add	r2, fp
 8007e18:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 80a2 	beq.w	8007f68 <_svfiprintf_r+0x1c8>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e2e:	f10a 0a01 	add.w	sl, sl, #1
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	9307      	str	r3, [sp, #28]
 8007e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2205      	movs	r2, #5
 8007e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e44:	4851      	ldr	r0, [pc, #324]	; (8007f8c <_svfiprintf_r+0x1ec>)
 8007e46:	f7f8 f9d3 	bl	80001f0 <memchr>
 8007e4a:	9a04      	ldr	r2, [sp, #16]
 8007e4c:	b9d8      	cbnz	r0, 8007e86 <_svfiprintf_r+0xe6>
 8007e4e:	06d0      	lsls	r0, r2, #27
 8007e50:	bf44      	itt	mi
 8007e52:	2320      	movmi	r3, #32
 8007e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e58:	0711      	lsls	r1, r2, #28
 8007e5a:	bf44      	itt	mi
 8007e5c:	232b      	movmi	r3, #43	; 0x2b
 8007e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e62:	f89a 3000 	ldrb.w	r3, [sl]
 8007e66:	2b2a      	cmp	r3, #42	; 0x2a
 8007e68:	d015      	beq.n	8007e96 <_svfiprintf_r+0xf6>
 8007e6a:	9a07      	ldr	r2, [sp, #28]
 8007e6c:	4654      	mov	r4, sl
 8007e6e:	2000      	movs	r0, #0
 8007e70:	f04f 0c0a 	mov.w	ip, #10
 8007e74:	4621      	mov	r1, r4
 8007e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e7a:	3b30      	subs	r3, #48	; 0x30
 8007e7c:	2b09      	cmp	r3, #9
 8007e7e:	d94e      	bls.n	8007f1e <_svfiprintf_r+0x17e>
 8007e80:	b1b0      	cbz	r0, 8007eb0 <_svfiprintf_r+0x110>
 8007e82:	9207      	str	r2, [sp, #28]
 8007e84:	e014      	b.n	8007eb0 <_svfiprintf_r+0x110>
 8007e86:	eba0 0308 	sub.w	r3, r0, r8
 8007e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	46a2      	mov	sl, r4
 8007e94:	e7d2      	b.n	8007e3c <_svfiprintf_r+0x9c>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	1d19      	adds	r1, r3, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	9103      	str	r1, [sp, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfbb      	ittet	lt
 8007ea2:	425b      	neglt	r3, r3
 8007ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea8:	9307      	strge	r3, [sp, #28]
 8007eaa:	9307      	strlt	r3, [sp, #28]
 8007eac:	bfb8      	it	lt
 8007eae:	9204      	strlt	r2, [sp, #16]
 8007eb0:	7823      	ldrb	r3, [r4, #0]
 8007eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb4:	d10c      	bne.n	8007ed0 <_svfiprintf_r+0x130>
 8007eb6:	7863      	ldrb	r3, [r4, #1]
 8007eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eba:	d135      	bne.n	8007f28 <_svfiprintf_r+0x188>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	1d1a      	adds	r2, r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bfb8      	it	lt
 8007ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ecc:	3402      	adds	r4, #2
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f9c <_svfiprintf_r+0x1fc>
 8007ed4:	7821      	ldrb	r1, [r4, #0]
 8007ed6:	2203      	movs	r2, #3
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f7f8 f989 	bl	80001f0 <memchr>
 8007ede:	b140      	cbz	r0, 8007ef2 <_svfiprintf_r+0x152>
 8007ee0:	2340      	movs	r3, #64	; 0x40
 8007ee2:	eba0 000a 	sub.w	r0, r0, sl
 8007ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	4303      	orrs	r3, r0
 8007eee:	3401      	adds	r4, #1
 8007ef0:	9304      	str	r3, [sp, #16]
 8007ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef6:	4826      	ldr	r0, [pc, #152]	; (8007f90 <_svfiprintf_r+0x1f0>)
 8007ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007efc:	2206      	movs	r2, #6
 8007efe:	f7f8 f977 	bl	80001f0 <memchr>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d038      	beq.n	8007f78 <_svfiprintf_r+0x1d8>
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <_svfiprintf_r+0x1f4>)
 8007f08:	bb1b      	cbnz	r3, 8007f52 <_svfiprintf_r+0x1b2>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	3307      	adds	r3, #7
 8007f0e:	f023 0307 	bic.w	r3, r3, #7
 8007f12:	3308      	adds	r3, #8
 8007f14:	9303      	str	r3, [sp, #12]
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	4433      	add	r3, r6
 8007f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f1c:	e767      	b.n	8007dee <_svfiprintf_r+0x4e>
 8007f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f22:	460c      	mov	r4, r1
 8007f24:	2001      	movs	r0, #1
 8007f26:	e7a5      	b.n	8007e74 <_svfiprintf_r+0xd4>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	9305      	str	r3, [sp, #20]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	4620      	mov	r0, r4
 8007f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f3a:	3a30      	subs	r2, #48	; 0x30
 8007f3c:	2a09      	cmp	r2, #9
 8007f3e:	d903      	bls.n	8007f48 <_svfiprintf_r+0x1a8>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d0c5      	beq.n	8007ed0 <_svfiprintf_r+0x130>
 8007f44:	9105      	str	r1, [sp, #20]
 8007f46:	e7c3      	b.n	8007ed0 <_svfiprintf_r+0x130>
 8007f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e7f0      	b.n	8007f34 <_svfiprintf_r+0x194>
 8007f52:	ab03      	add	r3, sp, #12
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	462a      	mov	r2, r5
 8007f58:	4b0f      	ldr	r3, [pc, #60]	; (8007f98 <_svfiprintf_r+0x1f8>)
 8007f5a:	a904      	add	r1, sp, #16
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	f7fd ffcb 	bl	8005ef8 <_printf_float>
 8007f62:	1c42      	adds	r2, r0, #1
 8007f64:	4606      	mov	r6, r0
 8007f66:	d1d6      	bne.n	8007f16 <_svfiprintf_r+0x176>
 8007f68:	89ab      	ldrh	r3, [r5, #12]
 8007f6a:	065b      	lsls	r3, r3, #25
 8007f6c:	f53f af2c 	bmi.w	8007dc8 <_svfiprintf_r+0x28>
 8007f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f72:	b01d      	add	sp, #116	; 0x74
 8007f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <_svfiprintf_r+0x1f8>)
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	4638      	mov	r0, r7
 8007f84:	f7fe fa5e 	bl	8006444 <_printf_i>
 8007f88:	e7eb      	b.n	8007f62 <_svfiprintf_r+0x1c2>
 8007f8a:	bf00      	nop
 8007f8c:	08008df4 	.word	0x08008df4
 8007f90:	08008dfe 	.word	0x08008dfe
 8007f94:	08005ef9 	.word	0x08005ef9
 8007f98:	08007ce9 	.word	0x08007ce9
 8007f9c:	08008dfa 	.word	0x08008dfa

08007fa0 <_sbrk_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d06      	ldr	r5, [pc, #24]	; (8007fbc <_sbrk_r+0x1c>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7f9 fd90 	bl	8001ad0 <_sbrk>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_sbrk_r+0x1a>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_sbrk_r+0x1a>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	200002bc 	.word	0x200002bc

08007fc0 <__assert_func>:
 8007fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007fc2:	4614      	mov	r4, r2
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <__assert_func+0x2c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4605      	mov	r5, r0
 8007fcc:	68d8      	ldr	r0, [r3, #12]
 8007fce:	b14c      	cbz	r4, 8007fe4 <__assert_func+0x24>
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <__assert_func+0x30>)
 8007fd2:	9100      	str	r1, [sp, #0]
 8007fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007fd8:	4906      	ldr	r1, [pc, #24]	; (8007ff4 <__assert_func+0x34>)
 8007fda:	462b      	mov	r3, r5
 8007fdc:	f000 f80e 	bl	8007ffc <fiprintf>
 8007fe0:	f000 faac 	bl	800853c <abort>
 8007fe4:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <__assert_func+0x38>)
 8007fe6:	461c      	mov	r4, r3
 8007fe8:	e7f3      	b.n	8007fd2 <__assert_func+0x12>
 8007fea:	bf00      	nop
 8007fec:	2000000c 	.word	0x2000000c
 8007ff0:	08008e05 	.word	0x08008e05
 8007ff4:	08008e12 	.word	0x08008e12
 8007ff8:	08008e40 	.word	0x08008e40

08007ffc <fiprintf>:
 8007ffc:	b40e      	push	{r1, r2, r3}
 8007ffe:	b503      	push	{r0, r1, lr}
 8008000:	4601      	mov	r1, r0
 8008002:	ab03      	add	r3, sp, #12
 8008004:	4805      	ldr	r0, [pc, #20]	; (800801c <fiprintf+0x20>)
 8008006:	f853 2b04 	ldr.w	r2, [r3], #4
 800800a:	6800      	ldr	r0, [r0, #0]
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	f000 f897 	bl	8008140 <_vfiprintf_r>
 8008012:	b002      	add	sp, #8
 8008014:	f85d eb04 	ldr.w	lr, [sp], #4
 8008018:	b003      	add	sp, #12
 800801a:	4770      	bx	lr
 800801c:	2000000c 	.word	0x2000000c

08008020 <__ascii_mbtowc>:
 8008020:	b082      	sub	sp, #8
 8008022:	b901      	cbnz	r1, 8008026 <__ascii_mbtowc+0x6>
 8008024:	a901      	add	r1, sp, #4
 8008026:	b142      	cbz	r2, 800803a <__ascii_mbtowc+0x1a>
 8008028:	b14b      	cbz	r3, 800803e <__ascii_mbtowc+0x1e>
 800802a:	7813      	ldrb	r3, [r2, #0]
 800802c:	600b      	str	r3, [r1, #0]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	1e10      	subs	r0, r2, #0
 8008032:	bf18      	it	ne
 8008034:	2001      	movne	r0, #1
 8008036:	b002      	add	sp, #8
 8008038:	4770      	bx	lr
 800803a:	4610      	mov	r0, r2
 800803c:	e7fb      	b.n	8008036 <__ascii_mbtowc+0x16>
 800803e:	f06f 0001 	mvn.w	r0, #1
 8008042:	e7f8      	b.n	8008036 <__ascii_mbtowc+0x16>

08008044 <memmove>:
 8008044:	4288      	cmp	r0, r1
 8008046:	b510      	push	{r4, lr}
 8008048:	eb01 0402 	add.w	r4, r1, r2
 800804c:	d902      	bls.n	8008054 <memmove+0x10>
 800804e:	4284      	cmp	r4, r0
 8008050:	4623      	mov	r3, r4
 8008052:	d807      	bhi.n	8008064 <memmove+0x20>
 8008054:	1e43      	subs	r3, r0, #1
 8008056:	42a1      	cmp	r1, r4
 8008058:	d008      	beq.n	800806c <memmove+0x28>
 800805a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800805e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008062:	e7f8      	b.n	8008056 <memmove+0x12>
 8008064:	4402      	add	r2, r0
 8008066:	4601      	mov	r1, r0
 8008068:	428a      	cmp	r2, r1
 800806a:	d100      	bne.n	800806e <memmove+0x2a>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008076:	e7f7      	b.n	8008068 <memmove+0x24>

08008078 <__malloc_lock>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__malloc_lock+0x8>)
 800807a:	f000 bc1f 	b.w	80088bc <__retarget_lock_acquire_recursive>
 800807e:	bf00      	nop
 8008080:	200002c0 	.word	0x200002c0

08008084 <__malloc_unlock>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__malloc_unlock+0x8>)
 8008086:	f000 bc1a 	b.w	80088be <__retarget_lock_release_recursive>
 800808a:	bf00      	nop
 800808c:	200002c0 	.word	0x200002c0

08008090 <_realloc_r>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4680      	mov	r8, r0
 8008096:	4614      	mov	r4, r2
 8008098:	460e      	mov	r6, r1
 800809a:	b921      	cbnz	r1, 80080a6 <_realloc_r+0x16>
 800809c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4611      	mov	r1, r2
 80080a2:	f7ff bdad 	b.w	8007c00 <_malloc_r>
 80080a6:	b92a      	cbnz	r2, 80080b4 <_realloc_r+0x24>
 80080a8:	f7ff fd3e 	bl	8007b28 <_free_r>
 80080ac:	4625      	mov	r5, r4
 80080ae:	4628      	mov	r0, r5
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	f000 fc6a 	bl	800898c <_malloc_usable_size_r>
 80080b8:	4284      	cmp	r4, r0
 80080ba:	4607      	mov	r7, r0
 80080bc:	d802      	bhi.n	80080c4 <_realloc_r+0x34>
 80080be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80080c2:	d812      	bhi.n	80080ea <_realloc_r+0x5a>
 80080c4:	4621      	mov	r1, r4
 80080c6:	4640      	mov	r0, r8
 80080c8:	f7ff fd9a 	bl	8007c00 <_malloc_r>
 80080cc:	4605      	mov	r5, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0ed      	beq.n	80080ae <_realloc_r+0x1e>
 80080d2:	42bc      	cmp	r4, r7
 80080d4:	4622      	mov	r2, r4
 80080d6:	4631      	mov	r1, r6
 80080d8:	bf28      	it	cs
 80080da:	463a      	movcs	r2, r7
 80080dc:	f7ff f97e 	bl	80073dc <memcpy>
 80080e0:	4631      	mov	r1, r6
 80080e2:	4640      	mov	r0, r8
 80080e4:	f7ff fd20 	bl	8007b28 <_free_r>
 80080e8:	e7e1      	b.n	80080ae <_realloc_r+0x1e>
 80080ea:	4635      	mov	r5, r6
 80080ec:	e7df      	b.n	80080ae <_realloc_r+0x1e>

080080ee <__sfputc_r>:
 80080ee:	6893      	ldr	r3, [r2, #8]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	b410      	push	{r4}
 80080f6:	6093      	str	r3, [r2, #8]
 80080f8:	da08      	bge.n	800810c <__sfputc_r+0x1e>
 80080fa:	6994      	ldr	r4, [r2, #24]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	db01      	blt.n	8008104 <__sfputc_r+0x16>
 8008100:	290a      	cmp	r1, #10
 8008102:	d103      	bne.n	800810c <__sfputc_r+0x1e>
 8008104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008108:	f000 b94a 	b.w	80083a0 <__swbuf_r>
 800810c:	6813      	ldr	r3, [r2, #0]
 800810e:	1c58      	adds	r0, r3, #1
 8008110:	6010      	str	r0, [r2, #0]
 8008112:	7019      	strb	r1, [r3, #0]
 8008114:	4608      	mov	r0, r1
 8008116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811a:	4770      	bx	lr

0800811c <__sfputs_r>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	4614      	mov	r4, r2
 8008124:	18d5      	adds	r5, r2, r3
 8008126:	42ac      	cmp	r4, r5
 8008128:	d101      	bne.n	800812e <__sfputs_r+0x12>
 800812a:	2000      	movs	r0, #0
 800812c:	e007      	b.n	800813e <__sfputs_r+0x22>
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	463a      	mov	r2, r7
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ffda 	bl	80080ee <__sfputc_r>
 800813a:	1c43      	adds	r3, r0, #1
 800813c:	d1f3      	bne.n	8008126 <__sfputs_r+0xa>
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008140 <_vfiprintf_r>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	460d      	mov	r5, r1
 8008146:	b09d      	sub	sp, #116	; 0x74
 8008148:	4614      	mov	r4, r2
 800814a:	4698      	mov	r8, r3
 800814c:	4606      	mov	r6, r0
 800814e:	b118      	cbz	r0, 8008158 <_vfiprintf_r+0x18>
 8008150:	6983      	ldr	r3, [r0, #24]
 8008152:	b90b      	cbnz	r3, 8008158 <_vfiprintf_r+0x18>
 8008154:	f000 fb14 	bl	8008780 <__sinit>
 8008158:	4b89      	ldr	r3, [pc, #548]	; (8008380 <_vfiprintf_r+0x240>)
 800815a:	429d      	cmp	r5, r3
 800815c:	d11b      	bne.n	8008196 <_vfiprintf_r+0x56>
 800815e:	6875      	ldr	r5, [r6, #4]
 8008160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008162:	07d9      	lsls	r1, r3, #31
 8008164:	d405      	bmi.n	8008172 <_vfiprintf_r+0x32>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	059a      	lsls	r2, r3, #22
 800816a:	d402      	bmi.n	8008172 <_vfiprintf_r+0x32>
 800816c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800816e:	f000 fba5 	bl	80088bc <__retarget_lock_acquire_recursive>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	071b      	lsls	r3, r3, #28
 8008176:	d501      	bpl.n	800817c <_vfiprintf_r+0x3c>
 8008178:	692b      	ldr	r3, [r5, #16]
 800817a:	b9eb      	cbnz	r3, 80081b8 <_vfiprintf_r+0x78>
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f000 f96e 	bl	8008460 <__swsetup_r>
 8008184:	b1c0      	cbz	r0, 80081b8 <_vfiprintf_r+0x78>
 8008186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008188:	07dc      	lsls	r4, r3, #31
 800818a:	d50e      	bpl.n	80081aa <_vfiprintf_r+0x6a>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	b01d      	add	sp, #116	; 0x74
 8008192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008196:	4b7b      	ldr	r3, [pc, #492]	; (8008384 <_vfiprintf_r+0x244>)
 8008198:	429d      	cmp	r5, r3
 800819a:	d101      	bne.n	80081a0 <_vfiprintf_r+0x60>
 800819c:	68b5      	ldr	r5, [r6, #8]
 800819e:	e7df      	b.n	8008160 <_vfiprintf_r+0x20>
 80081a0:	4b79      	ldr	r3, [pc, #484]	; (8008388 <_vfiprintf_r+0x248>)
 80081a2:	429d      	cmp	r5, r3
 80081a4:	bf08      	it	eq
 80081a6:	68f5      	ldreq	r5, [r6, #12]
 80081a8:	e7da      	b.n	8008160 <_vfiprintf_r+0x20>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	0598      	lsls	r0, r3, #22
 80081ae:	d4ed      	bmi.n	800818c <_vfiprintf_r+0x4c>
 80081b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b2:	f000 fb84 	bl	80088be <__retarget_lock_release_recursive>
 80081b6:	e7e9      	b.n	800818c <_vfiprintf_r+0x4c>
 80081b8:	2300      	movs	r3, #0
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	2320      	movs	r3, #32
 80081be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c6:	2330      	movs	r3, #48	; 0x30
 80081c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800838c <_vfiprintf_r+0x24c>
 80081cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d0:	f04f 0901 	mov.w	r9, #1
 80081d4:	4623      	mov	r3, r4
 80081d6:	469a      	mov	sl, r3
 80081d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081dc:	b10a      	cbz	r2, 80081e2 <_vfiprintf_r+0xa2>
 80081de:	2a25      	cmp	r2, #37	; 0x25
 80081e0:	d1f9      	bne.n	80081d6 <_vfiprintf_r+0x96>
 80081e2:	ebba 0b04 	subs.w	fp, sl, r4
 80081e6:	d00b      	beq.n	8008200 <_vfiprintf_r+0xc0>
 80081e8:	465b      	mov	r3, fp
 80081ea:	4622      	mov	r2, r4
 80081ec:	4629      	mov	r1, r5
 80081ee:	4630      	mov	r0, r6
 80081f0:	f7ff ff94 	bl	800811c <__sfputs_r>
 80081f4:	3001      	adds	r0, #1
 80081f6:	f000 80aa 	beq.w	800834e <_vfiprintf_r+0x20e>
 80081fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081fc:	445a      	add	r2, fp
 80081fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008200:	f89a 3000 	ldrb.w	r3, [sl]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 80a2 	beq.w	800834e <_vfiprintf_r+0x20e>
 800820a:	2300      	movs	r3, #0
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008214:	f10a 0a01 	add.w	sl, sl, #1
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	9307      	str	r3, [sp, #28]
 800821c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008220:	931a      	str	r3, [sp, #104]	; 0x68
 8008222:	4654      	mov	r4, sl
 8008224:	2205      	movs	r2, #5
 8008226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822a:	4858      	ldr	r0, [pc, #352]	; (800838c <_vfiprintf_r+0x24c>)
 800822c:	f7f7 ffe0 	bl	80001f0 <memchr>
 8008230:	9a04      	ldr	r2, [sp, #16]
 8008232:	b9d8      	cbnz	r0, 800826c <_vfiprintf_r+0x12c>
 8008234:	06d1      	lsls	r1, r2, #27
 8008236:	bf44      	itt	mi
 8008238:	2320      	movmi	r3, #32
 800823a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823e:	0713      	lsls	r3, r2, #28
 8008240:	bf44      	itt	mi
 8008242:	232b      	movmi	r3, #43	; 0x2b
 8008244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008248:	f89a 3000 	ldrb.w	r3, [sl]
 800824c:	2b2a      	cmp	r3, #42	; 0x2a
 800824e:	d015      	beq.n	800827c <_vfiprintf_r+0x13c>
 8008250:	9a07      	ldr	r2, [sp, #28]
 8008252:	4654      	mov	r4, sl
 8008254:	2000      	movs	r0, #0
 8008256:	f04f 0c0a 	mov.w	ip, #10
 800825a:	4621      	mov	r1, r4
 800825c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008260:	3b30      	subs	r3, #48	; 0x30
 8008262:	2b09      	cmp	r3, #9
 8008264:	d94e      	bls.n	8008304 <_vfiprintf_r+0x1c4>
 8008266:	b1b0      	cbz	r0, 8008296 <_vfiprintf_r+0x156>
 8008268:	9207      	str	r2, [sp, #28]
 800826a:	e014      	b.n	8008296 <_vfiprintf_r+0x156>
 800826c:	eba0 0308 	sub.w	r3, r0, r8
 8008270:	fa09 f303 	lsl.w	r3, r9, r3
 8008274:	4313      	orrs	r3, r2
 8008276:	9304      	str	r3, [sp, #16]
 8008278:	46a2      	mov	sl, r4
 800827a:	e7d2      	b.n	8008222 <_vfiprintf_r+0xe2>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	1d19      	adds	r1, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	9103      	str	r1, [sp, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	bfbb      	ittet	lt
 8008288:	425b      	neglt	r3, r3
 800828a:	f042 0202 	orrlt.w	r2, r2, #2
 800828e:	9307      	strge	r3, [sp, #28]
 8008290:	9307      	strlt	r3, [sp, #28]
 8008292:	bfb8      	it	lt
 8008294:	9204      	strlt	r2, [sp, #16]
 8008296:	7823      	ldrb	r3, [r4, #0]
 8008298:	2b2e      	cmp	r3, #46	; 0x2e
 800829a:	d10c      	bne.n	80082b6 <_vfiprintf_r+0x176>
 800829c:	7863      	ldrb	r3, [r4, #1]
 800829e:	2b2a      	cmp	r3, #42	; 0x2a
 80082a0:	d135      	bne.n	800830e <_vfiprintf_r+0x1ce>
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	1d1a      	adds	r2, r3, #4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	9203      	str	r2, [sp, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfb8      	it	lt
 80082ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b2:	3402      	adds	r4, #2
 80082b4:	9305      	str	r3, [sp, #20]
 80082b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800839c <_vfiprintf_r+0x25c>
 80082ba:	7821      	ldrb	r1, [r4, #0]
 80082bc:	2203      	movs	r2, #3
 80082be:	4650      	mov	r0, sl
 80082c0:	f7f7 ff96 	bl	80001f0 <memchr>
 80082c4:	b140      	cbz	r0, 80082d8 <_vfiprintf_r+0x198>
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	eba0 000a 	sub.w	r0, r0, sl
 80082cc:	fa03 f000 	lsl.w	r0, r3, r0
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	4303      	orrs	r3, r0
 80082d4:	3401      	adds	r4, #1
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082dc:	482c      	ldr	r0, [pc, #176]	; (8008390 <_vfiprintf_r+0x250>)
 80082de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e2:	2206      	movs	r2, #6
 80082e4:	f7f7 ff84 	bl	80001f0 <memchr>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d03f      	beq.n	800836c <_vfiprintf_r+0x22c>
 80082ec:	4b29      	ldr	r3, [pc, #164]	; (8008394 <_vfiprintf_r+0x254>)
 80082ee:	bb1b      	cbnz	r3, 8008338 <_vfiprintf_r+0x1f8>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	3307      	adds	r3, #7
 80082f4:	f023 0307 	bic.w	r3, r3, #7
 80082f8:	3308      	adds	r3, #8
 80082fa:	9303      	str	r3, [sp, #12]
 80082fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fe:	443b      	add	r3, r7
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	e767      	b.n	80081d4 <_vfiprintf_r+0x94>
 8008304:	fb0c 3202 	mla	r2, ip, r2, r3
 8008308:	460c      	mov	r4, r1
 800830a:	2001      	movs	r0, #1
 800830c:	e7a5      	b.n	800825a <_vfiprintf_r+0x11a>
 800830e:	2300      	movs	r3, #0
 8008310:	3401      	adds	r4, #1
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	4619      	mov	r1, r3
 8008316:	f04f 0c0a 	mov.w	ip, #10
 800831a:	4620      	mov	r0, r4
 800831c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008320:	3a30      	subs	r2, #48	; 0x30
 8008322:	2a09      	cmp	r2, #9
 8008324:	d903      	bls.n	800832e <_vfiprintf_r+0x1ee>
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0c5      	beq.n	80082b6 <_vfiprintf_r+0x176>
 800832a:	9105      	str	r1, [sp, #20]
 800832c:	e7c3      	b.n	80082b6 <_vfiprintf_r+0x176>
 800832e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008332:	4604      	mov	r4, r0
 8008334:	2301      	movs	r3, #1
 8008336:	e7f0      	b.n	800831a <_vfiprintf_r+0x1da>
 8008338:	ab03      	add	r3, sp, #12
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	462a      	mov	r2, r5
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <_vfiprintf_r+0x258>)
 8008340:	a904      	add	r1, sp, #16
 8008342:	4630      	mov	r0, r6
 8008344:	f7fd fdd8 	bl	8005ef8 <_printf_float>
 8008348:	4607      	mov	r7, r0
 800834a:	1c78      	adds	r0, r7, #1
 800834c:	d1d6      	bne.n	80082fc <_vfiprintf_r+0x1bc>
 800834e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008350:	07d9      	lsls	r1, r3, #31
 8008352:	d405      	bmi.n	8008360 <_vfiprintf_r+0x220>
 8008354:	89ab      	ldrh	r3, [r5, #12]
 8008356:	059a      	lsls	r2, r3, #22
 8008358:	d402      	bmi.n	8008360 <_vfiprintf_r+0x220>
 800835a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835c:	f000 faaf 	bl	80088be <__retarget_lock_release_recursive>
 8008360:	89ab      	ldrh	r3, [r5, #12]
 8008362:	065b      	lsls	r3, r3, #25
 8008364:	f53f af12 	bmi.w	800818c <_vfiprintf_r+0x4c>
 8008368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836a:	e711      	b.n	8008190 <_vfiprintf_r+0x50>
 800836c:	ab03      	add	r3, sp, #12
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	462a      	mov	r2, r5
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <_vfiprintf_r+0x258>)
 8008374:	a904      	add	r1, sp, #16
 8008376:	4630      	mov	r0, r6
 8008378:	f7fe f864 	bl	8006444 <_printf_i>
 800837c:	e7e4      	b.n	8008348 <_vfiprintf_r+0x208>
 800837e:	bf00      	nop
 8008380:	08008f6c 	.word	0x08008f6c
 8008384:	08008f8c 	.word	0x08008f8c
 8008388:	08008f4c 	.word	0x08008f4c
 800838c:	08008df4 	.word	0x08008df4
 8008390:	08008dfe 	.word	0x08008dfe
 8008394:	08005ef9 	.word	0x08005ef9
 8008398:	0800811d 	.word	0x0800811d
 800839c:	08008dfa 	.word	0x08008dfa

080083a0 <__swbuf_r>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	460e      	mov	r6, r1
 80083a4:	4614      	mov	r4, r2
 80083a6:	4605      	mov	r5, r0
 80083a8:	b118      	cbz	r0, 80083b2 <__swbuf_r+0x12>
 80083aa:	6983      	ldr	r3, [r0, #24]
 80083ac:	b90b      	cbnz	r3, 80083b2 <__swbuf_r+0x12>
 80083ae:	f000 f9e7 	bl	8008780 <__sinit>
 80083b2:	4b21      	ldr	r3, [pc, #132]	; (8008438 <__swbuf_r+0x98>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d12b      	bne.n	8008410 <__swbuf_r+0x70>
 80083b8:	686c      	ldr	r4, [r5, #4]
 80083ba:	69a3      	ldr	r3, [r4, #24]
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	071a      	lsls	r2, r3, #28
 80083c2:	d52f      	bpl.n	8008424 <__swbuf_r+0x84>
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	b36b      	cbz	r3, 8008424 <__swbuf_r+0x84>
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	6820      	ldr	r0, [r4, #0]
 80083cc:	1ac0      	subs	r0, r0, r3
 80083ce:	6963      	ldr	r3, [r4, #20]
 80083d0:	b2f6      	uxtb	r6, r6
 80083d2:	4283      	cmp	r3, r0
 80083d4:	4637      	mov	r7, r6
 80083d6:	dc04      	bgt.n	80083e2 <__swbuf_r+0x42>
 80083d8:	4621      	mov	r1, r4
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 f93c 	bl	8008658 <_fflush_r>
 80083e0:	bb30      	cbnz	r0, 8008430 <__swbuf_r+0x90>
 80083e2:	68a3      	ldr	r3, [r4, #8]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	60a3      	str	r3, [r4, #8]
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	6022      	str	r2, [r4, #0]
 80083ee:	701e      	strb	r6, [r3, #0]
 80083f0:	6963      	ldr	r3, [r4, #20]
 80083f2:	3001      	adds	r0, #1
 80083f4:	4283      	cmp	r3, r0
 80083f6:	d004      	beq.n	8008402 <__swbuf_r+0x62>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	07db      	lsls	r3, r3, #31
 80083fc:	d506      	bpl.n	800840c <__swbuf_r+0x6c>
 80083fe:	2e0a      	cmp	r6, #10
 8008400:	d104      	bne.n	800840c <__swbuf_r+0x6c>
 8008402:	4621      	mov	r1, r4
 8008404:	4628      	mov	r0, r5
 8008406:	f000 f927 	bl	8008658 <_fflush_r>
 800840a:	b988      	cbnz	r0, 8008430 <__swbuf_r+0x90>
 800840c:	4638      	mov	r0, r7
 800840e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008410:	4b0a      	ldr	r3, [pc, #40]	; (800843c <__swbuf_r+0x9c>)
 8008412:	429c      	cmp	r4, r3
 8008414:	d101      	bne.n	800841a <__swbuf_r+0x7a>
 8008416:	68ac      	ldr	r4, [r5, #8]
 8008418:	e7cf      	b.n	80083ba <__swbuf_r+0x1a>
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <__swbuf_r+0xa0>)
 800841c:	429c      	cmp	r4, r3
 800841e:	bf08      	it	eq
 8008420:	68ec      	ldreq	r4, [r5, #12]
 8008422:	e7ca      	b.n	80083ba <__swbuf_r+0x1a>
 8008424:	4621      	mov	r1, r4
 8008426:	4628      	mov	r0, r5
 8008428:	f000 f81a 	bl	8008460 <__swsetup_r>
 800842c:	2800      	cmp	r0, #0
 800842e:	d0cb      	beq.n	80083c8 <__swbuf_r+0x28>
 8008430:	f04f 37ff 	mov.w	r7, #4294967295
 8008434:	e7ea      	b.n	800840c <__swbuf_r+0x6c>
 8008436:	bf00      	nop
 8008438:	08008f6c 	.word	0x08008f6c
 800843c:	08008f8c 	.word	0x08008f8c
 8008440:	08008f4c 	.word	0x08008f4c

08008444 <__ascii_wctomb>:
 8008444:	b149      	cbz	r1, 800845a <__ascii_wctomb+0x16>
 8008446:	2aff      	cmp	r2, #255	; 0xff
 8008448:	bf85      	ittet	hi
 800844a:	238a      	movhi	r3, #138	; 0x8a
 800844c:	6003      	strhi	r3, [r0, #0]
 800844e:	700a      	strbls	r2, [r1, #0]
 8008450:	f04f 30ff 	movhi.w	r0, #4294967295
 8008454:	bf98      	it	ls
 8008456:	2001      	movls	r0, #1
 8008458:	4770      	bx	lr
 800845a:	4608      	mov	r0, r1
 800845c:	4770      	bx	lr
	...

08008460 <__swsetup_r>:
 8008460:	4b32      	ldr	r3, [pc, #200]	; (800852c <__swsetup_r+0xcc>)
 8008462:	b570      	push	{r4, r5, r6, lr}
 8008464:	681d      	ldr	r5, [r3, #0]
 8008466:	4606      	mov	r6, r0
 8008468:	460c      	mov	r4, r1
 800846a:	b125      	cbz	r5, 8008476 <__swsetup_r+0x16>
 800846c:	69ab      	ldr	r3, [r5, #24]
 800846e:	b913      	cbnz	r3, 8008476 <__swsetup_r+0x16>
 8008470:	4628      	mov	r0, r5
 8008472:	f000 f985 	bl	8008780 <__sinit>
 8008476:	4b2e      	ldr	r3, [pc, #184]	; (8008530 <__swsetup_r+0xd0>)
 8008478:	429c      	cmp	r4, r3
 800847a:	d10f      	bne.n	800849c <__swsetup_r+0x3c>
 800847c:	686c      	ldr	r4, [r5, #4]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008484:	0719      	lsls	r1, r3, #28
 8008486:	d42c      	bmi.n	80084e2 <__swsetup_r+0x82>
 8008488:	06dd      	lsls	r5, r3, #27
 800848a:	d411      	bmi.n	80084b0 <__swsetup_r+0x50>
 800848c:	2309      	movs	r3, #9
 800848e:	6033      	str	r3, [r6, #0]
 8008490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008494:	81a3      	strh	r3, [r4, #12]
 8008496:	f04f 30ff 	mov.w	r0, #4294967295
 800849a:	e03e      	b.n	800851a <__swsetup_r+0xba>
 800849c:	4b25      	ldr	r3, [pc, #148]	; (8008534 <__swsetup_r+0xd4>)
 800849e:	429c      	cmp	r4, r3
 80084a0:	d101      	bne.n	80084a6 <__swsetup_r+0x46>
 80084a2:	68ac      	ldr	r4, [r5, #8]
 80084a4:	e7eb      	b.n	800847e <__swsetup_r+0x1e>
 80084a6:	4b24      	ldr	r3, [pc, #144]	; (8008538 <__swsetup_r+0xd8>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	bf08      	it	eq
 80084ac:	68ec      	ldreq	r4, [r5, #12]
 80084ae:	e7e6      	b.n	800847e <__swsetup_r+0x1e>
 80084b0:	0758      	lsls	r0, r3, #29
 80084b2:	d512      	bpl.n	80084da <__swsetup_r+0x7a>
 80084b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084b6:	b141      	cbz	r1, 80084ca <__swsetup_r+0x6a>
 80084b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084bc:	4299      	cmp	r1, r3
 80084be:	d002      	beq.n	80084c6 <__swsetup_r+0x66>
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7ff fb31 	bl	8007b28 <_free_r>
 80084c6:	2300      	movs	r3, #0
 80084c8:	6363      	str	r3, [r4, #52]	; 0x34
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	2300      	movs	r3, #0
 80084d4:	6063      	str	r3, [r4, #4]
 80084d6:	6923      	ldr	r3, [r4, #16]
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	f043 0308 	orr.w	r3, r3, #8
 80084e0:	81a3      	strh	r3, [r4, #12]
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	b94b      	cbnz	r3, 80084fa <__swsetup_r+0x9a>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f0:	d003      	beq.n	80084fa <__swsetup_r+0x9a>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4630      	mov	r0, r6
 80084f6:	f000 fa09 	bl	800890c <__smakebuf_r>
 80084fa:	89a0      	ldrh	r0, [r4, #12]
 80084fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008500:	f010 0301 	ands.w	r3, r0, #1
 8008504:	d00a      	beq.n	800851c <__swsetup_r+0xbc>
 8008506:	2300      	movs	r3, #0
 8008508:	60a3      	str	r3, [r4, #8]
 800850a:	6963      	ldr	r3, [r4, #20]
 800850c:	425b      	negs	r3, r3
 800850e:	61a3      	str	r3, [r4, #24]
 8008510:	6923      	ldr	r3, [r4, #16]
 8008512:	b943      	cbnz	r3, 8008526 <__swsetup_r+0xc6>
 8008514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008518:	d1ba      	bne.n	8008490 <__swsetup_r+0x30>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	0781      	lsls	r1, r0, #30
 800851e:	bf58      	it	pl
 8008520:	6963      	ldrpl	r3, [r4, #20]
 8008522:	60a3      	str	r3, [r4, #8]
 8008524:	e7f4      	b.n	8008510 <__swsetup_r+0xb0>
 8008526:	2000      	movs	r0, #0
 8008528:	e7f7      	b.n	800851a <__swsetup_r+0xba>
 800852a:	bf00      	nop
 800852c:	2000000c 	.word	0x2000000c
 8008530:	08008f6c 	.word	0x08008f6c
 8008534:	08008f8c 	.word	0x08008f8c
 8008538:	08008f4c 	.word	0x08008f4c

0800853c <abort>:
 800853c:	b508      	push	{r3, lr}
 800853e:	2006      	movs	r0, #6
 8008540:	f000 fa54 	bl	80089ec <raise>
 8008544:	2001      	movs	r0, #1
 8008546:	f7f9 fa4b 	bl	80019e0 <_exit>
	...

0800854c <__sflush_r>:
 800854c:	898a      	ldrh	r2, [r1, #12]
 800854e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008552:	4605      	mov	r5, r0
 8008554:	0710      	lsls	r0, r2, #28
 8008556:	460c      	mov	r4, r1
 8008558:	d458      	bmi.n	800860c <__sflush_r+0xc0>
 800855a:	684b      	ldr	r3, [r1, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	dc05      	bgt.n	800856c <__sflush_r+0x20>
 8008560:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	dc02      	bgt.n	800856c <__sflush_r+0x20>
 8008566:	2000      	movs	r0, #0
 8008568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800856c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800856e:	2e00      	cmp	r6, #0
 8008570:	d0f9      	beq.n	8008566 <__sflush_r+0x1a>
 8008572:	2300      	movs	r3, #0
 8008574:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008578:	682f      	ldr	r7, [r5, #0]
 800857a:	602b      	str	r3, [r5, #0]
 800857c:	d032      	beq.n	80085e4 <__sflush_r+0x98>
 800857e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	075a      	lsls	r2, r3, #29
 8008584:	d505      	bpl.n	8008592 <__sflush_r+0x46>
 8008586:	6863      	ldr	r3, [r4, #4]
 8008588:	1ac0      	subs	r0, r0, r3
 800858a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800858c:	b10b      	cbz	r3, 8008592 <__sflush_r+0x46>
 800858e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008590:	1ac0      	subs	r0, r0, r3
 8008592:	2300      	movs	r3, #0
 8008594:	4602      	mov	r2, r0
 8008596:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008598:	6a21      	ldr	r1, [r4, #32]
 800859a:	4628      	mov	r0, r5
 800859c:	47b0      	blx	r6
 800859e:	1c43      	adds	r3, r0, #1
 80085a0:	89a3      	ldrh	r3, [r4, #12]
 80085a2:	d106      	bne.n	80085b2 <__sflush_r+0x66>
 80085a4:	6829      	ldr	r1, [r5, #0]
 80085a6:	291d      	cmp	r1, #29
 80085a8:	d82c      	bhi.n	8008604 <__sflush_r+0xb8>
 80085aa:	4a2a      	ldr	r2, [pc, #168]	; (8008654 <__sflush_r+0x108>)
 80085ac:	40ca      	lsrs	r2, r1
 80085ae:	07d6      	lsls	r6, r2, #31
 80085b0:	d528      	bpl.n	8008604 <__sflush_r+0xb8>
 80085b2:	2200      	movs	r2, #0
 80085b4:	6062      	str	r2, [r4, #4]
 80085b6:	04d9      	lsls	r1, r3, #19
 80085b8:	6922      	ldr	r2, [r4, #16]
 80085ba:	6022      	str	r2, [r4, #0]
 80085bc:	d504      	bpl.n	80085c8 <__sflush_r+0x7c>
 80085be:	1c42      	adds	r2, r0, #1
 80085c0:	d101      	bne.n	80085c6 <__sflush_r+0x7a>
 80085c2:	682b      	ldr	r3, [r5, #0]
 80085c4:	b903      	cbnz	r3, 80085c8 <__sflush_r+0x7c>
 80085c6:	6560      	str	r0, [r4, #84]	; 0x54
 80085c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085ca:	602f      	str	r7, [r5, #0]
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d0ca      	beq.n	8008566 <__sflush_r+0x1a>
 80085d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d4:	4299      	cmp	r1, r3
 80085d6:	d002      	beq.n	80085de <__sflush_r+0x92>
 80085d8:	4628      	mov	r0, r5
 80085da:	f7ff faa5 	bl	8007b28 <_free_r>
 80085de:	2000      	movs	r0, #0
 80085e0:	6360      	str	r0, [r4, #52]	; 0x34
 80085e2:	e7c1      	b.n	8008568 <__sflush_r+0x1c>
 80085e4:	6a21      	ldr	r1, [r4, #32]
 80085e6:	2301      	movs	r3, #1
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b0      	blx	r6
 80085ec:	1c41      	adds	r1, r0, #1
 80085ee:	d1c7      	bne.n	8008580 <__sflush_r+0x34>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0c4      	beq.n	8008580 <__sflush_r+0x34>
 80085f6:	2b1d      	cmp	r3, #29
 80085f8:	d001      	beq.n	80085fe <__sflush_r+0xb2>
 80085fa:	2b16      	cmp	r3, #22
 80085fc:	d101      	bne.n	8008602 <__sflush_r+0xb6>
 80085fe:	602f      	str	r7, [r5, #0]
 8008600:	e7b1      	b.n	8008566 <__sflush_r+0x1a>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008608:	81a3      	strh	r3, [r4, #12]
 800860a:	e7ad      	b.n	8008568 <__sflush_r+0x1c>
 800860c:	690f      	ldr	r7, [r1, #16]
 800860e:	2f00      	cmp	r7, #0
 8008610:	d0a9      	beq.n	8008566 <__sflush_r+0x1a>
 8008612:	0793      	lsls	r3, r2, #30
 8008614:	680e      	ldr	r6, [r1, #0]
 8008616:	bf08      	it	eq
 8008618:	694b      	ldreq	r3, [r1, #20]
 800861a:	600f      	str	r7, [r1, #0]
 800861c:	bf18      	it	ne
 800861e:	2300      	movne	r3, #0
 8008620:	eba6 0807 	sub.w	r8, r6, r7
 8008624:	608b      	str	r3, [r1, #8]
 8008626:	f1b8 0f00 	cmp.w	r8, #0
 800862a:	dd9c      	ble.n	8008566 <__sflush_r+0x1a>
 800862c:	6a21      	ldr	r1, [r4, #32]
 800862e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008630:	4643      	mov	r3, r8
 8008632:	463a      	mov	r2, r7
 8008634:	4628      	mov	r0, r5
 8008636:	47b0      	blx	r6
 8008638:	2800      	cmp	r0, #0
 800863a:	dc06      	bgt.n	800864a <__sflush_r+0xfe>
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e78e      	b.n	8008568 <__sflush_r+0x1c>
 800864a:	4407      	add	r7, r0
 800864c:	eba8 0800 	sub.w	r8, r8, r0
 8008650:	e7e9      	b.n	8008626 <__sflush_r+0xda>
 8008652:	bf00      	nop
 8008654:	20400001 	.word	0x20400001

08008658 <_fflush_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	690b      	ldr	r3, [r1, #16]
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	b913      	cbnz	r3, 8008668 <_fflush_r+0x10>
 8008662:	2500      	movs	r5, #0
 8008664:	4628      	mov	r0, r5
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	b118      	cbz	r0, 8008672 <_fflush_r+0x1a>
 800866a:	6983      	ldr	r3, [r0, #24]
 800866c:	b90b      	cbnz	r3, 8008672 <_fflush_r+0x1a>
 800866e:	f000 f887 	bl	8008780 <__sinit>
 8008672:	4b14      	ldr	r3, [pc, #80]	; (80086c4 <_fflush_r+0x6c>)
 8008674:	429c      	cmp	r4, r3
 8008676:	d11b      	bne.n	80086b0 <_fflush_r+0x58>
 8008678:	686c      	ldr	r4, [r5, #4]
 800867a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0ef      	beq.n	8008662 <_fflush_r+0xa>
 8008682:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008684:	07d0      	lsls	r0, r2, #31
 8008686:	d404      	bmi.n	8008692 <_fflush_r+0x3a>
 8008688:	0599      	lsls	r1, r3, #22
 800868a:	d402      	bmi.n	8008692 <_fflush_r+0x3a>
 800868c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800868e:	f000 f915 	bl	80088bc <__retarget_lock_acquire_recursive>
 8008692:	4628      	mov	r0, r5
 8008694:	4621      	mov	r1, r4
 8008696:	f7ff ff59 	bl	800854c <__sflush_r>
 800869a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800869c:	07da      	lsls	r2, r3, #31
 800869e:	4605      	mov	r5, r0
 80086a0:	d4e0      	bmi.n	8008664 <_fflush_r+0xc>
 80086a2:	89a3      	ldrh	r3, [r4, #12]
 80086a4:	059b      	lsls	r3, r3, #22
 80086a6:	d4dd      	bmi.n	8008664 <_fflush_r+0xc>
 80086a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086aa:	f000 f908 	bl	80088be <__retarget_lock_release_recursive>
 80086ae:	e7d9      	b.n	8008664 <_fflush_r+0xc>
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <_fflush_r+0x70>)
 80086b2:	429c      	cmp	r4, r3
 80086b4:	d101      	bne.n	80086ba <_fflush_r+0x62>
 80086b6:	68ac      	ldr	r4, [r5, #8]
 80086b8:	e7df      	b.n	800867a <_fflush_r+0x22>
 80086ba:	4b04      	ldr	r3, [pc, #16]	; (80086cc <_fflush_r+0x74>)
 80086bc:	429c      	cmp	r4, r3
 80086be:	bf08      	it	eq
 80086c0:	68ec      	ldreq	r4, [r5, #12]
 80086c2:	e7da      	b.n	800867a <_fflush_r+0x22>
 80086c4:	08008f6c 	.word	0x08008f6c
 80086c8:	08008f8c 	.word	0x08008f8c
 80086cc:	08008f4c 	.word	0x08008f4c

080086d0 <std>:
 80086d0:	2300      	movs	r3, #0
 80086d2:	b510      	push	{r4, lr}
 80086d4:	4604      	mov	r4, r0
 80086d6:	e9c0 3300 	strd	r3, r3, [r0]
 80086da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086de:	6083      	str	r3, [r0, #8]
 80086e0:	8181      	strh	r1, [r0, #12]
 80086e2:	6643      	str	r3, [r0, #100]	; 0x64
 80086e4:	81c2      	strh	r2, [r0, #14]
 80086e6:	6183      	str	r3, [r0, #24]
 80086e8:	4619      	mov	r1, r3
 80086ea:	2208      	movs	r2, #8
 80086ec:	305c      	adds	r0, #92	; 0x5c
 80086ee:	f7fd fb5b 	bl	8005da8 <memset>
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <std+0x38>)
 80086f4:	6263      	str	r3, [r4, #36]	; 0x24
 80086f6:	4b05      	ldr	r3, [pc, #20]	; (800870c <std+0x3c>)
 80086f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80086fa:	4b05      	ldr	r3, [pc, #20]	; (8008710 <std+0x40>)
 80086fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086fe:	4b05      	ldr	r3, [pc, #20]	; (8008714 <std+0x44>)
 8008700:	6224      	str	r4, [r4, #32]
 8008702:	6323      	str	r3, [r4, #48]	; 0x30
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	08008a25 	.word	0x08008a25
 800870c:	08008a47 	.word	0x08008a47
 8008710:	08008a7f 	.word	0x08008a7f
 8008714:	08008aa3 	.word	0x08008aa3

08008718 <_cleanup_r>:
 8008718:	4901      	ldr	r1, [pc, #4]	; (8008720 <_cleanup_r+0x8>)
 800871a:	f000 b8af 	b.w	800887c <_fwalk_reent>
 800871e:	bf00      	nop
 8008720:	08008659 	.word	0x08008659

08008724 <__sfmoreglue>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	2268      	movs	r2, #104	; 0x68
 8008728:	1e4d      	subs	r5, r1, #1
 800872a:	4355      	muls	r5, r2
 800872c:	460e      	mov	r6, r1
 800872e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008732:	f7ff fa65 	bl	8007c00 <_malloc_r>
 8008736:	4604      	mov	r4, r0
 8008738:	b140      	cbz	r0, 800874c <__sfmoreglue+0x28>
 800873a:	2100      	movs	r1, #0
 800873c:	e9c0 1600 	strd	r1, r6, [r0]
 8008740:	300c      	adds	r0, #12
 8008742:	60a0      	str	r0, [r4, #8]
 8008744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008748:	f7fd fb2e 	bl	8005da8 <memset>
 800874c:	4620      	mov	r0, r4
 800874e:	bd70      	pop	{r4, r5, r6, pc}

08008750 <__sfp_lock_acquire>:
 8008750:	4801      	ldr	r0, [pc, #4]	; (8008758 <__sfp_lock_acquire+0x8>)
 8008752:	f000 b8b3 	b.w	80088bc <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	200002c1 	.word	0x200002c1

0800875c <__sfp_lock_release>:
 800875c:	4801      	ldr	r0, [pc, #4]	; (8008764 <__sfp_lock_release+0x8>)
 800875e:	f000 b8ae 	b.w	80088be <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	200002c1 	.word	0x200002c1

08008768 <__sinit_lock_acquire>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__sinit_lock_acquire+0x8>)
 800876a:	f000 b8a7 	b.w	80088bc <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	200002c2 	.word	0x200002c2

08008774 <__sinit_lock_release>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__sinit_lock_release+0x8>)
 8008776:	f000 b8a2 	b.w	80088be <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	200002c2 	.word	0x200002c2

08008780 <__sinit>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	f7ff fff0 	bl	8008768 <__sinit_lock_acquire>
 8008788:	69a3      	ldr	r3, [r4, #24]
 800878a:	b11b      	cbz	r3, 8008794 <__sinit+0x14>
 800878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008790:	f7ff bff0 	b.w	8008774 <__sinit_lock_release>
 8008794:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008798:	6523      	str	r3, [r4, #80]	; 0x50
 800879a:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <__sinit+0x68>)
 800879c:	4a13      	ldr	r2, [pc, #76]	; (80087ec <__sinit+0x6c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	bf04      	itt	eq
 80087a6:	2301      	moveq	r3, #1
 80087a8:	61a3      	streq	r3, [r4, #24]
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 f820 	bl	80087f0 <__sfp>
 80087b0:	6060      	str	r0, [r4, #4]
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 f81c 	bl	80087f0 <__sfp>
 80087b8:	60a0      	str	r0, [r4, #8]
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 f818 	bl	80087f0 <__sfp>
 80087c0:	2200      	movs	r2, #0
 80087c2:	60e0      	str	r0, [r4, #12]
 80087c4:	2104      	movs	r1, #4
 80087c6:	6860      	ldr	r0, [r4, #4]
 80087c8:	f7ff ff82 	bl	80086d0 <std>
 80087cc:	68a0      	ldr	r0, [r4, #8]
 80087ce:	2201      	movs	r2, #1
 80087d0:	2109      	movs	r1, #9
 80087d2:	f7ff ff7d 	bl	80086d0 <std>
 80087d6:	68e0      	ldr	r0, [r4, #12]
 80087d8:	2202      	movs	r2, #2
 80087da:	2112      	movs	r1, #18
 80087dc:	f7ff ff78 	bl	80086d0 <std>
 80087e0:	2301      	movs	r3, #1
 80087e2:	61a3      	str	r3, [r4, #24]
 80087e4:	e7d2      	b.n	800878c <__sinit+0xc>
 80087e6:	bf00      	nop
 80087e8:	08008bd0 	.word	0x08008bd0
 80087ec:	08008719 	.word	0x08008719

080087f0 <__sfp>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	4607      	mov	r7, r0
 80087f4:	f7ff ffac 	bl	8008750 <__sfp_lock_acquire>
 80087f8:	4b1e      	ldr	r3, [pc, #120]	; (8008874 <__sfp+0x84>)
 80087fa:	681e      	ldr	r6, [r3, #0]
 80087fc:	69b3      	ldr	r3, [r6, #24]
 80087fe:	b913      	cbnz	r3, 8008806 <__sfp+0x16>
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff ffbd 	bl	8008780 <__sinit>
 8008806:	3648      	adds	r6, #72	; 0x48
 8008808:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800880c:	3b01      	subs	r3, #1
 800880e:	d503      	bpl.n	8008818 <__sfp+0x28>
 8008810:	6833      	ldr	r3, [r6, #0]
 8008812:	b30b      	cbz	r3, 8008858 <__sfp+0x68>
 8008814:	6836      	ldr	r6, [r6, #0]
 8008816:	e7f7      	b.n	8008808 <__sfp+0x18>
 8008818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800881c:	b9d5      	cbnz	r5, 8008854 <__sfp+0x64>
 800881e:	4b16      	ldr	r3, [pc, #88]	; (8008878 <__sfp+0x88>)
 8008820:	60e3      	str	r3, [r4, #12]
 8008822:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008826:	6665      	str	r5, [r4, #100]	; 0x64
 8008828:	f000 f847 	bl	80088ba <__retarget_lock_init_recursive>
 800882c:	f7ff ff96 	bl	800875c <__sfp_lock_release>
 8008830:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008834:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008838:	6025      	str	r5, [r4, #0]
 800883a:	61a5      	str	r5, [r4, #24]
 800883c:	2208      	movs	r2, #8
 800883e:	4629      	mov	r1, r5
 8008840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008844:	f7fd fab0 	bl	8005da8 <memset>
 8008848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800884c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008850:	4620      	mov	r0, r4
 8008852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008854:	3468      	adds	r4, #104	; 0x68
 8008856:	e7d9      	b.n	800880c <__sfp+0x1c>
 8008858:	2104      	movs	r1, #4
 800885a:	4638      	mov	r0, r7
 800885c:	f7ff ff62 	bl	8008724 <__sfmoreglue>
 8008860:	4604      	mov	r4, r0
 8008862:	6030      	str	r0, [r6, #0]
 8008864:	2800      	cmp	r0, #0
 8008866:	d1d5      	bne.n	8008814 <__sfp+0x24>
 8008868:	f7ff ff78 	bl	800875c <__sfp_lock_release>
 800886c:	230c      	movs	r3, #12
 800886e:	603b      	str	r3, [r7, #0]
 8008870:	e7ee      	b.n	8008850 <__sfp+0x60>
 8008872:	bf00      	nop
 8008874:	08008bd0 	.word	0x08008bd0
 8008878:	ffff0001 	.word	0xffff0001

0800887c <_fwalk_reent>:
 800887c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008880:	4606      	mov	r6, r0
 8008882:	4688      	mov	r8, r1
 8008884:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008888:	2700      	movs	r7, #0
 800888a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800888e:	f1b9 0901 	subs.w	r9, r9, #1
 8008892:	d505      	bpl.n	80088a0 <_fwalk_reent+0x24>
 8008894:	6824      	ldr	r4, [r4, #0]
 8008896:	2c00      	cmp	r4, #0
 8008898:	d1f7      	bne.n	800888a <_fwalk_reent+0xe>
 800889a:	4638      	mov	r0, r7
 800889c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a0:	89ab      	ldrh	r3, [r5, #12]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d907      	bls.n	80088b6 <_fwalk_reent+0x3a>
 80088a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088aa:	3301      	adds	r3, #1
 80088ac:	d003      	beq.n	80088b6 <_fwalk_reent+0x3a>
 80088ae:	4629      	mov	r1, r5
 80088b0:	4630      	mov	r0, r6
 80088b2:	47c0      	blx	r8
 80088b4:	4307      	orrs	r7, r0
 80088b6:	3568      	adds	r5, #104	; 0x68
 80088b8:	e7e9      	b.n	800888e <_fwalk_reent+0x12>

080088ba <__retarget_lock_init_recursive>:
 80088ba:	4770      	bx	lr

080088bc <__retarget_lock_acquire_recursive>:
 80088bc:	4770      	bx	lr

080088be <__retarget_lock_release_recursive>:
 80088be:	4770      	bx	lr

080088c0 <__swhatbuf_r>:
 80088c0:	b570      	push	{r4, r5, r6, lr}
 80088c2:	460e      	mov	r6, r1
 80088c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c8:	2900      	cmp	r1, #0
 80088ca:	b096      	sub	sp, #88	; 0x58
 80088cc:	4614      	mov	r4, r2
 80088ce:	461d      	mov	r5, r3
 80088d0:	da08      	bge.n	80088e4 <__swhatbuf_r+0x24>
 80088d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	602a      	str	r2, [r5, #0]
 80088da:	061a      	lsls	r2, r3, #24
 80088dc:	d410      	bmi.n	8008900 <__swhatbuf_r+0x40>
 80088de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088e2:	e00e      	b.n	8008902 <__swhatbuf_r+0x42>
 80088e4:	466a      	mov	r2, sp
 80088e6:	f000 f903 	bl	8008af0 <_fstat_r>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	dbf1      	blt.n	80088d2 <__swhatbuf_r+0x12>
 80088ee:	9a01      	ldr	r2, [sp, #4]
 80088f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80088f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088f8:	425a      	negs	r2, r3
 80088fa:	415a      	adcs	r2, r3
 80088fc:	602a      	str	r2, [r5, #0]
 80088fe:	e7ee      	b.n	80088de <__swhatbuf_r+0x1e>
 8008900:	2340      	movs	r3, #64	; 0x40
 8008902:	2000      	movs	r0, #0
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	b016      	add	sp, #88	; 0x58
 8008908:	bd70      	pop	{r4, r5, r6, pc}
	...

0800890c <__smakebuf_r>:
 800890c:	898b      	ldrh	r3, [r1, #12]
 800890e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008910:	079d      	lsls	r5, r3, #30
 8008912:	4606      	mov	r6, r0
 8008914:	460c      	mov	r4, r1
 8008916:	d507      	bpl.n	8008928 <__smakebuf_r+0x1c>
 8008918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	6123      	str	r3, [r4, #16]
 8008920:	2301      	movs	r3, #1
 8008922:	6163      	str	r3, [r4, #20]
 8008924:	b002      	add	sp, #8
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	ab01      	add	r3, sp, #4
 800892a:	466a      	mov	r2, sp
 800892c:	f7ff ffc8 	bl	80088c0 <__swhatbuf_r>
 8008930:	9900      	ldr	r1, [sp, #0]
 8008932:	4605      	mov	r5, r0
 8008934:	4630      	mov	r0, r6
 8008936:	f7ff f963 	bl	8007c00 <_malloc_r>
 800893a:	b948      	cbnz	r0, 8008950 <__smakebuf_r+0x44>
 800893c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008940:	059a      	lsls	r2, r3, #22
 8008942:	d4ef      	bmi.n	8008924 <__smakebuf_r+0x18>
 8008944:	f023 0303 	bic.w	r3, r3, #3
 8008948:	f043 0302 	orr.w	r3, r3, #2
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	e7e3      	b.n	8008918 <__smakebuf_r+0xc>
 8008950:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <__smakebuf_r+0x7c>)
 8008952:	62b3      	str	r3, [r6, #40]	; 0x28
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	6020      	str	r0, [r4, #0]
 8008958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	6163      	str	r3, [r4, #20]
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	6120      	str	r0, [r4, #16]
 8008966:	b15b      	cbz	r3, 8008980 <__smakebuf_r+0x74>
 8008968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896c:	4630      	mov	r0, r6
 800896e:	f000 f8d1 	bl	8008b14 <_isatty_r>
 8008972:	b128      	cbz	r0, 8008980 <__smakebuf_r+0x74>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	f043 0301 	orr.w	r3, r3, #1
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	89a0      	ldrh	r0, [r4, #12]
 8008982:	4305      	orrs	r5, r0
 8008984:	81a5      	strh	r5, [r4, #12]
 8008986:	e7cd      	b.n	8008924 <__smakebuf_r+0x18>
 8008988:	08008719 	.word	0x08008719

0800898c <_malloc_usable_size_r>:
 800898c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008990:	1f18      	subs	r0, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfbc      	itt	lt
 8008996:	580b      	ldrlt	r3, [r1, r0]
 8008998:	18c0      	addlt	r0, r0, r3
 800899a:	4770      	bx	lr

0800899c <_raise_r>:
 800899c:	291f      	cmp	r1, #31
 800899e:	b538      	push	{r3, r4, r5, lr}
 80089a0:	4604      	mov	r4, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	d904      	bls.n	80089b0 <_raise_r+0x14>
 80089a6:	2316      	movs	r3, #22
 80089a8:	6003      	str	r3, [r0, #0]
 80089aa:	f04f 30ff 	mov.w	r0, #4294967295
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089b2:	b112      	cbz	r2, 80089ba <_raise_r+0x1e>
 80089b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089b8:	b94b      	cbnz	r3, 80089ce <_raise_r+0x32>
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f830 	bl	8008a20 <_getpid_r>
 80089c0:	462a      	mov	r2, r5
 80089c2:	4601      	mov	r1, r0
 80089c4:	4620      	mov	r0, r4
 80089c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ca:	f000 b817 	b.w	80089fc <_kill_r>
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d00a      	beq.n	80089e8 <_raise_r+0x4c>
 80089d2:	1c59      	adds	r1, r3, #1
 80089d4:	d103      	bne.n	80089de <_raise_r+0x42>
 80089d6:	2316      	movs	r3, #22
 80089d8:	6003      	str	r3, [r0, #0]
 80089da:	2001      	movs	r0, #1
 80089dc:	e7e7      	b.n	80089ae <_raise_r+0x12>
 80089de:	2400      	movs	r4, #0
 80089e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089e4:	4628      	mov	r0, r5
 80089e6:	4798      	blx	r3
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7e0      	b.n	80089ae <_raise_r+0x12>

080089ec <raise>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	; (80089f8 <raise+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f7ff bfd3 	b.w	800899c <_raise_r>
 80089f6:	bf00      	nop
 80089f8:	2000000c 	.word	0x2000000c

080089fc <_kill_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4d07      	ldr	r5, [pc, #28]	; (8008a1c <_kill_r+0x20>)
 8008a00:	2300      	movs	r3, #0
 8008a02:	4604      	mov	r4, r0
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	f7f8 ffd9 	bl	80019c0 <_kill>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	d102      	bne.n	8008a18 <_kill_r+0x1c>
 8008a12:	682b      	ldr	r3, [r5, #0]
 8008a14:	b103      	cbz	r3, 8008a18 <_kill_r+0x1c>
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	bd38      	pop	{r3, r4, r5, pc}
 8008a1a:	bf00      	nop
 8008a1c:	200002bc 	.word	0x200002bc

08008a20 <_getpid_r>:
 8008a20:	f7f8 bfc6 	b.w	80019b0 <_getpid>

08008a24 <__sread>:
 8008a24:	b510      	push	{r4, lr}
 8008a26:	460c      	mov	r4, r1
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	f000 f894 	bl	8008b58 <_read_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	bfab      	itete	ge
 8008a34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a36:	89a3      	ldrhlt	r3, [r4, #12]
 8008a38:	181b      	addge	r3, r3, r0
 8008a3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a3e:	bfac      	ite	ge
 8008a40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a42:	81a3      	strhlt	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__swrite>:
 8008a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	898b      	ldrh	r3, [r1, #12]
 8008a4e:	05db      	lsls	r3, r3, #23
 8008a50:	4605      	mov	r5, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	4616      	mov	r6, r2
 8008a56:	d505      	bpl.n	8008a64 <__swrite+0x1e>
 8008a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f000 f868 	bl	8008b34 <_lseek_r>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a6e:	81a3      	strh	r3, [r4, #12]
 8008a70:	4632      	mov	r2, r6
 8008a72:	463b      	mov	r3, r7
 8008a74:	4628      	mov	r0, r5
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	f000 b817 	b.w	8008aac <_write_r>

08008a7e <__sseek>:
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a86:	f000 f855 	bl	8008b34 <_lseek_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	bf15      	itete	ne
 8008a90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a9a:	81a3      	strheq	r3, [r4, #12]
 8008a9c:	bf18      	it	ne
 8008a9e:	81a3      	strhne	r3, [r4, #12]
 8008aa0:	bd10      	pop	{r4, pc}

08008aa2 <__sclose>:
 8008aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa6:	f000 b813 	b.w	8008ad0 <_close_r>
	...

08008aac <_write_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d07      	ldr	r5, [pc, #28]	; (8008acc <_write_r+0x20>)
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	602a      	str	r2, [r5, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f7f8 ffb7 	bl	8001a2e <_write>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_write_r+0x1e>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_write_r+0x1e>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	200002bc 	.word	0x200002bc

08008ad0 <_close_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d06      	ldr	r5, [pc, #24]	; (8008aec <_close_r+0x1c>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	f7f8 ffc3 	bl	8001a66 <_close>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_close_r+0x1a>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_close_r+0x1a>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	200002bc 	.word	0x200002bc

08008af0 <_fstat_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d07      	ldr	r5, [pc, #28]	; (8008b10 <_fstat_r+0x20>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	4611      	mov	r1, r2
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	f7f8 ffbe 	bl	8001a7e <_fstat>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	d102      	bne.n	8008b0c <_fstat_r+0x1c>
 8008b06:	682b      	ldr	r3, [r5, #0]
 8008b08:	b103      	cbz	r3, 8008b0c <_fstat_r+0x1c>
 8008b0a:	6023      	str	r3, [r4, #0]
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	bf00      	nop
 8008b10:	200002bc 	.word	0x200002bc

08008b14 <_isatty_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4d06      	ldr	r5, [pc, #24]	; (8008b30 <_isatty_r+0x1c>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	602b      	str	r3, [r5, #0]
 8008b20:	f7f8 ffbd 	bl	8001a9e <_isatty>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_isatty_r+0x1a>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_isatty_r+0x1a>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	200002bc 	.word	0x200002bc

08008b34 <_lseek_r>:
 8008b34:	b538      	push	{r3, r4, r5, lr}
 8008b36:	4d07      	ldr	r5, [pc, #28]	; (8008b54 <_lseek_r+0x20>)
 8008b38:	4604      	mov	r4, r0
 8008b3a:	4608      	mov	r0, r1
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	602a      	str	r2, [r5, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f7f8 ffb6 	bl	8001ab4 <_lseek>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_lseek_r+0x1e>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_lseek_r+0x1e>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	200002bc 	.word	0x200002bc

08008b58 <_read_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	; (8008b78 <_read_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f8 ff44 	bl	80019f4 <_read>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_read_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_read_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	200002bc 	.word	0x200002bc

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
